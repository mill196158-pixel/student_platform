import 'dart:convert';
import 'dart:io';
import 'dart:typed_data';
import 'package:minio/minio.dart';

class S3Client {
  final String accessKey;
  final String secretKey;
  final String bucketName;
  final String region;
  final String endpoint;
  late final Minio _minioClient;

  S3Client({
    required this.accessKey,
    required this.secretKey,
    required this.bucketName,
    required this.region,
    required this.endpoint,
  }) {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Minio –∫–ª–∏–µ–Ω—Ç –¥–ª—è Yandex Object Storage
    _minioClient = Minio(
      endPoint: endpoint,
      accessKey: accessKey,
      secretKey: secretKey,
      region: region,
    );
  }

  // –ü—Ä–∏–≤–æ–¥–∏–º –ø–æ—Ç–æ–∫ –∫ Stream<Uint8List>
  Stream<Uint8List> _asUint8Stream(File file) async* {
    await for (final chunk in file.openRead()) {
      yield Uint8List.fromList(chunk);
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Minio SDK
  Future<S3UploadResult> putObject({
    required String key,
    required Uint8List body,
    String? contentType,
  }) async {
    try {
      print('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Yandex Storage —á–µ—Ä–µ–∑ Minio...');
      print('üìç Key: $key');
      print('üì¶ Bucket: $bucketName');
      print('üìè Size: ${body.length} bytes');
      print('üìÑ Content-Type: ${contentType ?? 'application/octet-stream'}');

      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
      final tempFile = File('${Directory.systemTemp.path}/temp_upload_${DateTime.now().millisecondsSinceEpoch}');
      await tempFile.writeAsBytes(body);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ Minio (–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å–∏–≥–Ω–∞—Ç—É—Ä–∞ - —Ç–æ–ª—å–∫–æ 3 –∞—Ä–≥—É–º–µ–Ω—Ç–∞)
      final fileSize = await tempFile.length();
      await _minioClient.putObject(
        bucketName,
        key,
        _asUint8Stream(tempFile),
      );

      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      await tempFile.delete();

      // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
      final fileUrl = 'https://$bucketName.$endpoint/$key';

      print('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!');
      print('üîó URL: $fileUrl');

      return S3UploadResult(
        success: true,
        fileKey: key,
        fileName: key.split('/').last,
        fileUrl: fileUrl,
        fileType: contentType ?? 'application/octet-stream',
        fileSize: fileSize,
      );
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: $e');
      return S3UploadResult(
        success: false,
        error: e.toString(),
      );
    }
  }

  // –¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  Future<bool> testConnection() async {
    try {
      print('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Yandex Storage —á–µ—Ä–µ–∑ Minio...');
      print('üìç Endpoint: $endpoint');
      print('üì¶ Bucket: $bucketName');
      print('üåç Region: $region');
      print('üîë Access Key: ${accessKey.substring(0, 8)}...');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∫–µ—Ç–∞
      final bucketExists = await _minioClient.bucketExists(bucketName);
      if (!bucketExists) {
        print('‚ùå –ë–∞–∫–µ—Ç $bucketName –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        return false;
      }
      print('‚úÖ –ë–∞–∫–µ—Ç $bucketName –Ω–∞–π–¥–µ–Ω!');

      // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
      final result = await putObject(
        key: 'test/connection-test.txt',
        body: Uint8List.fromList(utf8.encode('Test connection from ${DateTime.now()}')),
        contentType: 'text/plain',
      );

      if (result.success) {
        print('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–æ!');
        return true;
      } else {
        print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${result.error}');
        return false;
      }
    } catch (e) {
      print('üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: $e');
      return false;
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
  void dispose() {
    // Minio –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ—Å—É—Ä—Å–∞–º–∏
  }
}

class S3UploadResult {
  final bool success;
  final String? fileKey;
  final String? fileName;
  final String? fileUrl;
  final String? fileType;
  final int? fileSize;
  final String? error;

  S3UploadResult({
    required this.success,
    this.fileKey,
    this.fileName,
    this.fileUrl,
    this.fileType,
    this.fileSize,
    this.error,
  });
}
