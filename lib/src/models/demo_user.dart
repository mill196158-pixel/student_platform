class DemoUser {
  final String firstName;
  final String lastName;

  /// –í–£–ó –∏ –∫—É—Ä—Å (—Å—Ç—Ä–æ–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º: "1", "2" –∏ —Ç.–¥.)
  final String university;
  final String group; // –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ "–∫—É—Ä—Å"

  /// –°—Ç–∞—Ç—É—Å/–∏–Ω—Ç—Ä–æ
  final String status;

  /// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  final int messagesCount;
  final int friendsCount;

  /// –ê–≤–∞—Ç–∞—Ä: –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å (–¥–µ–º–æ) –∏–ª–∏ url (–Ω–∞ –±—É–¥—É—â–µ–µ)
  final String? avatarPath;
  final String? avatarUrl;

  const DemoUser({
    required this.firstName,
    required this.lastName,
    required this.university,
    required this.group,
    required this.status,
    required this.messagesCount,
    required this.friendsCount,
    this.avatarPath,
    this.avatarUrl,
  });

  String get fullName =>
      [firstName, lastName].where((e) => e.trim().isNotEmpty).join(' ').trim();

  DemoUser copyWith({
    String? firstName,
    String? lastName,
    String? university,
    String? group,
    String? status,
    int? messagesCount,
    int? friendsCount,
    String? avatarPath,
    String? avatarUrl,
  }) {
    return DemoUser(
      firstName: firstName ?? this.firstName,
      lastName: lastName ?? this.lastName,
      university: university ?? this.university,
      group: group ?? this.group,
      status: status ?? this.status,
      messagesCount: messagesCount ?? this.messagesCount,
      friendsCount: friendsCount ?? this.friendsCount,
      avatarPath: avatarPath ?? this.avatarPath,
      avatarUrl: avatarUrl ?? this.avatarUrl,
    );
  }

  factory DemoUser.demo() => const DemoUser(
        firstName: '–ò–≤–∞–Ω',
        lastName: '–ò–≤–∞–Ω–æ–≤',
        university: '–°–ü–±–ì–ê–°–£',
        group: '1', // —Å—Ç—É–¥–µ–Ω—Ç 1 –∫—É—Ä—Å
        status: '–ì–æ—Ç–æ–≤–ª—é—Å—å –∫ —Å–µ—Å—Å–∏–∏ üí™',
        messagesCount: 42,
        friendsCount: 7,
        avatarPath: null,
        avatarUrl: null,
      );
}
