import 'package:flutter/material.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'ui/authentication/screens/login_screen.dart';
import 'ui/navigation/navigation_screen.dart';

class App extends StatefulWidget {
  const App({super.key});
  @override
  State<App> createState() => _AppState();
}

class _AppState extends State<App> {
  Session? _session;

  @override
  void initState() {
    super.initState();
    _session = Supabase.instance.client.auth.currentSession;
    Supabase.instance.client.auth.onAuthStateChange.listen((event) {
      setState(() => _session = event.session);
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      home: _session == null
          ? const LoginScreen()
          : const NavigationScreen(),
    );
  }
}
import 'package:flutter/material.dart';

/// ==== Р¦РІРµС‚Р° (РІР·СЏС‚С‹ РёР· Cloudmate СЃС‚РёР»СЏ) ====
const _colorBlack = Color(0xFF121212);
const _colorPrimaryBlack = Color(0xFF14171A);
const _colorPrimary = Color(0xFF1DA1F2);

final Color _mC = Colors.grey.shade100; // background СЃРІРµС‚Р»С‹Р№
final Color _mCL = Colors.white;        // surface
final Color _mCM = Colors.grey.shade200;
final Color _mCH = Colors.grey.shade400;

class CApp {
  final Color primary;
  final Color background;
  final Color accent;
  final Color disabled;
  final Color error;
  final Color divider;
  final Color button;
  final Color text1;
  final Color text2;

  const CApp({
    required this.primary,
    required this.background,
    required this.accent,
    required this.disabled,
    required this.error,
    required this.divider,
    required this.button,
    required this.text1,
    required this.text2,
  });

  factory CApp.light() => CApp(
    primary: _colorPrimary,
    background: _mC,
    accent: const Color(0xFF17C063),
    disabled: Colors.black12,
    error: const Color(0xFFFF7466),
    divider: Colors.black26,
    button: const Color(0xFF657786),
    text1: _colorBlack,
    text2: _colorPrimaryBlack,
  );

  factory CApp.dark() => CApp(
    primary: _colorPrimary,
    background: const Color(0xFF14171A),
    accent: const Color(0xFF17C063),
    disabled: Colors.white12,
    error: const Color(0xFFFF5544),
    divider: Colors.white24,
    button: Colors.white,
    text1: _mCL,
    text2: _mCL,
  );
}

class AppTheme {
  static ThemeData light =
  _themeFrom(CApp.light(), brightness: Brightness.light);
  static ThemeData dark =
  _themeFrom(CApp.dark(), brightness: Brightness.dark);

  static ThemeData _themeFrom(CApp c, {required Brightness brightness}) {
    const uiFont = 'Lato'; // РѕСЃРЅРѕРІРЅРѕР№ С€СЂРёС„С‚ UI

    final scheme = ColorScheme(
      brightness: brightness,
      primary: c.primary,
      onPrimary: Colors.white,
      secondary: c.accent,
      onSecondary: Colors.white,
      error: c.error,
      onError: Colors.white,
      surface: _mCL,
      onSurface: c.text1,
      background: c.background,
      onBackground: c.text1,
      outline: c.divider,
    );

    return ThemeData(
      useMaterial3: true,
      colorScheme: scheme,
      scaffoldBackgroundColor: c.background,
      appBarTheme: AppBarTheme(
        backgroundColor: _mCL,
        elevation: 0,
        scrolledUnderElevation: 0,
        centerTitle: true,
        foregroundColor: c.text1,
        titleTextStyle: TextStyle(
          fontFamily: uiFont,
          fontWeight: FontWeight.w700,
          fontSize: 18,
          color: c.text1,
        ),
      ),
      textTheme: TextTheme(
        displaySmall: TextStyle(
            fontFamily: uiFont,
            fontWeight: FontWeight.w700,
            fontSize: 28,
            color: c.text1),
        titleLarge: TextStyle(
            fontFamily: uiFont,
            fontWeight: FontWeight.w700,
            fontSize: 22,
            color: c.text1),
        titleMedium: TextStyle(
            fontFamily: uiFont,
            fontWeight: FontWeight.w600,
            fontSize: 18,
            color: c.text1),
        bodyLarge: TextStyle(
            fontFamily: uiFont,
            fontWeight: FontWeight.w500,
            fontSize: 16,
            color: c.text2),
        bodyMedium: TextStyle(
            fontFamily: uiFont,
            fontWeight: FontWeight.w400,
            fontSize: 14,
            color: c.text2),
        labelLarge: TextStyle(
            fontFamily: uiFont,
            fontWeight: FontWeight.w600,
            fontSize: 14,
            color: c.text1),
      ),
      inputDecorationTheme: InputDecorationTheme(
        filled: true,
        fillColor: _mCL,
        contentPadding:
        const EdgeInsets.symmetric(horizontal: 14, vertical: 14),
        hintStyle: TextStyle(color: _mCH),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(16),
          borderSide: BorderSide(color: _mCH),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(16),
          borderSide: BorderSide(color: _mCH),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(16),
          borderSide: BorderSide(color: c.primary, width: 2),
        ),
      ),
      cardTheme: CardThemeData(
        color: _mCL,
        elevation: 0,
        margin: EdgeInsets.zero,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(20),
        ),
      ),
      dividerColor: c.divider,
    );
  }
}
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:cloudmate/src/blocs/profile/profile_cubit.dart';
import 'package:cloudmate/src/models/demo_user.dart';

class EditProfileScreen extends StatefulWidget {
  const EditProfileScreen({super.key});

  @override
  State<EditProfileScreen> createState() => _EditProfileScreenState();
}

class _EditProfileScreenState extends State<EditProfileScreen> {
  final _formKey = GlobalKey<FormState>();
  late TextEditingController _firstName;
  late TextEditingController _lastName;
  late TextEditingController _status;

  @override
  void initState() {
    super.initState();
    final user = profileCubit.state;
    _firstName = TextEditingController(text: user.firstName);
    _lastName  = TextEditingController(text: user.lastName);
    _status    = TextEditingController(text: user.status);
  }

  @override
  void dispose() {
    _firstName.dispose();
    _lastName.dispose();
    _status.dispose();
    super.dispose();
  }

  void _save() {
    if (_formKey.currentState?.validate() ?? false) {
      context.read<ProfileCubit>().update(
        firstName: _firstName.text.trim(),
        lastName: _lastName.text.trim(),
        status: _status.text.trim(),
      );
      Navigator.of(context).pop();
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('РџСЂРѕС„РёР»СЊ РѕР±РЅРѕРІР»С‘РЅ')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return BlocProvider.value(
      value: profileCubit,
      child: Scaffold(
        appBar: AppBar(
          title: const Text('Р РµРґР°РєС‚РёСЂРѕРІР°С‚СЊ РїСЂРѕС„РёР»СЊ'),
          centerTitle: true,
          actions: [
            IconButton(onPressed: _save, icon: const Icon(Icons.check)),
          ],
        ),
        body: Padding(
          padding: const EdgeInsets.fromLTRB(16, 12, 16, 16),
          child: Form(
            key: _formKey,
            child: ListView(
              children: [
                _field(label: 'РРјСЏ', controller: _firstName, validatorMsg: 'Р’РІРµРґРёС‚Рµ РёРјСЏ'),
                _field(label: 'Р¤Р°РјРёР»РёСЏ', controller: _lastName, validatorMsg: 'Р’РІРµРґРёС‚Рµ С„Р°РјРёР»РёСЋ'),
                _field(label: 'РЎС‚Р°С‚СѓСЃ (РёРЅС‚СЂРѕ)', controller: _status, maxLines: 3),
                const SizedBox(height: 24),
                Text(
                  'РџРѕРґСЃРєР°Р·РєР°: СЌС‚Рѕ РѕС„Р»Р°Р№РЅ РґРµРјРѕ. Р”Р°РЅРЅС‹Рµ СЃРѕС…СЂР°РЅСЏСЋС‚СЃСЏ РІ РїР°РјСЏС‚Рё РґРѕ РїРµСЂРµР·Р°РїСѓСЃРєР° РїСЂРёР»РѕР¶РµРЅРёСЏ.',
                  style: Theme.of(context).textTheme.bodySmall?.copyWith(color: Colors.black54),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _field({
    required String label,
    required TextEditingController controller,
    String? validatorMsg,
    int maxLines = 1,
  }) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 16),
      child: TextFormField(
        controller: controller,
        maxLines: maxLines,
        decoration: InputDecoration(
          labelText: label,
          border: const OutlineInputBorder(),
        ),
        validator: (v) {
          if ((validatorMsg != null) && (v == null || v.trim().isEmpty)) return validatorMsg;
          return null;
        },
      ),
    );
  }
}
import 'package:flutter_bloc/flutter_bloc.dart';
import '../../models/demo_user.dart';

class ProfileCubit extends Cubit<DemoUser> {
  ProfileCubit() : super(DemoUser.demo());

  void update({
    String? firstName,
    String? lastName,
    String? university,
    String? group,
    String? status,
    String? avatarPath,
  }) {
    emit(state.copyWith(
      firstName: firstName,
      lastName: lastName,
      university: university,
      group: group,
      status: status,
      avatarPath: avatarPath,
    ));
  }
}

// СЃРёРЅРіР»С‚РѕРЅ РґР»СЏ РґРµРјРѕ
final ProfileCubit profileCubit = ProfileCubit();
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:cloudmate/src/blocs/profile/profile_cubit.dart';
import 'package:cloudmate/src/models/demo_user.dart';

class ProfileScreen extends StatelessWidget {
  const ProfileScreen({super.key});

  void _logout(BuildContext context) {
    // GoRouter
    try {
      // РµСЃР»Рё РёСЃРїРѕР»СЊР·СѓРµС‚СЃСЏ go_router
      // context.go('/login');
      Navigator.of(context).pushNamedAndRemoveUntil('/login', (r) => false);
    } catch (_) {
      Navigator.of(context).pushNamedAndRemoveUntil('/login', (r) => false);
    }
  }

  @override
  Widget build(BuildContext context) {
    return BlocProvider.value(
      value: profileCubit,
      child: Scaffold(
        appBar: AppBar(
          title: const Text('РџСЂРѕС„РёР»СЊ'),
          centerTitle: true,
          leading: IconButton(
            tooltip: 'Р РµРґР°РєС‚РёСЂРѕРІР°С‚СЊ',
            icon: const Icon(Icons.tune),
            onPressed: () {
              Navigator.of(context).pushNamed('/edit-profile');
            },
          ),
          actions: [
            IconButton(
              tooltip: 'Р’С‹Р№С‚Рё',
              icon: const Icon(Icons.logout),
              onPressed: () => _logout(context),
            ),
          ],
        ),
        body: BlocBuilder<ProfileCubit, DemoUser>(
          builder: (context, user) {
            return SingleChildScrollView(
              padding: const EdgeInsets.fromLTRB(16, 24, 16, 24),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Center(
                    child: GestureDetector(
                      onTap: () {
                        ScaffoldMessenger.of(context).showSnackBar(
                          const SnackBar(content: Text('Р”РµРјРѕ-СЂРµР¶РёРј: СЃРјРµРЅР° Р°РІР°С‚Р°СЂР° РїРѕРєР° РЅРµРґРѕСЃС‚СѓРїРЅР°')),
                        );
                      },
                      child: CircleAvatar(
                        radius: 52,
                        backgroundColor: Colors.deepPurple.shade100,
                        backgroundImage:
                        user.avatarUrl != null ? NetworkImage(user.avatarUrl!) : null,
                        child: user.avatarUrl == null
                            ? const Icon(Icons.person, size: 48)
                            : null,
                      ),
                    ),
                  ),
                  const SizedBox(height: 16),
                  Text(user.fullName,
                      style: Theme.of(context).textTheme.titleLarge),
                  const SizedBox(height: 6),
                  Text(user.email,
                      style: Theme.of(context)
                          .textTheme
                          .bodyMedium
                          ?.copyWith(color: Colors.black54)),
                  const SizedBox(height: 12),
                  Text(
                    user.status.isEmpty ? 'РЎС‚Р°С‚СѓСЃ РЅРµ СѓРєР°Р·Р°РЅ' : user.status,
                    style: Theme.of(context).textTheme.bodyLarge,
                  ),
                  const SizedBox(height: 24),

                  // РЎС‚Р°С‚РёСЃС‚РёРєР°
                  Row(
                    children: [
                      _StatCard(title: 'РЎРѕРѕР±С‰РµРЅРёСЏ', value: user.messagesCount.toString(), icon: Icons.chat_bubble_outline),
                      const SizedBox(width: 12),
                      _StatCard(title: 'Р”СЂСѓР·СЊСЏ', value: user.friendsCount.toString(), icon: Icons.group_outlined),
                    ],
                  ),

                  const SizedBox(height: 24),
                  // РџРµСЂРµС…РѕРґ Рє "Р—Р°С‡С‘С‚С‹ Рё Р­РєР·Р°РјРµРЅС‹"
                  SizedBox(
                    width: double.infinity,
                    child: ElevatedButton.icon(
                      onPressed: () => Navigator.of(context).pushNamed('/exams'),
                      icon: const Icon(Icons.school_outlined),
                      label: const Text('Р—Р°С‡С‘С‚С‹ Рё СЌРєР·Р°РјРµРЅС‹'),
                    ),
                  ),
                ],
              ),
            );
          },
        ),
        bottomNavigationBar: _DemoBottomNav(currentIndex: 4),
      ),
    );
  }
}

class _StatCard extends StatelessWidget {
  final String title;
  final String value;
  final IconData icon;
  const _StatCard({required this.title, required this.value, required this.icon});

  @override
  Widget build(BuildContext context) {
    return Expanded(
      child: Card(
        elevation: 0,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
        child: Padding(
          padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 12),
          child: Column(
            children: [
              Icon(icon),
              const SizedBox(height: 8),
              Text(value, style: Theme.of(context).textTheme.titleLarge),
              const SizedBox(height: 4),
              Text(title, style: const TextStyle(color: Colors.black54)),
            ],
          ),
        ),
      ),
    );
  }
}

// Р—Р°РіР»СѓС€РєР° РЅРёР¶РЅРµР№ РЅР°РІРёРіР°С†РёРё (С‡С‚РѕР±С‹ РІС‹РіР»СЏРґРµР»Рѕ РєР°Рє Сѓ С‚РµР±СЏ РЅР° СЃРєСЂРёРЅРµ)
class _DemoBottomNav extends StatelessWidget {
  final int currentIndex;
  const _DemoBottomNav({required this.currentIndex});
  @override
  Widget build(BuildContext context) {
    return BottomNavigationBar(
      currentIndex: currentIndex,
      type: BottomNavigationBarType.fixed,
      onTap: (_) {},
      items: const [
        BottomNavigationBarItem(icon: Icon(Icons.home_outlined), label: 'Р“Р»Р°РІРЅР°СЏ'),
        BottomNavigationBarItem(icon: Icon(Icons.info_outline), label: 'РџРѕР»РµР·РЅР°СЏ'),
        BottomNavigationBarItem(icon: Icon(Icons.menu_book_outlined), label: 'РћР±СѓС‡РµРЅРёРµ'),
        BottomNavigationBarItem(icon: Icon(Icons.event_note_outlined), label: 'Р Р°СЃРїРёСЃР°РЅРёРµ'),
        BottomNavigationBarItem(icon: Icon(Icons.person_outline), label: 'РџСЂРѕС„РёР»СЊ'),
      ],
    );
  }
}
/// РџСЂРµРІСЂР°С‰Р°РµС‚ РІРІРµРґС‘РЅРЅС‹Р№ Р»РѕРіРёРЅ РІ email РґР»СЏ Supabase Auth.
/// Р•СЃР»Рё СѓР¶Рµ РµСЃС‚СЊ '@' вЂ” РІРѕР·РІСЂР°С‰Р°РµС‚ РєР°Рє РµСЃС‚СЊ.
String toAuthEmail(String input) {
  final s = input.trim();
  if (s.contains('@')) return s;
  return '$s@app.local';
}
  static Future<void> init() async {
    if (_inited) return;
    await Supabase.initialize(
      url: const String.fromEnvironment('https://gwdanmwluhrcfxbnplwd.supabase.co'),
      anonKey: const String.fromEnvironment('eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imd3ZGFubXdsdWhyY2Z4Ym5wbHdkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTUyNjM1MTgsImV4cCI6MjA3MDgzOTUxOH0.tBZ7b_FyOxPWiqkFQf1OIh9c6hJ7Fm2eHyjsDjoBoSA'),
      debug: false,
    );
    _inited = true;
  }

  static SupabaseClient get client => Supabase.instance.client;
}

}
import 'package:supabase_flutter/supabase_flutter.dart';

class AppSession {
  static String _login = '';
  static String _groupName = '';

  static String get login => _login;
  static String get groupName => _groupName;
  static bool get isReady => _login.isNotEmpty || _groupName.isNotEmpty;

  static void setUser(String login, String groupName) {
    _login = login.trim();
    _groupName = groupName.trim();
  }

  static void clear() {
    _login = '';
    _groupName = '';
  }

  /// Р“СЂСѓР·РёС‚ РїСЂРѕС„РёР»СЊ С‡РµСЂРµР· SECURITY DEFINER RPC (Р±РµР· RLS-РіРѕР»РѕРІРЅРѕР№ Р±РѕР»Рё).
  static Future<void> loadFromServer() async {
    final sb = Supabase.instance.client;
    final sess = sb.auth.currentSession;
    if (sess == null) return;

    try {
      final res = await sb.rpc('get_my_profile');
      if (res is Map) {
        final m = Map<String, dynamic>.from(res);
        setUser((m['login'] ?? '').toString(), (m['group_name'] ?? '').toString());
      } else if (res is List && res.isNotEmpty) {
        final m = Map<String, dynamic>.from(res.first as Map);
        setUser((m['login'] ?? '').toString(), (m['group_name'] ?? '').toString());
      }
    } catch (_) {
      // РјРѕР»С‡Р°: СЃРµСЃСЃРёСЏ РµСЃС‚СЊ, РЅРѕ РїСЂРѕС„РёР»СЏ РЅРµС‚ РёР»Рё РїСЂР°РІР° вЂ” РЅРµ СЃС‡РёС‚Р°РµРј СЌС‚Рѕ С„Р°С‚Р°Р»РѕРј.
    }
  }
}
class DemoUser {
  final String firstName;
  final String lastName;

  /// Р’РЈР— Рё РєСѓСЂСЃ (СЃС‚СЂРѕРєР° СЃ РЅРѕРјРµСЂРѕРј: "1", "2" Рё С‚.Рґ.)
  final String university;
  final String group; // РёСЃРїРѕР»СЊР·СѓРµРј РєР°Рє "РєСѓСЂСЃ"

  /// РЎС‚Р°С‚СѓСЃ/РёРЅС‚СЂРѕ
  final String status;

  /// РЎС‚Р°С‚РёСЃС‚РёРєР°
  final int messagesCount;
  final int friendsCount;

  /// РђРІР°С‚Р°СЂ: Р»РѕРєР°Р»СЊРЅС‹Р№ РїСѓС‚СЊ (РґРµРјРѕ) РёР»Рё url (РЅР° Р±СѓРґСѓС‰РµРµ)
  final String? avatarPath;
  final String? avatarUrl;

  const DemoUser({
    required this.firstName,
    required this.lastName,
    required this.university,
    required this.group,
    required this.status,
    required this.messagesCount,
    required this.friendsCount,
    this.avatarPath,
    this.avatarUrl,
  });

  String get fullName =>
      [firstName, lastName].where((e) => e.trim().isNotEmpty).join(' ').trim();

  DemoUser copyWith({
    String? firstName,
    String? lastName,
    String? university,
    String? group,
    String? status,
    int? messagesCount,
    int? friendsCount,
    String? avatarPath,
    String? avatarUrl,
  }) {
    return DemoUser(
      firstName: firstName ?? this.firstName,
      lastName: lastName ?? this.lastName,
      university: university ?? this.university,
      group: group ?? this.group,
      status: status ?? this.status,
      messagesCount: messagesCount ?? this.messagesCount,
      friendsCount: friendsCount ?? this.friendsCount,
      avatarPath: avatarPath ?? this.avatarPath,
      avatarUrl: avatarUrl ?? this.avatarUrl,
    );
  }

  factory DemoUser.demo() => const DemoUser(
        firstName: 'РРІР°РЅ',
        lastName: 'РРІР°РЅРѕРІ',
        university: 'РЎРџР±Р“РђРЎРЈ',
        group: '1', // СЃС‚СѓРґРµРЅС‚ 1 РєСѓСЂСЃ
        status: 'Р“РѕС‚РѕРІР»СЋСЃСЊ Рє СЃРµСЃСЃРёРё рџ’Є',
        messagesCount: 42,
        friendsCount: 7,
        avatarPath: null,
        avatarUrl: null,
      );
}
import 'package:flutter/material.dart';
import 'package:lottie/lottie.dart';

class CalendarScreen extends StatelessWidget {
  const CalendarScreen({super.key});

  @override
  Widget build(BuildContext context) {
    // Р’СЂРµРјРµРЅРЅРѕ РїСѓСЃС‚РѕР№ СЃРїРёСЃРѕРє СЃРѕР±С‹С‚РёР№
    final List<String> events = [];

    return Scaffold(
      appBar: AppBar(
        title: const Text('РљР°Р»РµРЅРґР°СЂСЊ'),
        centerTitle: true,
      ),
      body: events.isEmpty
          ? _buildEmptyState()
          : ListView.builder(
              padding: const EdgeInsets.all(16),
              itemCount: events.length,
              itemBuilder: (context, index) {
                return Card(
                  elevation: 1,
                  child: ListTile(
                    title: Text(events[index]),
                    subtitle: const Text('Р”РµС‚Р°Р»Рё СЃРѕР±С‹С‚РёСЏ...'),
                  ),
                );
              },
            ),
    );
  }

  Widget _buildEmptyState() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Lottie.asset(
            'assets/lottie/cat_sleeping.json',
            width: 150,
            height: 150,
            repeat: true,
          ),
          const SizedBox(height: 16),
          const Text(
            'Р—РґРµСЃСЊ РїРѕРєР° РїСѓСЃС‚Рѕ',
            style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 8),
          const Text(
            'Р”РѕР±Р°РІСЊС‚Рµ СЃРѕР±С‹С‚РёСЏ РІ РєР°Р»РµРЅРґР°СЂСЊ, С‡С‚РѕР±С‹ РѕРЅРѕ РїРѕСЏРІРёР»РѕСЃСЊ Р·РґРµСЃСЊ.',
            textAlign: TextAlign.center,
            style: TextStyle(fontSize: 14, color: Colors.grey),
          ),
        ],
      ),
    );
  }
}
import 'package:flutter/material.dart';
import 'package:lottie/lottie.dart';

class ClassesScreen extends StatelessWidget {
  const ClassesScreen({super.key});

  final bool _hasClasses = false; // РґРµРјРѕ: РЅРµС‚ Р·Р°РЅСЏС‚РёР№

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Р—Р°РЅСЏС‚РёСЏ'),
        centerTitle: true,
      ),
      body: _hasClasses ? _buildClassesList() : _buildEmptyState(),
    );
  }

  Widget _buildClassesList() {
    final classes = [
      {'subject': 'РњР°С‚РµРјР°С‚РёРєР°', 'location': 'РђСѓРґ. 203', 'time': '08:30'},
      {'subject': 'РСЃС‚РѕСЂРёСЏ', 'location': 'РђСѓРґ. 105', 'time': '10:20'},
      {'subject': 'Р¤РёР·РёРєР°', 'location': 'РђСѓРґ. 307', 'time': '13:00'},
    ];

    return ListView.builder(
      padding: const EdgeInsets.all(16),
      itemCount: classes.length,
      itemBuilder: (context, index) {
        final c = classes[index];
        return Card(
          elevation: 1,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
          child: ListTile(
            leading: const Icon(Icons.book, color: Colors.blue),
            title: Text(c['subject']!),
            subtitle: Text('${c['location']} вЂў ${c['time']}'),
            trailing: const Icon(Icons.arrow_forward_ios, size: 16),
          ),
        );
      },
    );
  }

  Widget _buildEmptyState() {
    return Center(
      child: SingleChildScrollView(
        physics: const NeverScrollableScrollPhysics(),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Lottie.asset(
              'assets/lottie/cat_sleeping.json', // СЂР°Р±РѕС‡Р°СЏ РєРѕС€РєР° РёР· РєР°Р»РµРЅРґР°СЂСЏ
              width: 200,
              height: 200,
              repeat: true,
            ),
            const SizedBox(height: 16),
            const Text(
              'Р—Р°РЅСЏС‚РёР№ РїРѕРєР° РЅРµС‚',
              style: TextStyle(fontSize: 16, color: Colors.grey),
            ),
          ],
        ),
      ),
    );
  }
}
import 'package:flutter/material.dart';
import '../widgets/empty_state_widget.dart';

class HomeScreen extends StatelessWidget {
  const HomeScreen({super.key});

  @override
  Widget build(BuildContext context) {
    final List<String> news = [];

    return Scaffold(
      appBar: AppBar(
        title: const Text('Р“Р»Р°РІРЅР°СЏ'),
        centerTitle: true,
      ),
      body: news.isEmpty
          ? const SingleChildScrollView(
              physics: NeverScrollableScrollPhysics(),
              child: SizedBox(
                height: 500, // С„РёРєС‚РёРІРЅР°СЏ РІС‹СЃРѕС‚Р° РґР»СЏ С†РµРЅС‚СЂРёСЂРѕРІР°РЅРёСЏ
                child: Center(
                  child: EmptyStateWidget(
                    title: 'Р—РґРµСЃСЊ РїРѕРєР° РїСѓСЃС‚Рѕ',
                    subtitle: 'РќРѕРІРѕСЃС‚Рё РїРѕСЏРІСЏС‚СЃСЏ Р·РґРµСЃСЊ.',
                  ),
                ),
              ),
            )
          : ListView.builder(
              padding: const EdgeInsets.all(16),
              itemCount: news.length,
              itemBuilder: (context, index) {
                return ListTile(
                  title: Text(news[index]),
                );
              },
            ),
    );
  }
}
import 'package:flutter/material.dart';

class LoginScreen extends StatefulWidget {
  const LoginScreen({super.key});

  @override
  State<LoginScreen> createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  final _studentIdController = TextEditingController();
  final _passwordController = TextEditingController();

  void _loginDemo() {
    Navigator.pushReplacementNamed(context, '/home');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      body: SafeArea(
        child: SingleChildScrollView(
          padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 40),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              const SizedBox(height: 40),
              // Р›РѕРіРѕС‚РёРї
              Image.asset(
                'assets/icons/launcher_icon.png',
                height: 120,
              ),
              const SizedBox(height: 20),
              const Text(
                'Р”РѕР±СЂРѕ РїРѕР¶Р°Р»РѕРІР°С‚СЊ!',
                style: TextStyle(
                  fontSize: 24,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 30),

              // РџРѕР»Рµ СЃС‚СѓРґРµРЅС‡РµСЃРєРѕРіРѕ РЅРѕРјРµСЂР°
              TextField(
                controller: _studentIdController,
                keyboardType: TextInputType.number,
                decoration: InputDecoration(
                  labelText: 'РЎС‚СѓРґРµРЅС‡РµСЃРєРёР№ РЅРѕРјРµСЂ',
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                  prefixIcon: const Icon(Icons.badge_outlined),
                ),
              ),
              const SizedBox(height: 16),

              // РџРѕР»Рµ РїР°СЂРѕР»СЏ
              TextField(
                controller: _passwordController,
                obscureText: true,
                decoration: InputDecoration(
                  labelText: 'РџР°СЂРѕР»СЊ',
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                  prefixIcon: const Icon(Icons.lock_outline),
                ),
              ),
              const SizedBox(height: 30),

              // РљРЅРѕРїРєР° РІС…РѕРґР° (РґРµРјРѕ)
              SizedBox(
                width: double.infinity,
                child: ElevatedButton(
                  style: ElevatedButton.styleFrom(
                    padding: const EdgeInsets.symmetric(vertical: 14),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                  ),
                  onPressed: _loginDemo,
                  child: const Text(
                    'Р’РѕР№С‚Рё (РґРµРјРѕ)',
                    style: TextStyle(fontSize: 16),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
import 'package:flutter/material.dart';
import 'home_screen.dart';
import 'classes_screen.dart';
import 'teams_screen.dart'; // СѓР±РµРґРёСЃСЊ, С‡С‚Рѕ С„Р°Р№Р» Рё РєР»Р°СЃСЃ РЅР°Р·С‹РІР°СЋС‚СЃСЏ С‚Р°Рє
import 'calendar_screen.dart';
import 'profile_screen.dart';

class NavigationScreen extends StatefulWidget {
  const NavigationScreen({super.key});

  @override
  State<NavigationScreen> createState() => _NavigationScreenState();
}

class _NavigationScreenState extends State<NavigationScreen> {
  int _currentIndex = 0;

  final List<Widget> _screens = const [
    HomeScreen(),
    ClassesScreen(),
    TeamsScreen(), // РЅР°Р·РІР°РЅРёРµ РєР»Р°СЃСЃР° СЃРѕРІРїР°РґР°РµС‚ СЃ С„Р°Р№Р»РѕРј
    CalendarScreen(),
    ProfileScreen(),
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: _screens[_currentIndex],
      bottomNavigationBar: BottomNavigationBar(
        currentIndex: _currentIndex,
        type: BottomNavigationBarType.fixed,
        selectedItemColor: Colors.blue,
        unselectedItemColor: Colors.grey,
        onTap: (index) {
          setState(() {
            _currentIndex = index;
          });
        },
        items: const [
          BottomNavigationBarItem(
            icon: Icon(Icons.home_outlined),
            activeIcon: Icon(Icons.home),
            label: 'Р“Р»Р°РІРЅР°СЏ',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.book_outlined),
            activeIcon: Icon(Icons.book),
            label: 'Р—Р°РЅСЏС‚РёСЏ',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.groups_outlined),
            activeIcon: Icon(Icons.groups),
            label: 'РљРѕРјР°РЅРґС‹',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.calendar_today_outlined),
            activeIcon: Icon(Icons.calendar_today),
            label: 'РљР°Р»РµРЅРґР°СЂСЊ',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.person_outline),
            activeIcon: Icon(Icons.person),
            label: 'РџСЂРѕС„РёР»СЊ',
          ),
        ],
      ),
    );
  }
}
import 'package:flutter/material.dart';
import 'package:lottie/lottie.dart';

class ProfileScreen extends StatefulWidget {
  const ProfileScreen({super.key});

  @override
  State<ProfileScreen> createState() => _ProfileScreenState();
}

class _ProfileScreenState extends State<ProfileScreen> {
  bool _hasProfile = false; // РґРµРјРѕ: РїСЂРѕС„РёР»СЊ РЅРµ Р·Р°РїРѕР»РЅРµРЅ

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('РџСЂРѕС„РёР»СЊ'),
        centerTitle: true,
      ),
      body: _hasProfile ? _buildProfileView() : _buildEmptyState(),
    );
  }

  Widget _buildProfileView() {
    return ListView(
      padding: const EdgeInsets.all(16),
      children: [
        const CircleAvatar(
          radius: 50,
          backgroundImage: AssetImage('assets/images/avatar_placeholder.png'),
        ),
        const SizedBox(height: 16),
        const Text(
          'РРІР°РЅ РРІР°РЅРѕРІ',
          style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
          textAlign: TextAlign.center,
        ),
        const SizedBox(height: 8),
        const Text(
          'Р“СЂСѓРїРїР°: РРЎ-21',
          style: TextStyle(color: Colors.grey),
          textAlign: TextAlign.center,
        ),
        const SizedBox(height: 24),
        ElevatedButton.icon(
          onPressed: () {
            setState(() {
              _hasProfile = false; // Р·РґРµСЃСЊ РјРѕР¶РЅРѕ РјРµРЅСЏС‚СЊ РЅР° true РїСЂРё Р·Р°РіСЂСѓР·РєРµ РґР°РЅРЅС‹С…
            });
          },
          icon: const Icon(Icons.edit),
          label: const Text('Р РµРґР°РєС‚РёСЂРѕРІР°С‚СЊ РїСЂРѕС„РёР»СЊ'),
          style: ElevatedButton.styleFrom(
            minimumSize: const Size.fromHeight(48),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(12),
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildEmptyState() {
    return Center(
      child: SingleChildScrollView(
        physics: const NeverScrollableScrollPhysics(),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Lottie.asset(
              'assets/lottie/cat_sleeping.json', // РєРѕС€РєР°
              width: 200,
              height: 200,
              repeat: true,
            ),
            const SizedBox(height: 16),
            const Text(
              'РџСЂРѕС„РёР»СЊ РїРѕРєР° РЅРµ Р·Р°РїРѕР»РЅРµРЅ',
              style: TextStyle(fontSize: 16, color: Colors.grey),
            ),
          ],
        ),
      ),
    );
  }
}
import 'package:flutter/material.dart';
import 'login_screen.dart';

class RegisterPage extends StatefulWidget {
  const RegisterPage({super.key});

  @override
  State<RegisterPage> createState() => _RegisterPageState();
}

class _RegisterPageState extends State<RegisterPage> {
  final _emailCtrl = TextEditingController();
  final _passCtrl = TextEditingController();

  void _register() {
    Navigator.pushReplacement(
      context,
      MaterialPageRoute(builder: (_) => const LoginPage()),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Padding(
        padding: const EdgeInsets.all(24),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Icon(Icons.person_add, size: 80, color: Colors.blue),
            const SizedBox(height: 20),
            TextField(
              controller: _emailCtrl,
              decoration: const InputDecoration(
                labelText: 'Email / РЎС‚СѓРґРµРЅС‡РµСЃРєРёР№ РЅРѕРјРµСЂ',
                border: OutlineInputBorder(),
              ),
            ),
            const SizedBox(height: 16),
            TextField(
              controller: _passCtrl,
              obscureText: true,
              decoration: const InputDecoration(
                labelText: 'РџР°СЂРѕР»СЊ',
                border: OutlineInputBorder(),
              ),
            ),
            const SizedBox(height: 24),
            ElevatedButton(
              onPressed: _register,
              style: ElevatedButton.styleFrom(
                minimumSize: const Size.fromHeight(50),
              ),
              child: const Text('Р—Р°СЂРµРіРёСЃС‚СЂРёСЂРѕРІР°С‚СЊСЃСЏ'),
            ),
            const SizedBox(height: 12),
            TextButton(
              onPressed: () {
                Navigator.pushReplacement(
                  context,
                  MaterialPageRoute(builder: (_) => const LoginPage()),
                );
              },
              child: const Text('РЈР¶Рµ РµСЃС‚СЊ Р°РєРєР°СѓРЅС‚? Р’РѕР№С‚Рё'),
            ),
          ],
        ),
      ),
    );
  }
}
import 'package:flutter/material.dart';
import 'dart:async';

class SplashScreen extends StatefulWidget {
  const SplashScreen({super.key});

  @override
  State<SplashScreen> createState() => _SplashScreenState();
}

class _SplashScreenState extends State<SplashScreen> {
  Timer? _timer;

  @override
  void initState() {
    super.initState();

    _timer = Timer(const Duration(seconds: 2), () {
      if (mounted) {
        Navigator.pushReplacementNamed(context, '/login');
      }
    });
  }

  @override
  void dispose() {
    _timer?.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Image.asset(
              'assets/icons/launcher_icon.png',
              width: 120,
              height: 120,
            ),
            const SizedBox(height: 20),
            const Text(
              'Student Platform',
              style: TextStyle(
                fontSize: 22,
                fontWeight: FontWeight.bold,
              ),
            ),
          ],
        ),
      ),
    );
  }
}
import 'package:flutter/material.dart';
import 'package:lottie/lottie.dart';

class TeamsScreen extends StatelessWidget {
  const TeamsScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("РљРѕРјР°РЅРґС‹"),
        centerTitle: true,
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Lottie.asset(
              'assets/lottie/cat_sleeping.json', // Р·Р°РјРµРЅРёР» РЅР° СЂР°Р±РѕС‡СѓСЋ РєРѕС€РєСѓ РёР· РєР°Р»РµРЅРґР°СЂСЏ
              width: 180,
              height: 180,
              repeat: true,
            ),
            const SizedBox(height: 16),
            const Text(
              "Р—РґРµСЃСЊ Р±СѓРґСѓС‚ РІР°С€Рё РєРѕРјР°РЅРґС‹",
              style: TextStyle(fontSize: 16, color: Colors.grey),
            ),
          ],
        ),
      ),
    );
  }
}
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

import 'package:student_platform/src/config/auth_email_adapter.dart';
import 'package:student_platform/src/core/session.dart';

class AuthService {
  static final _sb = Supabase.instance.client;

  /// Р’С…РѕРґ РїРѕ Р»РѕРіРёРЅСѓ (РёР»Рё email) + РїР°СЂРѕР»СЊ.
  /// РќРРљРђРљРРҐ Р·Р°РїСЂРѕСЃРѕРІ Рє С‚Р°Р±Р»РёС†Р°Рј Р·РґРµСЃСЊ РЅРµ РґРµР»Р°РµРј.
  static Future<void> signInWithLoginOrEmail(
    BuildContext context, {
    required String loginOrEmail,
    required String password,
  }) async {
    final email = toAuthEmail(loginOrEmail);
    await _sb.auth.signInWithPassword(email: email, password: password);

    // РЎРµСЃСЃРёСЏ СѓР¶Рµ РµСЃС‚СЊ -> РїРѕРґС…РІР°С‚С‹РІР°РµРј РїСЂРѕС„РёР»СЊ РѕС‚РґРµР»СЊРЅС‹Рј РІС‹Р·РѕРІРѕРј RPC
    await AppSession.loadFromServer(); // РЅРµ РїР°РґР°РµС‚, РµСЃР»Рё РїСЂРѕС„РёР»СЏ РЅРµС‚

    if (context.mounted) context.go('/home');
  }

  static Future<void> signOut(BuildContext context) async {
    await _sb.auth.signOut();
    AppSession.clear();
    if (context.mounted) context.go('/login');
  }
}
import 'package:flutter/material.dart';

var colorBlack = const Color(0xFF121212);
var colorPrimaryBlack = const Color(0xFF14171A);
var colorDarkGrey = const Color(0xFF657786);
var colorPrimary = const Color(0xFF1DA1F2);
var colorTitle = const Color(0xFF2C3D50);

var colorHigh = Colors.redAccent;
var colorMedium = Colors.amber;
var colorLow = colorPrimary;
var colorCompleted = Colors.green;
var colorFailed = colorDarkGrey;
var colorActive = const Color(0xFF00D72F);
var colorGreenLight = const Color(0xFF009E60);
var colorAttendance = const Color(0xFF0CCF4C);

Color mC = Colors.grey.shade100;
Color mCL = Colors.white;
Color mCM = Colors.grey.shade200;
Color mCH = Colors.grey.shade400;
Color mCD = Colors.black.withOpacity(0.075);

class AppColors {
  final Color primary;
  final Color background;
  final Color accent;
  final Color disabled;
  final Color error;
  final Color divider;
  final Color header;
  final Color button;
  final Color contentText1;
  final Color contentText2;

  const AppColors({
    required this.header,
    required this.primary,
    required this.background,
    required this.accent,
    required this.disabled,
    required this.error,
    required this.divider,
    required this.button,
    required this.contentText1,
    required this.contentText2,
  });

  factory AppColors.light() {
    return AppColors(
      header: colorBlack,
      primary: colorPrimary,
      background: mC,
      accent: const Color(0xFF17c063),
      disabled: Colors.black12,
      error: const Color(0xFFFF7466),
      divider: Colors.black26,
      button: colorDarkGrey,
      contentText1: colorBlack,
      contentText2: colorPrimaryBlack,
    );
  }

  factory AppColors.dark() {
    return AppColors(
      header: Colors.white,
      primary: colorPrimary,
      background: colorPrimaryBlack,
      accent: const Color(0xFF17c063),
      disabled: Colors.white12,
      error: const Color(0xFFFF5544),
      divider: Colors.white24,
      button: Colors.white,
      contentText1: mCL,
      contentText2: mCL,
    );
  }
}
import 'package:flutter/material.dart';
import 'app_colors.dart';

class AppDecoration {
  final BoxDecoration decoration;
  AppDecoration({required this.decoration});

  factory AppDecoration.containerOnlyShadowTop(BuildContext context) {
    if (Theme.of(context).brightness == Brightness.dark) {
      return AppDecoration(
        decoration: BoxDecoration(
          color: colorPrimaryBlack,
          boxShadow: [
            BoxShadow(
              color: colorBlack.withOpacity(.65),
              offset: const Offset(-2, -2),
              blurRadius: 10,
            ),
          ],
        ),
      );
    } else {
      return AppDecoration(
        decoration: BoxDecoration(
          color: mC,
          boxShadow: [
            BoxShadow(
              color: mCL,
              offset: const Offset(-2, -2),
              blurRadius: 10,
            ),
          ],
        ),
      );
    }
  }
}
class FontFamily {
  FontFamily._();

  static const String lato = 'Lato';
  static const String allison = 'Allison';
  static const String dancing = 'DancingScript';
}
import 'package:flutter/material.dart';
import 'app_colors.dart';

class AppTheme {
  AppTheme({
    required this.mode,
    required this.data,
    required this.appColors,
  });

  factory AppTheme.light() {
    final mode = ThemeMode.light;
    final appColors = AppColors.light();
    final themeData = ThemeData.light().copyWith(
      primaryColor: appColors.primary,
      scaffoldBackgroundColor: appColors.background,
      bottomNavigationBarTheme: BottomNavigationBarThemeData(
        backgroundColor: appColors.background,
        selectedItemColor: colorPrimary,
      ),
      appBarTheme: AppBarTheme(
        backgroundColor: appColors.background,
        iconTheme: IconThemeData(color: appColors.contentText1),
      ),
      textTheme: TextTheme(
        displayLarge: TextStyle(color: appColors.header),
        bodyLarge: TextStyle(color: appColors.contentText1),
        bodyMedium: TextStyle(color: appColors.contentText2),
      ),
      dividerColor: appColors.divider,
    );
    return AppTheme(mode: mode, data: themeData, appColors: appColors);
  }

  factory AppTheme.dark() {
    final mode = ThemeMode.dark;
    final appColors = AppColors.dark();
    final themeData = ThemeData.dark().copyWith(
      primaryColor: appColors.primary,
      scaffoldBackgroundColor: appColors.background,
      bottomNavigationBarTheme: BottomNavigationBarThemeData(
        backgroundColor: appColors.background,
        selectedItemColor: colorPrimary,
      ),
      appBarTheme: AppBarTheme(
        backgroundColor: appColors.background,
        iconTheme: IconThemeData(color: appColors.contentText1),
      ),
      textTheme: TextTheme(
        displayLarge: TextStyle(color: appColors.header),
        bodyLarge: TextStyle(color: appColors.contentText1),
        bodyMedium: TextStyle(color: appColors.contentText2),
      ),
      dividerColor: appColors.divider,
    );
    return AppTheme(mode: mode, data: themeData, appColors: appColors);
  }

  final ThemeMode mode;
  final ThemeData data;
  final AppColors appColors;
}
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:get_storage/get_storage.dart';

enum ThemeOptions { light, dark }

class ThemeService extends ChangeNotifier {
  static ThemeOptions themeOptions = ThemeOptions.light;
  static ThemeMode currentTheme = ThemeMode.light;

  static final systemBrightness = const SystemUiOverlayStyle(
    statusBarColor: Colors.transparent,
  );

  final _getStorage = GetStorage();
  final storageKey = 'isDarkMode';

  switchStatusColor() {
    SystemChrome.setSystemUIOverlayStyle(SystemUiOverlayStyle(
      statusBarColor: Colors.transparent,
      statusBarBrightness: Platform.isIOS
          ? (isSavedDarkMode() ? Brightness.dark : Brightness.light)
          : (isSavedDarkMode() ? Brightness.light : Brightness.dark),
      statusBarIconBrightness: Platform.isIOS
          ? (isSavedDarkMode() ? Brightness.dark : Brightness.light)
          : (isSavedDarkMode() ? Brightness.light : Brightness.dark),
    ));
  }

  ThemeMode getThemeMode() {
    switchStatusColor();
    return isSavedDarkMode() ? ThemeMode.dark : ThemeMode.light;
  }

  bool isSavedDarkMode() {
    return _getStorage.read(storageKey) ?? false;
  }

  void saveThemeMode(bool isDarkMode) async {
    _getStorage.write(storageKey, isDarkMode);
  }

  void changeThemeMode() {
    saveThemeMode(!isSavedDarkMode());
    switchStatusColor();
    notifyListeners();
  }
}

ThemeService themeService = ThemeService();
import 'package:flutter/material.dart';
import 'screens/login_screen.dart';
import 'screens/register_screen.dart';

/// РћР±С‘СЂС‚РєР°, РєРѕС‚РѕСЂР°СЏ РўРћР›Р¬РљРћ РїРµСЂРµРєР»СЋС‡Р°РµС‚ СЌРєСЂР°РЅС‹ Р»РѕРіРёРЅР°/СЂРµРіРёСЃС‚СЂР°С†РёРё.
/// РќРёРєР°РєРёС… Р·Р°РїСЂРѕСЃРѕРІ Рє Р‘Р” Р·РґРµСЃСЊ РЅРµС‚ вЂ” РІРµСЃСЊ РєСЂР°СЃРёРІС‹Р№ UI РІ LoginScreen РєР°Рє Сѓ С‚РµР±СЏ.
class AuthenticateScreen extends StatefulWidget {
  const AuthenticateScreen({super.key});

  @override
  State<AuthenticateScreen> createState() => _AuthenticateScreenState();
}

class _AuthenticateScreenState extends State<AuthenticateScreen> {
  bool _showLogin = true;

  void _toggle() {
    setState(() => _showLogin = !_showLogin);
  }

  @override
  Widget build(BuildContext context) {
    return AnimatedSwitcher(
      duration: const Duration(milliseconds: 200),
      child: _showLogin
          ? LoginScreen(key: const ValueKey('login'), toggleView: _toggle)
          : RegisterScreen(key: const ValueKey('register'), toggleView: _toggle),
    );
  }
}
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:lottie/lottie.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:go_router/go_router.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

class LoginScreen extends StatefulWidget {
  const LoginScreen({super.key, required this.toggleView});
  final VoidCallback toggleView;

  @override
  State<LoginScreen> createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  final _formKey = GlobalKey<FormState>();
  final _loginCtrl = TextEditingController();
  final _passCtrl = TextEditingController();
  bool _hidePassword = true;
  bool _loading = false;

  final _sb = Supabase.instance.client;

  static const _authDomain = 'app.local';
  String _loginToEmail(String input) {
    final v = input.trim().toLowerCase();
    if (v.contains('@')) return v;
    return '$v@$_authDomain';
  }

  Future<void> _doLogin() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() => _loading = true);
    final login = _loginCtrl.text.trim();
    final pass = _passCtrl.text;

    try {
      // 1) Auth login (email = "<login>@app.local")
      final email = _loginToEmail(login);
      await _sb.auth.signInWithPassword(email: email, password: pass);

      // 2) РџСЂРѕС„РёР»СЊ. РЎРЅР°С‡Р°Р»Р° RPC (СѓСЃС‚РѕР№С‡РёРІРѕ Рє СЂР°СЃСЃРёРЅС…СЂРѕРЅСѓ id/login),
      //    РµСЃР»Рё РЅРµ РІРµСЂРЅСѓР» вЂ” РїСЂСЏРјРѕР№ select РїРѕ id.
      Map<String, dynamic>? data;

      try {
        final rows = await _sb.rpc('get_my_profile') as List?;
        if (rows != null && rows.isNotEmpty) {
          data = Map<String, dynamic>.from(rows.first as Map);
        }
      } catch (_) {
        // СѓРїР°РґС‘Рј РІ РїР»Р°РЅ Р‘ РЅРёР¶Рµ
      }

      if (data == null) {
        final uid = _sb.auth.currentUser?.id;
        if (uid == null) throw 'РќРµ СѓРґР°Р»РѕСЃСЊ РїРѕР»СѓС‡РёС‚СЊ СЃРµСЃСЃРёСЋ';
        final row = await _sb
            .from('users')
            .select('id, login, name, surname, university, group_name, avatar_url, status, role')
            .eq('id', uid)
            .maybeSingle();

        if (row == null) throw 'РџСЂРѕС„РёР»СЊ РЅРµ РЅР°Р№РґРµРЅ';
        data = Map<String, dynamic>.from(row as Map);
      }

      // 3) РЎРѕС…СЂР°РЅСЏРµРј Р»РѕРєР°Р»СЊРЅРѕ Рё РёРґС‘Рј РЅР° /home
      final prefs = await SharedPreferences.getInstance();
      await prefs.setBool('loggedIn', true);
      await prefs.setString('user', jsonEncode(data));

      if (!mounted) return;
      try {
        context.go('/home');
      } catch (_) {
        Navigator.of(context).pushReplacementNamed('/home');
      }
    } on AuthException catch (e) {
      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text(e.message)));
    } catch (e) {
      if (!mounted) return;
      // РџРѕРєР°Р·С‹РІР°РµРј РёСЃС…РѕРґРЅСѓСЋ РѕС€РёР±РєСѓ, С‡С‚РѕР±С‹ Р»РѕРІРёС‚СЊ СЃРµСЂРІРµСЂРЅС‹Рµ РїСЂРѕР±Р»РµРјС‹
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('$e')));
    } finally {
      if (mounted) setState(() => _loading = false);
    }
  }

  @override
  void dispose() {
    _loginCtrl.dispose();
    _passCtrl.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);

    return Scaffold(
      resizeToAvoidBottomInset: false,
      appBar: AppBar(
        title: const Text('Р’С…РѕРґ'),
        centerTitle: true,
      ),
      body: SafeArea(
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              const SizedBox(height: 8),
              SizedBox(
                height: 200,
                child: Lottie.asset('assets/lottie/cat_sleeping.json'),
              ),
              Padding(
                padding: const EdgeInsets.symmetric(horizontal: 16),
                child: Container(
                  decoration: BoxDecoration(
                    color: theme.cardColor,
                    borderRadius: BorderRadius.circular(12),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.black.withOpacity(0.05),
                        blurRadius: 10,
                      ),
                    ],
                  ),
                  child: Column(
                    children: [
                      const SizedBox(height: 8),
                      _buildField(
                        label: 'Р›РѕРіРёРЅ (в„– Р·Р°С‡С‘С‚РєРё) РёР»Рё email',
                        controller: _loginCtrl,
                        keyboardType: TextInputType.text,
                        validator: (v) => (v == null || v.trim().isEmpty) ? 'Р’РІРµРґРёС‚Рµ Р»РѕРіРёРЅ' : null,
                      ),
                      const Divider(height: 1),
                      _buildField(
                        label: 'РџР°СЂРѕР»СЊ',
                        controller: _passCtrl,
                        obscure: _hidePassword,
                        validator: (v) => (v == null || v.trim().length < 4) ? 'РњРёРЅРёРјСѓРј 4 СЃРёРјРІРѕР»Р°' : null,
                        suffix: IconButton(
                          onPressed: () => setState(() => _hidePassword = !_hidePassword),
                          icon: Icon(_hidePassword ? Icons.visibility_off : Icons.visibility),
                        ),
                      ),
                      const SizedBox(height: 8),
                    ],
                  ),
                ),
              ),
              const SizedBox(height: 12),
              TextButton(
                onPressed: widget.toggleView,
                child: const Text('РќРµС‚ Р°РєРєР°СѓРЅС‚Р°? Р—Р°СЂРµРіРёСЃС‚СЂРёСЂРѕРІР°С‚СЊСЃСЏ'),
              ),
              const SizedBox(height: 6),
              Padding(
                padding: const EdgeInsets.symmetric(horizontal: 16),
                child: SizedBox(
                  width: double.infinity,
                  height: 48,
                  child: FilledButton(
                    onPressed: _loading ? null : _doLogin,
                    child: _loading
                        ? const SizedBox(width: 20, height: 20, child: CircularProgressIndicator(strokeWidth: 2))
                        : const Text('Р’РѕР№С‚Рё'),
                  ),
                ),
              ),
              const Spacer(),
              Padding(
                padding: const EdgeInsets.only(bottom: 12),
                child: Text('В© ${DateTime.now().year} Student Platform', style: theme.textTheme.bodySmall),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildField({
    required String label,
    required TextEditingController controller,
    String? Function(String?)? validator,
    TextInputType? keyboardType,
    bool obscure = false,
    Widget? suffix,
  }) {
    return Padding(
      padding: const EdgeInsets.fromLTRB(16, 12, 8, 12),
      child: TextFormField(
        controller: controller,
        validator: validator,
        keyboardType: keyboardType,
        obscureText: obscure,
        decoration: InputDecoration(
          labelText: label,
          border: InputBorder.none,
          suffixIcon: suffix,
        ),
      ),
    );
  }
}
// lib/src/ui/authentication/screens/register_screen.dart
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

class RegisterScreen extends StatefulWidget {
  const RegisterScreen({super.key, required this.toggleView});
  final VoidCallback toggleView;

  @override
  State<RegisterScreen> createState() => _RegisterScreenState();
}

class _RegisterScreenState extends State<RegisterScreen> {
  final _formKey = GlobalKey<FormState>();
  final _loginCtrl = TextEditingController();
  final _passCtrl  = TextEditingController();
  final _nameCtrl  = TextEditingController();
  final _surnameCtrl = TextEditingController();
  final _univCtrl  = TextEditingController(text: 'РЎРџР±Р“РђРЎРЈ');
  final _groupCtrl = TextEditingController(text: '1-РЎРј(Р’Р’)-2');

  bool _loading = false;
  String? _error;

  @override
  void dispose() {
    _loginCtrl.dispose();
    _passCtrl.dispose();
    _nameCtrl.dispose();
    _surnameCtrl.dispose();
    _univCtrl.dispose();
    _groupCtrl.dispose();
    super.dispose();
  }

  String _toEmail(String login) =>
      login.contains('@') ? login.trim().toLowerCase() : '${login.trim().toLowerCase()}@app.local';

  Future<void> _register() async {
    if (!_formKey.currentState!.validate()) return;
    setState(() { _loading = true; _error = null; });

    final sb = Supabase.instance.client;
    final login = _loginCtrl.text.trim();
    final pass  = _passCtrl.text;

    try {
      // 1) СЃРѕР·РґР°С‘Рј С‡РµСЂРµР· RPC (auth + profile + team/chat)
      await sb.rpc('register_local_user', params: {
        'p_login'     : login,
        'p_password'  : pass,
        'p_name'      : _nameCtrl.text.trim(),
        'p_surname'   : _surnameCtrl.text.trim(),
        'p_university': _univCtrl.text.trim(),
        'p_group'     : _groupCtrl.text.trim(),
      });

      // 2) Рё СЃСЂР°Р·Сѓ Р»РѕРіРёРЅРёРјСЃСЏ
      await sb.auth.signInWithPassword(email: _toEmail(login), password: pass);

      if (!mounted) return;
      context.go('/home');
    } on AuthException catch (e) {
      setState(() => _error = e.message);
    } catch (e) {
      setState(() => _error = '$e');
    } finally {
      if (mounted) setState(() => _loading = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);

    Widget field(String label, TextEditingController c,
        {bool obscure=false, TextInputType? type, String? Function(String?)? validator}) {
      return Padding(
        padding: const EdgeInsets.fromLTRB(16, 10, 16, 10),
        child: TextFormField(
          controller: c,
          obscureText: obscure,
          keyboardType: type,
          validator: validator,
          decoration: InputDecoration(labelText: label, filled: true),
        ),
      );
    }

    return Scaffold(
      appBar: AppBar(title: const Text('Р РµРіРёСЃС‚СЂР°С†РёСЏ'), centerTitle: true),
      body: Form(
        key: _formKey,
        child: ListView(
          padding: const EdgeInsets.only(top: 8),
          children: [
            field('Р›РѕРіРёРЅ (в„– Р·Р°С‡С‘С‚РєРё)', _loginCtrl,
              type: TextInputType.text,
              validator: (v) => (v==null||v.trim().isEmpty) ? 'Р’РІРµРґРёС‚Рµ Р»РѕРіРёРЅ' : null),
            field('РџР°СЂРѕР»СЊ', _passCtrl, obscure: true,
              validator: (v) => (v==null||v.trim().length<3) ? 'РњРёРЅРёРјСѓРј 3 СЃРёРјРІРѕР»Р°' : null),

            const Divider(),
            field('РРјСЏ', _nameCtrl),
            field('Р¤Р°РјРёР»РёСЏ', _surnameCtrl),
            field('РЈРЅРёРІРµСЂСЃРёС‚РµС‚', _univCtrl),
            field('Р“СЂСѓРїРїР°', _groupCtrl),

            if (_error != null)
              Padding(
                padding: const EdgeInsets.symmetric(horizontal: 16),
                child: Text(_error!, style: TextStyle(color: theme.colorScheme.error)),
              ),
            const SizedBox(height: 8),
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 16),
              child: FilledButton(
                onPressed: _loading ? null : _register,
                child: _loading
                    ? const SizedBox(height: 20, width: 20, child: CircularProgressIndicator(strokeWidth: 2))
                    : const Text('РЎРѕР·РґР°С‚СЊ Р°РєРєР°СѓРЅС‚'),
              ),
            ),
            const SizedBox(height: 12),
            TextButton(
              onPressed: widget.toggleView,
              child: const Text('РЈ РјРµРЅСЏ СѓР¶Рµ РµСЃС‚СЊ Р°РєРєР°СѓРЅС‚'),
            ),
          ],
        ),
      ),
    );
  }
}
import 'package:flutter/material.dart';

class ExamsScreen extends StatelessWidget {
  const ExamsScreen({super.key});

  @override
  Widget build(BuildContext context) {
    // СЃСЋРґР° РїРѕС‚РѕРј РїСЂРёРєСЂСѓС‚РёРј СЂРµР°Р»СЊРЅС‹Рµ РґР°РЅРЅС‹Рµ/С‚Р°Р±Р»РёС†Сѓ
    return Scaffold(
      appBar: AppBar(title: const Text('Р—Р°С‡С‘С‚С‹ Рё СЌРєР·Р°РјРµРЅС‹')),
      body: const Center(
        child: Text('РўСѓС‚ Р±СѓРґРµС‚ СЃРїРёСЃРѕРє Р·Р°С‡С‘С‚РѕРІ Рё СЌРєР·Р°РјРµРЅРѕРІ (РґРµРјРѕ)'),
      ),
    );
  }
}
import 'package:flutter/material.dart';

class HomeScreen extends StatelessWidget {
  const HomeScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Р“Р»Р°РІРЅР°СЏ')),
      body: const Center(
        child: Text(
          'Р”РѕР±СЂРѕ РїРѕР¶Р°Р»РѕРІР°С‚СЊ!',
          style: TextStyle(fontSize: 20),
        ),
      ),
    );
  }
}
import 'package:flutter/material.dart';
import 'package:lottie/lottie.dart';

class InfoScreen extends StatelessWidget {
  const InfoScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('РџРѕР»РµР·РЅР°СЏ РёРЅС„РѕСЂРјР°С†РёСЏ')),
      body: Center(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Lottie.asset(
              'assets/lottie/cat_sleeping.json',
              width: 180,
              height: 180,
              repeat: true,
            ),
            const SizedBox(height: 12),
            const Text(
              'Р—РґРµСЃСЊ РїРѕРєР° РїСѓСЃС‚Рѕ',
              style: TextStyle(fontSize: 14, color: Colors.grey),
              textAlign: TextAlign.center,
            ),
          ],
        ),
      ),
    );
  }
}
import 'package:flutter/material.dart';
import 'package:flutter/services.dart' as services;
import 'package:flutter_bloc/flutter_bloc.dart';

import 'state/team_cubit.dart';
import 'models/assignment.dart';

class AssignmentDetailsScreen extends StatelessWidget {
  final String assignmentId;
  const AssignmentDetailsScreen({super.key, required this.assignmentId});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFFF6F7FB),
      appBar: AppBar(
        title: const Text('Р—Р°РґР°РЅРёРµ'),
        centerTitle: true,
        actions: [
          IconButton(
            icon: const Icon(Icons.more_vert),
            onPressed: () => _showMore(context),
            tooltip: 'Р•С‰С‘',
          ),
        ],
      ),

      body: BlocBuilder<TeamCubit, TeamState>(
        builder: (context, state) {
          final st = state;
          final a = _pickAssignment(st, assignmentId);

          final isDraft = st.pending?.id == a.id;
          final isDone = context.read<TeamCubit>().isAssignmentDone(a.id);

          final link = _findLink(a);                 // СЃСЃС‹Р»РєР° РёР· РјРѕРґРµР»Рё/РІР»РѕР¶РµРЅРёР№/РѕРїРёСЃР°РЅРёСЏ
          final files = _extractAttachments(a);      // СѓРЅРёРІРµСЂСЃР°Р»СЊРЅС‹Р№ РїР°СЂСЃРµСЂ РІР»РѕР¶РµРЅРёР№

          return SingleChildScrollView(
            padding: const EdgeInsets.fromLTRB(16, 12, 16, 120),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                _AssignmentHeaderCard(
                  assignment: a,
                  isDraft: isDraft,
                  isDone: isDone,
                ),
                const SizedBox(height: 16),

                if (link != null) ...[
                  _SectionCard(
                    title: 'РЎСЃС‹Р»РєР°',
                    child: ListTile(
                      contentPadding: EdgeInsets.zero,
                      leading: const Icon(Icons.link),
                      title: Text(
                        link,
                        style: const TextStyle(
                          decoration: TextDecoration.underline,
                          color: Color(0xFF1D4ED8),
                        ),
                      ),
                      subtitle: const Text('РќР°Р¶РјРё, С‡С‚РѕР±С‹ СЃРєРѕРїРёСЂРѕРІР°С‚СЊ'),
                      onTap: () async {
                        await services.Clipboard.setData(
                          services.ClipboardData(text: link),
                        );
                        ScaffoldMessenger.of(context).showSnackBar(
                          const SnackBar(content: Text('РЎСЃС‹Р»РєР° СЃРєРѕРїРёСЂРѕРІР°РЅР°')),
                        );
                      },
                    ),
                  ),
                  const SizedBox(height: 12),
                ],

                _SectionCard(
                  title: 'РћРїРёСЃР°РЅРёРµ',
                  child: Text(
                    (a.description.trim().isEmpty) ? 'РћРїРёСЃР°РЅРёСЏ РЅРµС‚.' : a.description,
                    style: const TextStyle(
                      fontSize: 16,
                      height: 1.42,
                      color: Color(0xFF111827),
                    ),
                  ),
                ),

                if (files.isNotEmpty) ...[
                  const SizedBox(height: 12),
                  _SectionCard(
                    title: 'Р’Р»РѕР¶РµРЅРёСЏ',
                    child: Column(
                      children: files
                          .map((f) => _AttachmentTile(
                                name: f['name'] ?? '',
                                path: f['path'] ?? '',
                              ))
                          .toList(),
                    ),
                  ),
                ],
              ],
            ),
          );
        },
      ),

      bottomNavigationBar: BlocBuilder<TeamCubit, TeamState>(
        builder: (context, state) {
          final st = state;
          final a = _pickAssignment(st, assignmentId);

          final isDraft = st.pending?.id == a.id;
          final isDone = context.read<TeamCubit>().isAssignmentDone(a.id);

          return SafeArea(
            top: false,
            child: Padding(
              padding: const EdgeInsets.fromLTRB(16, 10, 16, 16),
              child: Row(
                children: [
                  if (isDraft && st.isStarosta)
                    Expanded(
                      child: _BigButton.icon(
                        icon: Icons.publish_outlined,
                        label: 'РћРїСѓР±Р»РёРєРѕРІР°С‚СЊ',
                        onPressed: () {
                          context.read<TeamCubit>().publishPendingManually();
                          ScaffoldMessenger.of(context).showSnackBar(
                            const SnackBar(content: Text('Р—Р°РґР°РЅРёРµ РѕРїСѓР±Р»РёРєРѕРІР°РЅРѕ')),
                          );
                          Navigator.of(context).pop();
                        },
                      ),
                    ),
                  if (isDraft && !st.isStarosta)
                    Expanded(
                      child: _BigButton.tonalIcon(
                        icon: Icons.how_to_vote_outlined,
                        label: 'Р“РѕР»РѕСЃРѕРІР°С‚СЊ В«Р·Р°В»',
                        onPressed: () => context.read<TeamCubit>().voteForPending(),
                      ),
                    ),
                  if (!isDraft)
                    Expanded(
                      child: _BigButton.icon(
                        icon: isDone ? Icons.check_box : Icons.check_box_outline_blank,
                        label: isDone ? 'Р’С‹РїРѕР»РЅРµРЅРѕ' : 'РћС‚РјРµС‚РёС‚СЊ РєР°Рє РІС‹РїРѕР»РЅРµРЅРѕ',
                        bgColor: isDone ? const Color(0xFF16A34A) : null,
                        onPressed: () {
                          // С‚РѕС‚ Р¶Рµ РјРµС‚РѕРґ, С‡С‚Рѕ Рё РІ СЃРїРёСЃРєРµ вЂ” СЃРѕСЃС‚РѕСЏРЅРёСЏ СЃРёРЅС…СЂРѕРЅРёР·РёСЂСѓСЋС‚СЃСЏ РјРіРЅРѕРІРµРЅРЅРѕ
                          context.read<TeamCubit>().toggleCompleted(a.id);
                          Navigator.of(context).pop(); // РЅР°Р·Р°Рґ Рє СЃРїРёСЃРєСѓ
                        },
                      ),
                    ),
                ],
              ),
            ),
          );
        },
      ),
    );
  }

  Assignment _pickAssignment(TeamState st, String id) {
    return (st.assignments).firstWhere(
      (x) => x.id == id,
      orElse: () => st.published.isNotEmpty ? st.published.last : st.assignments.first,
    );
  }

  // --- РЈРЅРёРІРµСЂСЃР°Р»СЊРЅС‹Р№ РїРѕРёСЃРє СЃСЃС‹Р»РєРё ---
  String? _findLink(Assignment a) {
    // 1) РџСЂСЏРјРѕ РёР· РјРѕРґРµР»Рё: link/url/href (С‡РµСЂРµР· dynamic, С‡С‚РѕР±С‹ РЅРµ РїР°РґР°С‚СЊ, РµСЃР»Рё РїРѕР»СЏ РЅРµС‚)
    try {
      final dyn = a as dynamic;
      final fromModel = dyn.link ?? dyn.url ?? dyn.href;
      if (fromModel is String && fromModel.trim().isNotEmpty) return fromModel.trim();
    } catch (_) {}

    // 2) РР· РІР»РѕР¶РµРЅРёР№
    for (final f in _extractAttachments(a)) {
      final p = f['path'] ?? '';
      if (p.startsWith('http://') || p.startsWith('https://')) return p;
    }

    // 3) РџРµСЂРІР°СЏ http(s)-СЃСЃС‹Р»РєР° РІ РѕРїРёСЃР°РЅРёРё
    final rx = RegExp(r'(https?:\/\/[^\s]+)');
    final m = rx.firstMatch(a.description);
    if (m != null) return m.group(0);

    return null;
  }

  // --- РЈРЅРёРІРµСЂСЃР°Р»СЊРЅРѕРµ РёР·РІР»РµС‡РµРЅРёРµ РІР»РѕР¶РµРЅРёР№ РёР· СЂР°Р·РЅС‹С… СЃС‚СЂСѓРєС‚СѓСЂ РјРѕРґРµР»Рё ---
  List<Map<String, String>> _extractAttachments(Assignment a) {
    final List<Map<String, String>> out = [];

    void addItem(dynamic item) {
      if (item == null) return;
      if (item is Map) {
        final name = (item['name'] ?? item['filename'] ?? item['title'] ?? item['file'] ?? '').toString();
        final path = (item['path'] ?? item['url'] ?? item['link'] ?? item['href'] ?? '').toString();
        if (name.isNotEmpty || path.isNotEmpty) {
          out.add({'name': name, 'path': path});
        }
      } else if (item is String) {
        final base = item.split('/').last.split('\\').last;
        out.add({'name': base, 'path': item});
      }
    }

    try {
      final dyn = a as dynamic;

      // СЃС‚Р°РЅРґР°СЂС‚РЅРѕРµ РїРѕР»Рµ
      final attachments = dyn.attachments;
      if (attachments is Iterable) {
        for (final it in attachments) addItem(it);
      } else if (attachments != null) {
        addItem(attachments);
      }

      // РІРѕР·РјРѕР¶РЅС‹Рµ Р°Р»СЊС‚РµСЂРЅР°С‚РёРІС‹
      final files = dyn.files ?? dyn.fileList;
      if (files is Iterable) {
        for (final it in files) addItem(it);
      } else if (files != null) {
        addItem(files);
      }
    } catch (_) {}

    return out;
  }

  void _showMore(BuildContext context) {
    showModalBottomSheet(
      context: context,
      showDragHandle: true,
      builder: (_) => SafeArea(
        child: Wrap(
          children: [
            ListTile(
              leading: const Icon(Icons.share_outlined),
              title: const Text('РџРѕРґРµР»РёС‚СЊСЃСЏ'),
              onTap: () => Navigator.pop(context),
            ),
          ],
        ),
      ),
    );
  }
}

/// вЂ”вЂ”вЂ” РљР°СЂС‚РѕС‡РєР° В«С€Р°РїРєРёВ»: СЃС‚Р°С‚СѓСЃРЅС‹Рµ С‡РёРїС‹, Р·Р°РіРѕР»РѕРІРѕРє, СЃСЂРѕРє
class _AssignmentHeaderCard extends StatelessWidget {
  final Assignment assignment;
  final bool isDraft;
  final bool isDone;

  const _AssignmentHeaderCard({
    required this.assignment,
    required this.isDraft,
    required this.isDone,
  });

  @override
  Widget build(BuildContext context) {
    final stripe = isDraft
        ? const Color(0xFFF59E0B)
        : (isDone ? const Color(0xFF16A34A) : Theme.of(context).colorScheme.primary);

    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(20),
        border: Border.all(color: const Color(0xFFE5E7EB)),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(.06),
            blurRadius: 16,
            offset: const Offset(0, 6),
          ),
        ],
      ),
      clipBehavior: Clip.antiAlias,
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Container(height: 6, color: stripe),
          Padding(
            padding: const EdgeInsets.fromLTRB(16, 14, 16, 16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Wrap(
                  spacing: 8,
                  runSpacing: 8,
                  children: [
                    if (isDraft)
                      _StatusChip(
                        icon: Icons.edit_note,
                        label: 'Р§РµСЂРЅРѕРІРёРє',
                        bg: const Color(0xFFFFF3CD),
                        border: const Color(0xFFF59E0B),
                        fgIcon: const Color(0xFFB45309),
                      ),
                    if (!isDraft)
                      _StatusChip(
                        icon: Icons.rocket_launch_outlined,
                        label: 'РћРїСѓР±Р»РёРєРѕРІР°РЅРѕ',
                        bg: const Color(0xFFEFFAF1),
                        border: const Color(0xFF16A34A),
                        fgIcon: const Color(0xFF166534),
                      ),
                    if (isDone)
                      _StatusChip(
                        icon: Icons.check_circle,
                        label: 'Р’С‹РїРѕР»РЅРµРЅРѕ',
                        bg: const Color(0xFFEFFAF1),
                        border: const Color(0xFF16A34A),
                        fgIcon: const Color(0xFF166534),
                      ),
                  ],
                ),
                const SizedBox(height: 12),
                Text(
                  assignment.title,
                  style: const TextStyle(
                    fontSize: 22,
                    fontWeight: FontWeight.w800,
                    letterSpacing: -.1,
                    color: Color(0xFF111827),
                    height: 1.15,
                  ),
                ),
                if (assignment.due != null && '${assignment.due}'.trim().isNotEmpty) ...[
                  const SizedBox(height: 8),
                  Row(
                    children: [
                      const Icon(Icons.event_outlined, size: 18, color: Color(0xFF6B7280)),
                      const SizedBox(width: 6),
                      Text(
                        'РЎСЂРѕРє: ${_formatDue(assignment.due)}',
                        style: const TextStyle(
                          fontSize: 14,
                          color: Color(0xFF374151),
                        ),
                      ),
                    ],
                  ),
                ],
              ],
            ),
          ),
        ],
      ),
    );
  }

  static String _formatDue(dynamic due) {
    if (due is DateTime) {
      String two(int v) => v < 10 ? '0$v' : '$v';
      return '${two(due.day)}.${two(due.month)}.${due.year} ${two(due.hour)}:${two(due.minute)}';
    }
    return '$due';
  }
}

class _StatusChip extends StatelessWidget {
  final IconData icon;
  final String label;
  final Color bg;
  final Color border;
  final Color fgIcon;

  const _StatusChip({
    required this.icon,
    required this.label,
    required this.bg,
    required this.border,
    required this.fgIcon,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 6),
      decoration: BoxDecoration(
        color: bg,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: border, width: 1),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(icon, size: 16, color: fgIcon),
          const SizedBox(width: 6),
          Text(
            label,
            style: const TextStyle(
              fontSize: 12.5,
              fontWeight: FontWeight.w600,
              color: Color(0xFF111827),
            ),
          ),
        ],
      ),
    );
  }
}

class _SectionCard extends StatelessWidget {
  final String title;
  final Widget child;

  const _SectionCard({required this.title, required this.child});

  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(20),
        border: Border.all(color: const Color(0xFFE5E7EB)),
      ),
      padding: const EdgeInsets.fromLTRB(16, 14, 16, 16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            title,
            style: const TextStyle(
              fontSize: 15,
              fontWeight: FontWeight.w800,
              color: Color(0xFF111827),
            ),
          ),
          const SizedBox(height: 10),
          child,
        ],
      ),
    );
  }
}

class _AttachmentTile extends StatelessWidget {
  final String name;
  final String path;
  const _AttachmentTile({required this.name, required this.path});

  @override
  Widget build(BuildContext context) {
    final ext = name.split('.').last.toLowerCase();
    IconData icon = Icons.insert_drive_file_outlined;
    if (['pdf'].contains(ext)) icon = Icons.picture_as_pdf_outlined;
    if (['png', 'jpg', 'jpeg', 'webp', 'gif'].contains(ext)) icon = Icons.image_outlined;
    if (['xls', 'xlsx', 'csv'].contains(ext)) icon = Icons.table_chart_outlined;
    if (['doc', 'docx'].contains(ext)) icon = Icons.description_outlined;
    if (['zip', 'rar', '7z'].contains(ext)) icon = Icons.archive_outlined;

    final showName = name.isNotEmpty ? name : (path.isNotEmpty ? path.split('/').last.split('\\').last : 'Р¤Р°Р№Р»');

    return ListTile(
      dense: false,
      contentPadding: EdgeInsets.zero,
      minVerticalPadding: 6,
      leading: Icon(icon, color: const Color(0xFF6B7280)),
      title: Text(
        showName,
        style: const TextStyle(
          fontSize: 15,
          fontWeight: FontWeight.w600,
          color: Color(0xFF111827),
        ),
      ),
      subtitle: path.isNotEmpty
          ? Text(
              path,
              style: const TextStyle(fontSize: 12.5, color: Color(0xFF6B7280)),
            )
          : null,
      trailing: IconButton(
        icon: const Icon(Icons.more_horiz),
        onPressed: () {},
        tooltip: 'Р”РµР№СЃС‚РІРёСЏ',
      ),
      onTap: () {},
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
    );
  }
}

class _BigButton extends StatelessWidget {
  final VoidCallback onPressed;
  final String label;
  final IconData? icon;
  final Color? bgColor;
  final bool tonal;

  const _BigButton._({
    required this.onPressed,
    required this.label,
    this.icon,
    this.bgColor,
    this.tonal = false,
  });

  factory _BigButton.icon({
    required IconData icon,
    required String label,
    required VoidCallback onPressed,
    Color? bgColor,
  }) =>
      _BigButton._(icon: icon, label: label, onPressed: onPressed, bgColor: bgColor);

  factory _BigButton.tonalIcon({
    required IconData icon,
    required String label,
    required VoidCallback onPressed,
  }) =>
      _BigButton._(
        icon: icon,
        label: label,
        onPressed: onPressed,
        tonal: true,
      );

  @override
  Widget build(BuildContext context) {
    final scheme = Theme.of(context).colorScheme;
    final bg = tonal ? scheme.secondaryContainer : (bgColor ?? scheme.primary);
    final fg = tonal ? scheme.onSecondaryContainer : Colors.white;

    return SizedBox(
      height: 52,
      child: ElevatedButton.icon(
        onPressed: onPressed,
        icon: Icon(icon),
        label: Text(label),
        style: const ButtonStyle(
          shape: MaterialStatePropertyAll(StadiumBorder()),
          textStyle: MaterialStatePropertyAll(
            TextStyle(fontSize: 16, fontWeight: FontWeight.w700),
          ),
          elevation: MaterialStatePropertyAll(0),
        ).copyWith(
          backgroundColor: MaterialStatePropertyAll(bg),
          foregroundColor: MaterialStatePropertyAll(fg),
        ),
      ),
    );
  }
}
// =============================
// FILE: lib/src/ui/learning/learning_screen.dart
// =============================

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

import 'state/learning_cubit.dart';
import 'state/learning_state.dart';
import 'team_details_screen.dart';
import 'models/team.dart';
import 'manage/manage_teams_screen.dart';

class LearningScreen extends StatelessWidget {
  const LearningScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocProvider<LearningCubit>(
      create: (_) => LearningCubit()..load(getCurrentGroupCodeSync(context)),
      child: const _Body(),
    );
  }
}

/// Р—Р°РіР»СѓС€РєР°: Р±РµСЂС‘Рј С‚РµРєСѓС‰СѓСЋ РіСЂСѓРїРїСѓ Р»РѕРєР°Р»СЊРЅРѕ (РїРѕС‚РѕРј СЃРІСЏР¶РµРј СЃ РїСЂРѕС„РёР»РµРј)
String getCurrentGroupCodeSync(BuildContext context) => '1-РЎРј(Р’Р’)-1';

class _Body extends StatefulWidget {
  const _Body();

  @override
  State<_Body> createState() => _BodyState();
}

class _BodyState extends State<_Body> {
  RealtimeChannel? _teamsMembershipChannel;

  @override
  void initState() {
    super.initState();
    _subscribeToTeamsRealtime();
  }

  void _subscribeToTeamsRealtime() {
    final client = Supabase.instance.client;
    final uid = client.auth.currentUser?.id;
    if (uid == null) return;

    // РџРµСЂРµСЃС‚СЂР°С…РѕРІРєР°: РѕС‚РїРёСЃС‹РІР°РµРј СЃС‚Р°СЂС‹Р№ РєР°РЅР°Р» (РµСЃР»Рё Р±С‹Р»)
    _teamsMembershipChannel?.unsubscribe();

    _teamsMembershipChannel = client.channel('public:team_members:$uid')

      // Р”РѕР±Р°РІРёР»Рё РІ РєРѕРјР°РЅРґСѓ
      ..onPostgresChanges(
        event: PostgresChangeEvent.insert,
        schema: 'public',
        table: 'team_members',
        callback: (payload) {
          final row = payload.newRecord;
          if (row != null && row['user_id'] == uid) {
            context.read<LearningCubit>().load(getCurrentGroupCodeSync(context));
          }
        },
      )

      // РЈРґР°Р»РёР»Рё РёР· РєРѕРјР°РЅРґС‹
      ..onPostgresChanges(
        event: PostgresChangeEvent.delete,
        schema: 'public',
        table: 'team_members',
        callback: (payload) {
          final row = payload.oldRecord;
          if (row != null && row['user_id'] == uid) {
            context.read<LearningCubit>().load(getCurrentGroupCodeSync(context));
          }
        },
      )

      ..subscribe();
  }

  @override
  void dispose() {
    _teamsMembershipChannel?.unsubscribe();
    _teamsMembershipChannel = null;
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    return Scaffold(
      appBar: AppBar(
        title: const Text('РљРѕРјР°РЅРґС‹'),
        centerTitle: true,
        // СЃР»РµРІР° вЂ” РїРµСЂРµРєР»СЋС‡Р°С‚РµР»СЊ СЃРїРёСЃРѕРє/РїР»РёС‚РєР°
        leading: BlocBuilder<LearningCubit, LearningState>(
          builder: (context, state) {
            final isGrid = state.viewMode == ViewMode.grid;
            return IconButton(
              tooltip: isGrid ? 'РЎРїРёСЃРѕРє' : 'РџР»РёС‚РєР°',
              icon: Icon(isGrid ? Icons.view_list : Icons.grid_view_rounded),
              onPressed: () => context.read<LearningCubit>().toggleViewMode(),
            );
          },
        ),
        actions: [
          // СЃРїСЂР°РІР° вЂ” РїРµСЂРµС…РѕРґ РІ СЌРєСЂР°РЅ СѓРїСЂР°РІР»РµРЅРёСЏ
          IconButton(
            tooltip: 'РЈРїСЂР°РІР»РµРЅРёРµ РєРѕРјР°РЅРґР°РјРё',
            icon: const Icon(Icons.settings_outlined),
            onPressed: () {
              final cubit = context.read<LearningCubit>();
              Navigator.of(context).push(
                MaterialPageRoute(
                  builder: (_) => BlocProvider.value(
                    value: cubit,
                    child: ManageTeamsScreen(
                      groupCode: getCurrentGroupCodeSync(context),
                    ),
                  ),
                ),
              );
            },
          ),
        ],
      ),
      body: BlocBuilder<LearningCubit, LearningState>(
        builder: (context, state) {
          if (state.loading) {
            return const Center(child: CircularProgressIndicator());
          }

          final items = context.read<LearningCubit>().visibleTeams;

          if (items.isEmpty) {
            return Center(
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Text(
                    'РџРѕРєР° РЅРµС‚ РєРѕРјР°РЅРґ РґР»СЏ РІР°С€РµР№ РіСЂСѓРїРїС‹',
                    style: theme.textTheme.bodyMedium,
                  ),
                  const SizedBox(height: 12),
                  OutlinedButton.icon(
                    onPressed: () {
                      final cubit = context.read<LearningCubit>();
                      Navigator.of(context).push(
                        MaterialPageRoute(
                          builder: (_) => BlocProvider.value(
                            value: cubit,
                            child: ManageTeamsScreen(
                              groupCode: getCurrentGroupCodeSync(context),
                            ),
                          ),
                        ),
                      );
                    },
                    icon: const Icon(Icons.settings_outlined),
                    label: const Text('РЈРїСЂР°РІР»РµРЅРёРµ РєРѕРјР°РЅРґР°РјРё'),
                  ),
                ],
              ),
            );
          }

          // РїРµСЂРµРєР»СЋС‡РµРЅРёРµ РјР°РєРµС‚Р°
          if (state.viewMode == ViewMode.grid) {
            return Padding(
              padding: const EdgeInsets.all(12),
              child: GridView.builder(
                gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                  crossAxisCount: 2, // РєР°Рє РёРєРѕРЅРєРё РЅР° С‚РµР»РµС„РѕРЅРµ
                  mainAxisSpacing: 12,
                  crossAxisSpacing: 12,
                  childAspectRatio: 1.2,
                ),
                itemCount: items.length,
                itemBuilder: (_, i) => _TeamGridCard(items[i]),
              ),
            );
          }

          return ListView.separated(
            padding: const EdgeInsets.all(16),
            itemCount: items.length,
            separatorBuilder: (_, __) => const SizedBox(height: 12),
            itemBuilder: (_, i) => _TeamTile(items[i]),
          );
        },
      ),
    );
  }
}

class _TeamTile extends StatelessWidget {
  final Team team;
  const _TeamTile(this.team);

  @override
  Widget build(BuildContext context) {
    return InkWell(
      onTap: () => Navigator.of(context).push(
        MaterialPageRoute(builder: (_) => TeamDetailsScreen(team: team)),
      ),
      borderRadius: BorderRadius.circular(16),
      child: Container(
        padding: const EdgeInsets.all(14),
        decoration: BoxDecoration(
          color: Theme.of(context).cardColor,
          borderRadius: BorderRadius.circular(16),
        ),
        child: Row(
          children: [
            _Avatar(text: team.icon),
            const SizedBox(width: 12),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    team.name,
                    maxLines: 2,
                    overflow: TextOverflow.ellipsis,
                    style: const TextStyle(fontWeight: FontWeight.w600),
                  ),
                  const SizedBox(height: 4),
                  Text(team.teacher,
                      style: TextStyle(color: Colors.grey.shade400)),
                ],
              ),
            ),
            if (team.unread > 0)
              Container(
                padding:
                    const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                decoration: BoxDecoration(
                  color: Colors.blueAccent,
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Text('${team.unread}',
                    style: const TextStyle(color: Colors.white)),
              ),
          ],
        ),
      ),
    );
  }
}

class _TeamGridCard extends StatelessWidget {
  final Team team;
  const _TeamGridCard(this.team);

  @override
  Widget build(BuildContext context) {
    return InkWell(
      onTap: () => Navigator.of(context).push(
        MaterialPageRoute(builder: (_) => TeamDetailsScreen(team: team)),
      ),
      borderRadius: BorderRadius.circular(16),
      child: Container(
        decoration: BoxDecoration(
          color: Theme.of(context).cardColor,
          borderRadius: BorderRadius.circular(16),
        ),
        padding: const EdgeInsets.all(14),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            _Avatar(text: team.icon),
            const SizedBox(height: 10),
            Text(
              team.name,
              maxLines: 2,
              overflow: TextOverflow.ellipsis,
              style: const TextStyle(fontWeight: FontWeight.w600),
            ),
            const Spacer(),
            Text(
              team.teacher,
              maxLines: 1,
              overflow: TextOverflow.ellipsis,
              style: TextStyle(color: Colors.grey.shade400),
            ),
          ],
        ),
      ),
    );
  }
}

class _Avatar extends StatelessWidget {
  final String text;
  const _Avatar({required this.text});

  @override
  Widget build(BuildContext context) {
    return Container(
      height: 44,
      width: 44,
      decoration: BoxDecoration(
        color: Colors.grey.shade800,
        borderRadius: BorderRadius.circular(12),
      ),
      alignment: Alignment.center,
      child: Text(
        text,
        style: const TextStyle(fontWeight: FontWeight.w700),
      ),
    );
  }
}
import 'tabs/assignments_tab.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'models/team.dart';
import 'state/team_cubit.dart';
import 'tabs/chat_tab.dart';
import 'tabs/files_tab.dart';

// РѕР±С‰РёР№ notifier РґР»СЏ РїРµСЂРµРєР»СЋС‡РµРЅРёСЏ
import 'tabs/assignments/view_mode.dart';

class TeamDetailsScreen extends StatelessWidget {
  final Team team;
  const TeamDetailsScreen({super.key, required this.team});

  @override
  Widget build(BuildContext context) {
    return BlocProvider<TeamCubit>(
      create: (_) => TeamCubit(team)..init(),
      child: const _Body(),
    );
  }
}

class _Body extends StatelessWidget {
  const _Body({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<TeamCubit, TeamState>(
      builder: (context, state) {
        final tabs = <Tab>[
          const Tab(text: 'Р—Р°РґР°РЅРёСЏ'),
          const Tab(text: 'Р§Р°С‚'),
          const Tab(text: 'Р¤Р°Р№Р»С‹'),
        ];
        final views = <Widget>[
          AssignmentsTab(team: state.team),
          const ChatTab(),
          const FilesTab(),
        ];

        return DefaultTabController(
          length: tabs.length,
          child: Builder(
            builder: (context) {
              final ctrl = DefaultTabController.of(context)!;
              // AnimatedBuilder РѕР±РµСЃРїРµС‡РёС‚ РїРµСЂРµСЃС‚СЂРѕР№РєСѓ AppBar РїСЂРё СЃРјРµРЅРµ РІРєР»Р°РґРєРё
              return AnimatedBuilder(
                animation: ctrl.animation!,
                builder: (context, _) {
                  final onAssignments = ctrl.index == 0;
                  return Scaffold(
                    appBar: AppBar(
                      title: Text(
                        state.team.name,
                        maxLines: 1,
                        overflow: TextOverflow.ellipsis,
                      ),
                      bottom: TabBar(tabs: tabs),
                      actions: [
                        if (onAssignments) const AssignmentsViewToggleAction(),
                      ],
                    ),
                    body: TabBarView(children: views),
                  );
                },
              );
            },
          ),
        );
      },
    );
  }
}

/// РљРЅРѕРїРєР° РІ AppBar: В«СЃРїРёСЃРѕРє в†” СЃРµС‚РєР°В»
class AssignmentsViewToggleAction extends StatelessWidget {
  const AssignmentsViewToggleAction({super.key});

  @override
  Widget build(BuildContext context) {
    return ValueListenableBuilder<bool>(
      valueListenable: AssignmentsViewMode.grid,
      builder: (_, asGrid, __) => IconButton(
        tooltip: asGrid ? 'РџРѕРєР°Р·Р°С‚СЊ СЃРїРёСЃРєРѕРј' : 'РџРѕРєР°Р·Р°С‚СЊ СЃРµС‚РєРѕР№',
        iconSize: 22,
        icon: Icon(asGrid ? Icons.view_agenda_outlined : Icons.grid_view_rounded),
        onPressed: () => AssignmentsViewMode.grid.value = !asGrid,
      ),
    );
  }
}
// lib/src/ui/learning/data/learning_repository.dart
import 'package:student_platform/src/ui/learning/models/team.dart';
import 'package:student_platform/src/ui/learning/models/message.dart';
import 'package:student_platform/src/ui/learning/models/file_item.dart';
import 'package:student_platform/src/ui/learning/models/assignment.dart';

abstract class LearningRepository {
  // РљРѕРјР°РЅРґС‹
  Future<List<Team>> loadTeams(String groupCode);
  Future<void> saveTeams(List<Team> teams);
  Future<String> joinByInviteCode(String code);

  // Р§Р°С‚
  Future<List<Message>> loadChat(String teamId);

  /// Р’РѕР·РІСЂР°С‰Р°РµС‚ true, РµСЃР»Рё СЃРѕРѕР±С‰РµРЅРёРµ СѓСЃРїРµС€РЅРѕ РѕС‚РїСЂР°РІР»РµРЅРѕ РЅР° СЃРµСЂРІРµСЂ.
  /// Р•СЃР»Рё false вЂ” Р·РЅР°С‡РёС‚ СѓРїР°Р»Рѕ (РёР»Рё СЃРµСЂРІРµСЂ РІРµСЂРЅСѓР» РїСѓСЃС‚Рѕ), РјС‹ РѕСЃС‚Р°РІР»СЏРµРј Р»РѕРєР°Р»СЊРЅРѕ.
  Future<bool> saveChat(String teamId, List<Message> messages);

  // Р¤Р°Р№Р»С‹
  Future<List<FileItem>> loadFiles(String teamId);
  Future<void> saveFiles(String teamId, List<FileItem> files);

  // Р—Р°РґР°РЅРёСЏ
  Future<List<Assignment>> loadAssignments(String teamId);
  Future<void> saveAssignments(String teamId, List<Assignment> items);

  // РќР°СЃС‚СЂРѕР№РєРё
  Future<Set<String>> loadHiddenTeamIds();
  Future<void> saveHiddenTeamIds(Set<String> ids);
  Future<String?> loadViewMode();
  Future<void> saveViewMode(String mode);
}
// =============================
// FILE: lib/src/ui/learning/data/supabase_learning_repository.dart
// =============================

import 'dart:convert';
import 'package:flutter/foundation.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

import 'package:student_platform/src/ui/learning/data/learning_repository.dart';
import 'package:student_platform/src/ui/learning/models/team.dart';
import 'package:student_platform/src/ui/learning/models/message.dart';
import 'package:student_platform/src/ui/learning/models/file_item.dart';
import 'package:student_platform/src/ui/learning/models/assignment.dart';

class SupabaseLearningRepository implements LearningRepository {
  final SupabaseClient _sb = Supabase.instance.client;

  static const _kTeamsCache = 'learning_teams_cache';
  static const _kHiddenIds = 'learning_hidden_team_ids';
  static const _kViewMode = 'learning_view_mode';
  static const _chatPrefix = 'learning_chat_';
  static const _filesPrefix = 'learning_files_';
  static const _assignPrefix = 'learning_assign_';

  final Map<String, String> _chatIdByTeam = {}; // teamId -> chatId (type='team_main')

  // -------------------- РљРѕРјР°РЅРґС‹ --------------------

  @override
  Future<List<Team>> loadTeams(String groupCode) async {
    try {
      debugPrint('[loadTeams] calling get_my_teams');
      final res = await _sb.rpc('get_my_teams');
      final list = (res as List)
          .map((e) => Map<String, dynamic>.from(e as Map))
          .map(_mapRowToTeam)
          .toList();
      await saveTeams(list);
      return list;
    } catch (e, st) {
      debugPrint('[loadTeams] error: $e\n$st');
      final prefs = await SharedPreferences.getInstance();
      final raw = prefs.getString(_kTeamsCache);
      if (raw == null || raw.isEmpty) return [];
      return (jsonDecode(raw) as List)
          .map((e) => Team.fromJson(Map<String, dynamic>.from(e as Map)))
          .toList();
    }
  }

  Team _mapRowToTeam(Map<String, dynamic> m) {
    return Team(
      id: (m['id'] ?? '').toString(),
      name: (m['name'] ?? '').toString(),
      teacher: (m['teacher'] ?? '').toString(),
      groupCode: (m['group_name'] ?? '').toString(),
      icon: (m['icon'] ?? '').toString(),
      unread: 0,
      pollApproved: false,
    );
  }

  @override
  Future<void> saveTeams(List<Team> teams) async {
    final prefs = await SharedPreferences.getInstance();
    prefs.setString(_kTeamsCache, jsonEncode(teams.map((e) => e.toJson()).toList()));
  }

  @override
  Future<String> joinByInviteCode(String code) async {
    debugPrint('[joinByInviteCode] code=$code');
    final res = await _sb.rpc('join_team_by_code', params: {'p_code': code.trim()});
    final teamId = res?.toString() ?? '';
    if (teamId.isEmpty) throw StateError('Invite failed');
    return teamId;
  }

  // ---------------------- Р§Р°С‚ ----------------------

  Future<String> _getTeamMainChatId(String teamId) async {
    final cached = _chatIdByTeam[teamId];
    if (cached != null && cached.isNotEmpty) return cached;
    final rows = await _sb
        .from('chats')
        .select('id')
        .eq('team_id', teamId)
        .eq('type', 'team_main')
        .limit(1);
    if (rows is List && rows.isNotEmpty) {
      final id = (rows.first['id'] ?? '').toString();
      _chatIdByTeam[teamId] = id;
      return id;
    }
    return '';
  }

  String? _firstAttachmentUrl(dynamic raw) {
    if (raw == null) return null;
    final s = raw.toString();
    if (s.isEmpty || s == 'null') return null;
    try {
      final data = jsonDecode(s);
      if (data is List && data.isNotEmpty) {
        final first = data.first;
        if (first is Map && first['url'] != null && first['url'].toString().isNotEmpty) {
          return first['url'].toString();
        }
        if (first is String && first.isNotEmpty) return first;
      }
    } catch (_) {}
    return null;
  }

  @override
  Future<List<Message>> loadChat(String teamId) async {
    try {
      final me = _sb.auth.currentUser;
      final chatId = await _getTeamMainChatId(teamId);

      debugPrint('[loadChat] teamId=$teamId, chatId=$chatId');
      final res = await _sb.rpc('get_chat_messages_for_team', params: {
        'p_team_id': teamId,
        'p_limit': 400,
      });

      final list = (res as List).map<Message>((e) {
        final m = Map<String, dynamic>.from(e as Map);
        final authorId = (m['author_id']?.toString() ?? '');
        final amI = (me != null && authorId.isNotEmpty && authorId == me.id);

        return Message(
          id: (m['id'] ?? '').toString(),
          chatId: chatId,
          authorId: authorId,
          authorLogin: (m['author_login'] ?? 'system').toString(),
          authorName: (m['author_name'] ?? (amI ? 'Р’С‹' : 'РЎС‚СѓРґРµРЅС‚')).toString(),
          text: (m['text'] ?? m['content'] ?? '').toString(),
          at: DateTime.tryParse((m['at'] ?? m['created_at'] ?? '').toString()) ?? DateTime.now(),
          imagePath: _firstAttachmentUrl(m['image_path'] ?? m['attachments']),
          replyToId: m['reply_to_id']?.toString(),
          type: _typeFromServer(m['type']?.toString()),
          assignmentId: null,
          authorAvatarUrl: (m['author_avatar_url'] ?? m['avatar_url'])?.toString(),
        );
      }).toList();

      if (list.isEmpty) {
        debugPrint('[loadChat] РїСѓСЃС‚РѕР№ СЃРїРёСЃРѕРє, РІРѕР·РІСЂР°С‰Р°РµРј Р»РѕРєР°Р»СЊРЅС‹Р№ РєСЌС€');
        return _loadChatLocal(teamId);
      }

      await _saveChatLocal(teamId, list);
      return list;
    } catch (e, st) {
      debugPrint('[loadChat] error: $e\n$st');
      return _loadChatLocal(teamId);
    }
  }

  @override
  Future<bool> saveChat(String teamId, List<Message> messages) async {
    if (messages.isEmpty) {
      debugPrint('[saveChat] messages РїСѓСЃС‚РѕР№');
      return true;
    }

    final last = messages.last;
    final String typeStr = _typeToServer(last);
    final String? replyTo = (last.replyToId?.isNotEmpty ?? false) ? last.replyToId : null;
    final String? attachment = (last.imagePath?.isNotEmpty ?? false) ? last.imagePath : null;

    debugPrint('[saveChat] РћС‚РїСЂР°РІР»СЏРµРј СЃРѕРѕР±С‰РµРЅРёРµ: "${last.text}" teamId=$teamId type=$typeStr replyTo=$replyTo attach=$attachment');

    bool sent = false;

    try {
      final res = await _sb.rpc('send_chat_message', params: {
        'p_team_id': teamId,
        'p_text': last.text,
        'p_type': typeStr,
        'p_reply_to': replyTo,
        'p_attachment_url': attachment,
      });
      debugPrint('[saveChat] вњ… send_chat_message result=$res');
      sent = true;
    } catch (e, st) {
      debugPrint('[saveChat] вќЊ send_chat_message error: $e\n$st');
      try {
        final login = await _currentLogin();
        debugPrint('[saveChat] РїСЂРѕР±СѓРµРј send_chat_message_for_login, login=$login');
        if (login != null && login.isNotEmpty) {
          final res2 = await _sb.rpc('send_chat_message_for_login', params: {
            'p_team_id': teamId,
            'p_login': login,
            'p_text': last.text,
            'p_type': typeStr,
            'p_reply_to': replyTo,
            'p_attachment_url': attachment,
          });
          debugPrint('[saveChat] вњ… send_chat_message_for_login result=$res2');
          sent = true;
        }
      } catch (e2, st2) {
        debugPrint('[saveChat] вќЊ send_chat_message_for_login error: $e2\n$st2');
        sent = false;
      }
    }

    debugPrint('[saveChat] РЎРѕС…СЂР°РЅСЏРµРј Р»РѕРєР°Р»СЊРЅС‹Р№ РєСЌС€, sent=$sent');
    await _saveChatLocal(teamId, messages);

    return sent;
  }

  MessageType _typeFromServer(String? s) {
    switch (s) {
      case 'assignmentDraft':
        return MessageType.assignmentDraft;
      case 'assignmentPublished':
        return MessageType.assignmentPublished;
      default:
        return MessageType.text;
    }
  }

  String _typeToServer(Message m) {
    switch (m.type) {
      case MessageType.assignmentDraft:
        return 'assignmentDraft';
      case MessageType.assignmentPublished:
        return 'assignmentPublished';
      default:
        return 'text';
    }
  }

  Future<String?> _currentLogin() async {
    final user = _sb.auth.currentUser;
    if (user == null) return null;
    try {
      final rows = await _sb.from('users').select('login').eq('id', user.id).limit(1);
      if (rows is List && rows.isNotEmpty) {
        final m = Map<String, dynamic>.from(rows.first as Map);
        final login = (m['login'] ?? '').toString();
        return login.isEmpty ? null : login;
      }
      return null;
    } catch (_) {
      return null;
    }
  }

  Future<void> _saveChatLocal(String teamId, List<Message> messages) async {
    final prefs = await SharedPreferences.getInstance();
    final raw = jsonEncode(messages.map((e) => e.toJson()).toList());
    await prefs.setString('$_chatPrefix$teamId', raw);
  }

  Future<List<Message>> _loadChatLocal(String teamId) async {
    final prefs = await SharedPreferences.getInstance();
    final raw = prefs.getString('$_chatPrefix$teamId');
    if (raw == null || raw.isEmpty) return [];
    return (jsonDecode(raw) as List)
        .map((e) => Message.fromJson(Map<String, dynamic>.from(e as Map)))
        .toList();
  }

  // ---------------------- Р¤Р°Р№Р»С‹ --------------------

  @override
  Future<List<FileItem>> loadFiles(String teamId) async {
    final prefs = await SharedPreferences.getInstance();
    final raw = prefs.getString('$_filesPrefix$teamId');
    if (raw == null || raw.isEmpty) return [];
    return (jsonDecode(raw) as List)
        .map((e) => FileItem.fromJson(Map<String, dynamic>.from(e as Map)))
        .toList();
  }

  @override
  Future<void> saveFiles(String teamId, List<FileItem> files) async {
    final prefs = await SharedPreferences.getInstance();
    final raw = jsonEncode(files.map((e) => e.toJson()).toList());
    await prefs.setString('$_filesPrefix$teamId', raw);
  }

  // -------------------- Р—Р°РґР°РЅРёСЏ --------------------

  @override
  Future<List<Assignment>> loadAssignments(String teamId) async {
    final prefs = await SharedPreferences.getInstance();
    final raw = prefs.getString('$_assignPrefix$teamId');
    if (raw == null || raw.isEmpty) return [];
    return (jsonDecode(raw) as List)
        .map((e) => Assignment.fromJson(Map<String, dynamic>.from(e as Map)))
        .toList();
  }

  @override
  Future<void> saveAssignments(String teamId, List<Assignment> items) async {
    final prefs = await SharedPreferences.getInstance();
    final raw = jsonEncode(items.map((e) => e.toJson()).toList());
    await prefs.setString('$_assignPrefix$teamId', raw);
  }

  // -------------------- РќР°СЃС‚СЂРѕР№РєРё ------------------

  @override
  Future<Set<String>> loadHiddenTeamIds() async {
    final prefs = await SharedPreferences.getInstance();
    final raw = prefs.getString(_kHiddenIds);
    if (raw == null || raw.isEmpty) return {};
    return Set<String>.from(List<String>.from(jsonDecode(raw)));
  }

  @override
  Future<void> saveHiddenTeamIds(Set<String> ids) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString(_kHiddenIds, jsonEncode(ids.toList()));
  }

  @override
  Future<String?> loadViewMode() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getString(_kViewMode);
  }

  @override
  Future<void> saveViewMode(String mode) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString(_kViewMode, mode);
  }
}
// lib/src/ui/learning/manage/manage_teams_screen.dart
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import '../state/learning_cubit.dart';
import '../state/learning_state.dart';
import '../models/team.dart';

class ManageTeamsScreen extends StatefulWidget {
  final String groupCode;
  const ManageTeamsScreen({super.key, required this.groupCode});

  @override
  State<ManageTeamsScreen> createState() => _ManageTeamsScreenState();
}

class _ManageTeamsScreenState extends State<ManageTeamsScreen> {
  String _query = '';

  Future<String?> _askCode(BuildContext context) async {
    final ctrl = TextEditingController();
    return showDialog<String?>(
      context: context,
      builder: (ctx) => AlertDialog(
        title: const Text('РРЅРІР°Р№С‚-РєРѕРґ'),
        content: TextField(
          controller: ctrl,
          decoration: const InputDecoration(
            labelText: 'РљРѕРґ РїСЂРёРіР»Р°С€РµРЅРёСЏ',
            border: OutlineInputBorder(),
          ),
        ),
        actions: [
          TextButton(onPressed: () => Navigator.pop(ctx, null), child: const Text('РћС‚РјРµРЅР°')),
          ElevatedButton(onPressed: () => Navigator.pop(ctx, ctrl.text.trim()), child: const Text('Р”РѕР±Р°РІРёС‚СЊ')),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    return Scaffold(
      appBar: AppBar(
        title: const Text('РЈРїСЂР°РІР»РµРЅРёРµ РєРѕРјР°РЅРґР°РјРё'),
        actions: [
          IconButton(
            tooltip: 'Р”РѕР±Р°РІРёС‚СЊ РїРѕ РєРѕРґСѓ',
            icon: const Icon(Icons.add),
            onPressed: () async {
              final code = await _askCode(context);
              if (code != null && code.trim().isNotEmpty) {
                try {
                  await context.read<LearningCubit>().joinByInviteCode(code.trim(), widget.groupCode);
                  if (!mounted) return;
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(content: Text('РљРѕРјР°РЅРґР° РґРѕР±Р°РІР»РµРЅР°')),
                  );
                } catch (e) {
                  if (!mounted) return;
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text('РћС€РёР±РєР°: $e')),
                  );
                }
              }
            },
          ),
        ],
      ),
      body: BlocBuilder<LearningCubit, LearningState>(
        builder: (context, state) {
          final allTeams = state.teams;
          final teams = allTeams
              .where((t) =>
                  _query.isEmpty ||
                  t.name.toLowerCase().contains(_query.toLowerCase()) ||
                  t.teacher.toLowerCase().contains(_query.toLowerCase()))
              .toList();

          return Column(
            children: [
              Padding(
                padding: const EdgeInsets.fromLTRB(12, 12, 12, 0),
                child: TextField(
                  decoration: const InputDecoration(
                    hintText: 'РџРѕРёСЃРє',
                    prefixIcon: Icon(Icons.search),
                    border: OutlineInputBorder(),
                  ),
                  onChanged: (s) => setState(() => _query = s),
                ),
              ),
              const SizedBox(height: 8),
              Expanded(
                child: ListView.separated(
                  padding: const EdgeInsets.fromLTRB(12, 0, 12, 12),
                  itemCount: teams.length,
                  separatorBuilder: (_, __) => const SizedBox(height: 8),
                  itemBuilder: (_, i) {
                    final team = teams[i];
                    return Container(
                      decoration: BoxDecoration(
                        color: theme.cardColor,
                        borderRadius: BorderRadius.circular(12),
                      ),
                      padding: const EdgeInsets.all(12),
                      child: Row(
                        children: [
                          Container(
                            height: 36,
                            width: 36,
                            alignment: Alignment.center,
                            decoration: BoxDecoration(
                              color: Colors.grey.shade800,
                              borderRadius: BorderRadius.circular(8),
                            ),
                            child: Text(team.icon, style: const TextStyle(fontWeight: FontWeight.w700)),
                          ),
                          const SizedBox(width: 12),
                          Expanded(
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(team.name, maxLines: 2, overflow: TextOverflow.ellipsis,
                                  style: const TextStyle(fontWeight: FontWeight.w600)),
                                const SizedBox(height: 2),
                                Text(team.teacher, maxLines: 1, overflow: TextOverflow.ellipsis,
                                  style: TextStyle(color: Colors.grey.shade400)),
                              ],
                            ),
                          ),
                        ],
                      ),
                    );
                  },
                ),
              ),
            ],
          );
        },
      ),
    );
  }
}
class Assignment {
  final String id;
  final String title;          // РќР°Р·РІР°РЅРёРµ
  final String description;    // Р§С‚Рѕ СЃРґРµР»Р°С‚СЊ
  final String? link;          // РЎСЃС‹Р»РєР° (РѕРїС†.)
  final String? due;           // РЎСЂРѕРє (РѕРїС†.)
  final List<Map<String, String>> attachments; // [{name, path}]
  final bool published;        // РћРїСѓР±Р»РёРєРѕРІР°РЅРѕ
  final int votes;             // Р“РѕР»РѕСЃР° "Р·Р°" РґР»СЏ РїСѓР±Р»РёРєР°С†РёРё
  final bool completedByMe;    // РњРѕСЏ РѕС‚РјРµС‚РєР° РІС‹РїРѕР»РЅРµРЅРёСЏ
  final String createdBy;      // 'me' | 'student' | 'starosta'
  final DateTime createdAt;

  const Assignment({
    required this.id,
    required this.title,
    required this.description,
    this.link,
    this.due,
    this.attachments = const [],
    required this.published,
    required this.votes,
    required this.completedByMe,
    required this.createdBy,
    required this.createdAt,
  });

  Assignment copyWith({
    String? id,
    String? title,
    String? description,
    String? link,
    String? due,
    List<Map<String, String>>? attachments,
    bool? published,
    int? votes,
    bool? completedByMe,
    String? createdBy,
    DateTime? createdAt,
  }) {
    return Assignment(
      id: id ?? this.id,
      title: title ?? this.title,
      description: description ?? this.description,
      link: link ?? this.link,
      due: due ?? this.due,
      attachments: attachments ?? this.attachments,
      published: published ?? this.published,
      votes: votes ?? this.votes,
      completedByMe: completedByMe ?? this.completedByMe,
      createdBy: createdBy ?? this.createdBy,
      createdAt: createdAt ?? this.createdAt,
    );
  }

  Map<String, dynamic> toJson() => {
        'id': id,
        'title': title,
        'description': description,
        'link': link,
        'due': due,
        'attachments': attachments,
        'published': published,
        'votes': votes,
        'completedByMe': completedByMe,
        'createdBy': createdBy,
        'createdAt': createdAt.toIso8601String(),
      };

  factory Assignment.fromJson(Map<String, dynamic> j) => Assignment(
        id: j['id'],
        title: j['title'],
        description: j['description'] ?? '',
        link: j['link'],
        due: j['due'],
        attachments: (j['attachments'] as List?)
                ?.map((e) => (e as Map).map((k, v) => MapEntry('$k', '$v')))
                .toList() ??
            const [],
        published: (j['published'] ?? false) as bool,
        votes: (j['votes'] ?? 0) as int,
        completedByMe: (j['completedByMe'] ?? false) as bool,
        createdBy: j['createdBy'] ?? 'student',
        createdAt: DateTime.parse(j['createdAt']),
      );
}
class FileItem {
  final String id;
  final String name;
  final String path; // Р»РѕРєР°Р»СЊРЅС‹Р№ РїСѓС‚СЊ

  FileItem({required this.id, required this.name, required this.path});

  Map<String, dynamic> toJson() => {'id': id, 'name': name, 'path': path};

  factory FileItem.fromJson(Map<String, dynamic> j) =>
      FileItem(id: j['id'], name: j['name'], path: j['path']);
}
// =============================
// FILE: lib/src/ui/learning/models/message.dart
// =============================

enum MessageType { text, assignmentDraft, assignmentPublished }

class Message {
  final String id;
  final String chatId;        // UUID С‡Р°С‚Р° (РјРѕР¶РµС‚ Р±С‹С‚СЊ РїСѓСЃС‚С‹Рј РІ РѕРїС‚РёРјРёСЃС‚РёС‡РЅС‹С… Р»РѕРєР°Р»СЊРЅС‹С… СЃРѕРѕР±С‰РµРЅРёСЏС…)
  final String authorId;      // UUID Р°РІС‚РѕСЂР° РёР· Р‘Р” (РїСѓСЃС‚Р°СЏ СЃС‚СЂРѕРєР° РґР»СЏ system)
  final String authorLogin;   // Р»РѕРіРёРЅ (РЅР°РїСЂРёРјРµСЂ, 13015) РёР»Рё 'system'
  final String authorName;    // РёРјСЏ РґР»СЏ РѕС‚РѕР±СЂР°Р¶РµРЅРёСЏ
  final String text;          // РєРѕРЅС‚РµРЅС‚ СЃРѕРѕР±С‰РµРЅРёСЏ
  final DateTime at;          // created_at

  // РѕРїС†РёРѕРЅР°Р»СЊРЅРѕ
  final String? authorAvatarUrl; // URL Р°РІР°С‚Р°СЂРєРё Р°РІС‚РѕСЂР° (РёР· users.avatar_url)
  final String? imagePath;       // РїСѓС‚СЊ Рє Р»РѕРєР°Р»СЊРЅРѕР№ РєР°СЂС‚РёРЅРєРµ/РІР»РѕР¶РµРЅРёСЋ (РєР»РёРµРЅС‚)
  final String? replyToId;       // id СЃРѕРѕР±С‰РµРЅРёСЏ, РЅР° РєРѕС‚РѕСЂРѕРµ Р±С‹Р» РѕС‚РІРµС‚
  final String? assignmentId;    // РґР»СЏ РєР°СЂС‚РѕС‡РµРє Р·Р°РґР°РЅРёР№
  final MessageType type;        // msg_type

  const Message({
    required this.id,
    required this.chatId,
    required this.authorId,
    required this.authorLogin,
    required this.authorName,
    required this.text,
    required this.at,
    this.authorAvatarUrl,
    this.imagePath,
    this.replyToId,
    this.assignmentId,
    this.type = MessageType.text,
  });

  bool isMine(String? currentUid) =>
      currentUid != null && currentUid.isNotEmpty && currentUid == authorId;

  bool get isSystem => authorLogin.toLowerCase() == 'system' || authorId.isEmpty;

  Message copyWith({
    String? id,
    String? chatId,
    String? authorId,
    String? authorLogin,
    String? authorName,
    String? text,
    DateTime? at,
    String? authorAvatarUrl,
    String? imagePath,
    String? replyToId,
    String? assignmentId,
    MessageType? type,
  }) {
    return Message(
      id: id ?? this.id,
      chatId: chatId ?? this.chatId,
      authorId: authorId ?? this.authorId,
      authorLogin: authorLogin ?? this.authorLogin,
      authorName: authorName ?? this.authorName,
      text: text ?? this.text,
      at: at ?? this.at,
      authorAvatarUrl: authorAvatarUrl ?? this.authorAvatarUrl,
      imagePath: imagePath ?? this.imagePath,
      replyToId: replyToId ?? this.replyToId,
      assignmentId: assignmentId ?? this.assignmentId,
      type: type ?? this.type,
    );
  }

  Map<String, dynamic> toJson() => {
        'id': id,
        'chat_id': chatId,
        'author_id': authorId,
        'author_login': authorLogin,
        'author_name': authorName,
        'content': text,
        'created_at': at.toIso8601String(),
        'author_avatar_url': authorAvatarUrl,
        'imagePath': imagePath,
        'replyToId': replyToId,
        'assignmentId': assignmentId,
        'msg_type': type.name,
      };

  factory Message.fromJson(Map<String, dynamic> j) => Message(
        id: (j['id'] ?? '').toString(),
        chatId: (j['chat_id'] ?? '').toString(),
        authorId: (j['author_id'] ?? '').toString(),
        authorLogin: (j['author_login'] ?? '').toString(),
        authorName: (j['author_name'] ?? 'РЎС‚СѓРґРµРЅС‚').toString(),
        text: (j['content'] ?? j['text'] ?? '').toString(),
        at: DateTime.tryParse((j['created_at'] ?? j['at'] ?? '').toString()) ??
            DateTime.now(),
        authorAvatarUrl: (j['author_avatar_url'] ??
                j['avatar_url'] ??
                j['authorAvatarUrl'])
            ?.toString(),
        imagePath: (j['imagePath'] ?? j['image_path'])?.toString(),
        replyToId: (j['replyToId'] ?? j['reply_to_id'])?.toString(),
        assignmentId: j['assignmentId']?.toString(),
        type: _parseType(j['msg_type'] ?? j['type']),
      );

  static MessageType _parseType(dynamic s) {
    if (s is String) {
      return MessageType.values.firstWhere(
        (e) => e.name == s,
        orElse: () => MessageType.text,
      );
    }
    return MessageType.text;
  }
}
import 'dart:convert';

class Team {
  final String id;
  final String name;       // РќР°Р·РІР°РЅРёРµ РєРѕРјР°РЅРґС‹/РїСЂРµРґРјРµС‚Р°
  final String teacher;    // РџСЂРµРїРѕРґР°РІР°С‚РµР»СЊ
  final String groupCode;  // Р“СЂСѓРїРїР°/РєСѓСЂСЃ РїСЂРёРІСЏР·РєРё
  final String icon;       // Р­РјРѕРґР·Рё/РєСЂР°С‚РєР°СЏ РјРµС‚РєР° РІ Р°РІР°С‚Р°СЂРµ
  final int  unread;       // РќРµРїСЂРѕС‡РёС‚Р°РЅРЅС‹Рµ (РґРµРјРѕ)
  final bool pollApproved; // Р Р°Р·СЂРµС€РµРЅС‹ "Р—Р°РґР°РЅРёСЏ" РїРѕСЃР»Рµ РіРѕР»РѕСЃРѕРІР°РЅРёСЏ

  const Team({
    required this.id,
    required this.name,
    required this.teacher,
    required this.groupCode,
    required this.icon,
    this.unread = 0,
    this.pollApproved = false,
  });

  Team copyWith({
    String? id,
    String? name,
    String? teacher,
    String? groupCode,
    String? icon,
    int? unread,
    bool? pollApproved,
  }) {
    return Team(
      id: id ?? this.id,
      name: name ?? this.name,
      teacher: teacher ?? this.teacher,
      groupCode: groupCode ?? this.groupCode,
      icon: icon ?? this.icon,
      unread: unread ?? this.unread,
      pollApproved: pollApproved ?? this.pollApproved,
    );
  }

  Map<String, dynamic> toJson() => {
    'id': id,
    'name': name,
    'teacher': teacher,
    'groupCode': groupCode,
    'icon': icon,
    'unread': unread,
    'pollApproved': pollApproved,
  };

  factory Team.fromJson(Map<String, dynamic> j) => Team(
    id: j['id'] as String,
    name: j['name'] as String,
    teacher: j['teacher'] as String,
    groupCode: j['groupCode'] as String,
    icon: j['icon'] as String,
    unread: (j['unread'] ?? 0) as int,
    pollApproved: (j['pollApproved'] ?? false) as bool,
  );

  static String encodeList(List<Team> items) =>
      jsonEncode(items.map((e) => e.toJson()).toList());

  static List<Team> decodeList(String raw) =>
      (jsonDecode(raw) as List).map((e) => Team.fromJson(e)).toList();
}
// lib/src/ui/learning/state/learning_cubit.dart
import 'package:flutter_bloc/flutter_bloc.dart';

import 'package:student_platform/src/ui/learning/data/learning_repository.dart';
import 'package:student_platform/src/ui/learning/data/supabase_learning_repository.dart';
import 'package:student_platform/src/ui/learning/state/learning_state.dart';
import 'package:student_platform/src/ui/learning/models/team.dart';

class LearningCubit extends Cubit<LearningState> {
  final LearningRepository repo;

  LearningCubit({LearningRepository? repository})
      : repo = repository ?? SupabaseLearningRepository(),
        super(const LearningState());

  Future<void> load(String groupCode) async {
    emit(state.copyWith(loading: true));
    try {
      final teams = await repo.loadTeams(groupCode);
      final hidden = await repo.loadHiddenTeamIds();
      final modeStr = await repo.loadViewMode();
      final viewMode = modeStr == 'grid' ? ViewMode.grid : ViewMode.list;

      emit(state.copyWith(
        teams: teams,
        hiddenIds: hidden,
        viewMode: viewMode,
      ));
    } finally {
      // СЃРЅРёРјР°РµРј СЃРїРёРЅРЅРµСЂ РІ Р»СЋР±РѕРј СЃР»СѓС‡Р°Рµ
      emit(state.copyWith(loading: false));
    }
  }

  List<Team> get visibleTeams =>
      state.teams.where((t) => !state.hiddenIds.contains(t.id)).toList();

  Future<void> toggleHidden(String teamId) async {
    final set = {...state.hiddenIds};
    if (set.contains(teamId)) {
      set.remove(teamId);
    } else {
      set.add(teamId);
    }
    await repo.saveHiddenTeamIds(set);
    emit(state.copyWith(hiddenIds: set));
  }

  Future<void> toggleViewMode() async {
    final next = state.viewMode == ViewMode.list ? ViewMode.grid : ViewMode.list;
    await repo.saveViewMode(next == ViewMode.grid ? 'grid' : 'list');
    emit(state.copyWith(viewMode: next));
  }

  /// Р”РѕР±Р°РІР»РµРЅРёРµ РІ РєРѕРјР°РЅРґСѓ РїРѕ РёРЅРІР°Р№С‚-РєРѕРґСѓ в†’ СЃРµСЂРІРµСЂРЅС‹Р№ RPC
  Future<void> addTeamByCode(String code, String groupCode) async {
    emit(state.copyWith(loading: true));
    try {
      await repo.joinByInviteCode(code.trim());
      final teams = await repo.loadTeams(groupCode);
      emit(state.copyWith(teams: teams));
    } finally {
      emit(state.copyWith(loading: false));
    }
  }

  /// вљ пёЏ РЎРѕРІРјРµСЃС‚РёРјРѕСЃС‚СЊ СЃРѕ СЃС‚Р°СЂС‹Рј РІС‹Р·РѕРІРѕРј РёР· UI:
  /// ManageTeamsScreen РІС‹Р·С‹РІР°РµС‚ joinByInviteCode(...),
  /// РѕСЃС‚Р°РІР»СЏРµРј Р°Р»РёР°СЃ, С‡С‚РѕР±С‹ РЅРёС‡РµРіРѕ РІ СЌРєСЂР°РЅРµ РЅРµ РјРµРЅСЏС‚СЊ.
  Future<void> joinByInviteCode(String code, String groupCode) {
    return addTeamByCode(code, groupCode);
  }
}
import '../models/team.dart';

enum ViewMode { list, grid }

class LearningState {
  final bool loading;
  final List<Team> teams;
  final Set<String> hiddenIds; // СЃРєСЂС‹С‚С‹Рµ
  final bool manageMode;       // РѕСЃС‚Р°РІРёР» РЅР° Р±СѓРґСѓС‰РµРµ (РЅРµ РёСЃРїРѕР»СЊР·СѓРµС‚СЃСЏ)
  final ViewMode viewMode;     // СЃРїРёСЃРѕРє / РїР»РёС‚РєР°

  const LearningState({
    this.loading = false,
    this.teams = const [],
    this.hiddenIds = const {},
    this.manageMode = false,
    this.viewMode = ViewMode.list,
  });

  LearningState copyWith({
    bool? loading,
    List<Team>? teams,
    Set<String>? hiddenIds,
    bool? manageMode,
    ViewMode? viewMode,
  }) =>
      LearningState(
        loading: loading ?? this.loading,
        teams: teams ?? this.teams,
        hiddenIds: hiddenIds ?? this.hiddenIds,
        manageMode: manageMode ?? this.manageMode,
        viewMode: viewMode ?? this.viewMode,
      );
}
// lib/src/ui/learning/state/team_cubit.dart
import 'dart:math';
import 'dart:convert';
import 'dart:async';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:shared_preferences/shared_preferences.dart';

import 'package:student_platform/src/ui/learning/data/learning_repository.dart';
import 'package:student_platform/src/ui/learning/data/supabase_learning_repository.dart';
import 'package:student_platform/src/ui/learning/models/message.dart';
import 'package:student_platform/src/ui/learning/models/file_item.dart';
import 'package:student_platform/src/ui/learning/models/team.dart';
import 'package:student_platform/src/ui/learning/models/assignment.dart';

class TeamState {
  final Team team;
  final List<Message> chat;
  final List<FileItem> files;
  final List<Assignment> assignments;
  final bool loading;
  final int votes;
  final bool isStarosta;
  final Set<String> doneAssignmentIds;

  List<Assignment> get published => assignments.where((a) => a.published).toList();

  Assignment? get pending {
    for (int i = assignments.length - 1; i >= 0; i--) {
      if (!assignments[i].published) return assignments[i];
    }
    return null;
  }

  bool get hasPending => pending != null;

  const TeamState({
    required this.team,
    this.chat = const [],
    this.files = const [],
    this.assignments = const [],
    this.loading = false,
    this.votes = 0,
    this.isStarosta = true,
    this.doneAssignmentIds = const {},
  });

  TeamState copyWith({
    Team? team,
    List<Message>? chat,
    List<FileItem>? files,
    List<Assignment>? assignments,
    bool? loading,
    int? votes,
    bool? isStarosta,
    Set<String>? doneAssignmentIds,
  }) =>
      TeamState(
        team: team ?? this.team,
        chat: chat ?? this.chat,
        files: files ?? this.files,
        assignments: assignments ?? this.assignments,
        loading: loading ?? this.loading,
        votes: votes ?? this.votes,
        isStarosta: isStarosta ?? this.isStarosta,
        doneAssignmentIds: doneAssignmentIds ?? this.doneAssignmentIds,
      );
}

class TeamCubit extends Cubit<TeamState> {
  final LearningRepository repo;
  TeamCubit(Team team)
      : repo = SupabaseLearningRepository(),
        super(TeamState(team: team));

  String? _myDisplayName;
  String? _myAvatarUrl;

  // ---- realtime
  RealtimeChannel? _rt;

  Future<void> init() async {
    emit(state.copyWith(loading: true));
    final chat = await repo.loadChat(state.team.id);
    final files = await repo.loadFiles(state.team.id);
    final ass = await repo.loadAssignments(state.team.id);
    emit(state.copyWith(
      loading: false,
      chat: chat,
      files: files,
      assignments: ass,
    ));

    // РїРѕРґРїРёСЃРєР° РЅР° realtime РґР»СЏ Р»РµРЅС‚С‹ СЃРѕРѕР±С‰РµРЅРёР№
    _subscribeToChat();
  }

  // ----------------------------- РџСЂРѕС„РёР»СЊ (РёРјСЏ/Р°РІР°С‚Р°СЂ) -----------------------------

  Future<String> _getMyDisplayName() async {
    if (_myDisplayName != null && _myDisplayName!.isNotEmpty) return _myDisplayName!;

    // 1) Р»РѕРєР°Р»СЊРЅС‹Р№ РєСЌС€ РїСЂРѕС„РёР»СЏ
    try {
      final prefs = await SharedPreferences.getInstance();
      final raw = prefs.getString('user');
      if (raw != null && raw.isNotEmpty) {
        final m = Map<String, dynamic>.from(jsonDecode(raw) as Map);
        final first = (m['name'] ?? '').toString();
        final last  = (m['surname'] ?? '').toString();
        final full  = [first, last].where((s) => s.isNotEmpty).join(' ').trim();
        if (full.isNotEmpty) return _myDisplayName = full;
      }
    } catch (_) {}

    // 2) РёР· Р‘Р”
    try {
      final uid = Supabase.instance.client.auth.currentUser?.id;
      if (uid != null && uid.isNotEmpty) {
        final row = await Supabase.instance.client
            .from('users')
            .select('name, surname')
            .eq('id', uid)
            .maybeSingle();
        if (row != null) {
          final mm = Map<String, dynamic>.from(row as Map);
          final full = [(mm['name'] ?? '').toString(), (mm['surname'] ?? '').toString()]
              .where((s) => s.isNotEmpty)
              .join(' ')
              .trim();
          if (full.isNotEmpty) return _myDisplayName = full;
        }
      }
    } catch (_) {}

    return _myDisplayName = 'РЇ';
  }

  Future<String?> _getMyAvatarUrl() async {
    if (_myAvatarUrl != null && _myAvatarUrl!.isNotEmpty) return _myAvatarUrl;

    // 1) Р»РѕРєР°Р»СЊРЅС‹Р№ РєСЌС€
    try {
      final prefs = await SharedPreferences.getInstance();
      final raw = prefs.getString('user');
      if (raw != null && raw.isNotEmpty) {
        final m = Map<String, dynamic>.from(jsonDecode(raw) as Map);
        final url = (m['avatar_url'] ?? m['avatarUrl'] ?? '').toString();
        if (url.isNotEmpty) return _myAvatarUrl = url;
      }
    } catch (_) {}

    // 2) РёР· Р‘Р”
    try {
      final uid = Supabase.instance.client.auth.currentUser?.id;
      if (uid != null && uid.isNotEmpty) {
        final row = await Supabase.instance.client
            .from('users')
            .select('avatar_url')
            .eq('id', uid)
            .maybeSingle();
        if (row != null) {
          final mm = Map<String, dynamic>.from(row as Map);
          final url = (mm['avatar_url'] ?? '').toString();
          if (url.isNotEmpty) return _myAvatarUrl = url;
        }
      }
    } catch (_) {}

    return _myAvatarUrl; // РјРѕР¶РµС‚ Р±С‹С‚СЊ null
  }

  // ----------------------------- Р§РђРў -----------------------------

  Future<void> sendMessage(
    String author,
    String text, {
    String? authorName,
    String? imagePath,
    String? replyToId,
    MessageType type = MessageType.text,
    String? assignmentId,
  }) async {
    final t = text.trim();
    if (t.isEmpty && imagePath == null && type == MessageType.text) return;

    final currentUid = Supabase.instance.client.auth.currentUser?.id ?? '';

    // РѕРїС‚РёРјРёСЃС‚РёС‡РЅРѕ вЂ” СЃСЂР°Р·Сѓ СЂРёСЃСѓРµРј
    final local = Message(
      id: '${DateTime.now().millisecondsSinceEpoch}${Random().nextInt(999)}',
      chatId: '',
      authorId: currentUid,
      authorLogin: '',
      authorName: authorName ?? await _getMyDisplayName(),
      text: t,
      at: DateTime.now(),
      authorAvatarUrl: await _getMyAvatarUrl(),
      imagePath: imagePath,
      replyToId: replyToId,
      type: type,
      assignmentId: assignmentId,
    );
    final optimistic = [...state.chat, local];
    emit(state.copyWith(chat: optimistic));

    // РѕС‚РїСЂР°РІР»СЏРµРј
    final ok = await repo.saveChat(state.team.id, optimistic);

    // РµСЃР»Рё СЃРµСЂРІРµСЂ РїСЂРёРЅСЏР» вЂ” РїРµСЂРµР·Р°РіСЂСѓР¶Р°РµРј РєР°РЅРѕРЅРёС‡РЅСѓСЋ Р»РµРЅС‚Сѓ
    if (ok) {
      final fresh = await repo.loadChat(state.team.id);
      if (fresh.isNotEmpty) {
        final votes = fresh.where((x) => x.text.toLowerCase().contains('Р·Р°')).length;
        emit(state.copyWith(chat: fresh, votes: votes));
      }
    }
  }

  void removeMessage(String id) {
    final idx = state.chat.indexWhere((m) => m.id == id);
    if (idx == -1) return;
    final updated = List<Message>.from(state.chat)..removeAt(idx);
    emit(state.copyWith(chat: updated));
    repo.saveChat(state.team.id, updated);
  }

  // --------------------------- Р—РђР”РђРќРРЇ ---------------------------

  Future<void> proposeAssignment({
    required String title,
    required String description,
    String? link,
    String? due,
    List<Map<String, String>> attachments = const [],
  }) async {
    final a = Assignment(
      id: 'a_${DateTime.now().millisecondsSinceEpoch}',
      title: title.trim(),
      description: description.trim(),
      link: link?.trim().isNotEmpty == true ? link!.trim() : null,
      due: due?.trim().isNotEmpty == true ? due!.trim() : null,
      attachments: attachments,
      published: false,
      votes: 0,
      completedByMe: false,
      createdBy: 'me',
      createdAt: DateTime.now(),
    );

    final items = [...state.assignments, a];
    await repo.saveAssignments(state.team.id, items);
    emit(state.copyWith(assignments: items));

    await sendMessage(
      'system',
      'Р§РµСЂРЅРѕРІРёРє Р·Р°РґР°РЅРёСЏ: ${a.title}',
      type: MessageType.assignmentDraft,
      assignmentId: a.id,
    );
  }

  Future<void> voteForPending() async {
    final items = [...state.assignments];
    final idx = items.lastIndexWhere((a) => !a.published);
    if (idx < 0) return;

    final updated = items[idx].copyWith(votes: items[idx].votes + 1);
    items[idx] = updated;

    if (updated.votes >= 3) {
      items[idx] = updated.copyWith(published: true);
      await repo.saveAssignments(state.team.id, items);
      emit(state.copyWith(assignments: items));
      await _markDraftBubblePublished(updated.id);
    } else {
      await repo.saveAssignments(state.team.id, items);
      emit(state.copyWith(assignments: items));
    }
  }

  Future<void> publishPendingManually() async {
    final items = [...state.assignments];
    final idx = items.lastIndexWhere((a) => !a.published);
    if (idx < 0) return;

    final pub = items[idx].copyWith(published: true);
    items[idx] = pub;

    await repo.saveAssignments(state.team.id, items);
    emit(state.copyWith(assignments: items));

    await _markDraftBubblePublished(pub.id);
  }

  void markAssignmentDone({required String assignmentId, required bool done}) {
    final set = {...state.doneAssignmentIds};
    if (done) {
      set.add(assignmentId);
    } else {
      set.remove(assignmentId);
    }
    emit(state.copyWith(doneAssignmentIds: set));
  }

  bool isAssignmentDone(String id) => state.doneAssignmentIds.contains(id);

  Future<void> toggleCompleted(String id) async {
    final items = state.assignments.map((a) {
      if (a.id == id) return a.copyWith(completedByMe: !a.completedByMe);
      return a;
    }).toList();
    await repo.saveAssignments(state.team.id, items);
    emit(state.copyWith(assignments: items));
  }

  Future<void> updateAssignment(
    String id, {
    String? title,
    String? description,
    String? link,
    String? due,
    List<Map<String, String>>? attachments,
  }) async {
    final items = [...state.assignments];
    final idx = items.indexWhere((e) => e.id == id);
    if (idx < 0) return;

    final src = items[idx];
    items[idx] = src.copyWith(
      title: title ?? src.title,
      description: description ?? src.description,
      link: link ?? src.link,
      due: due ?? src.due,
      attachments: attachments ?? src.attachments,
    );

    await repo.saveAssignments(state.team.id, items);
    emit(state.copyWith(assignments: items));
  }

  Future<void> removeAssignment(String id) async {
    final items = state.assignments.where((e) => e.id != id).toList();
    final chat = state.chat.where((m) => m.assignmentId != id).toList();
    await repo.saveAssignments(state.team.id, items);
    await repo.saveChat(state.team.id, chat);
    emit(state.copyWith(assignments: items, chat: chat));
  }

  // ---------------------- Р’РќРЈРўР Р•РќРќР•Р• ----------------------

  Future<void> _markDraftBubblePublished(String assignmentId) async {
    final chat = [...state.chat];
    for (int i = chat.length - 1; i >= 0; i--) {
      final m = chat[i];
      if (m.assignmentId == assignmentId && m.type == MessageType.assignmentDraft) {
        chat[i] = m.copyWith(type: MessageType.assignmentPublished);
        break;
      }
    }
    await repo.saveChat(state.team.id, chat);
    emit(state.copyWith(chat: chat));
  }

  Future<void> _subscribeToChat() async {
    final sb = Supabase.instance.client;

    try {
      // РІС‹С‚Р°СЃРєРёРІР°РµРј chat_id РіР»Р°РІРЅРѕРіРѕ С‡Р°С‚Р° РєРѕРјР°РЅРґС‹
      final rows = await sb
          .from('chats')
          .select('id')
          .eq('team_id', state.team.id)
          .eq('type', 'team_main')
          .limit(1);

      if (rows is! List || rows.isEmpty) return;
      final chatId = (rows.first['id'] ?? '').toString();
      if (chatId.isEmpty) return;

      // РїРµСЂРµСЃРѕР·РґР°С‘Рј РєР°РЅР°Р»
      try { await _rt?.unsubscribe(); } catch (_) {}
      // Р°РєС‚СѓР°Р»СЊРЅР°СЏ С„РѕСЂРјР° РёРјРµРЅРё РєР°РЅР°Р»Р° Р±РµР· РїСЂРµС„РёРєСЃР° 'realtime:'
      _rt = sb.channel('public:messages');

      final filter = PostgresChangeFilter(
        column: 'chat_id',
        type: PostgresChangeFilterType.eq, // РІР°Р¶РЅРѕ: РёРјРµРЅРЅРѕ type (РЅРµ operator)
        value: chatId,
      );

      _rt!
          .onPostgresChanges(
            event: PostgresChangeEvent.insert,
            schema: 'public',
            table: 'messages',
            filter: filter,
            callback: (_) async {
              final fresh = await repo.loadChat(state.team.id);
              if (fresh.isNotEmpty) {
                final votes = fresh.where((x) => x.text.toLowerCase().contains('Р·Р°')).length;
                emit(state.copyWith(chat: fresh, votes: votes));
              }
            },
          )
          .onPostgresChanges(
            event: PostgresChangeEvent.update,
            schema: 'public',
            table: 'messages',
            filter: filter,
            callback: (_) async {
              final fresh = await repo.loadChat(state.team.id);
              emit(state.copyWith(chat: fresh));
            },
          )
          .onPostgresChanges(
            event: PostgresChangeEvent.delete,
            schema: 'public',
            table: 'messages',
            filter: filter,
            callback: (_) async {
              final fresh = await repo.loadChat(state.team.id);
              emit(state.copyWith(chat: fresh));
            },
          );

      await _rt!.subscribe();
    } catch (_) {
      // С‚РёС…Рѕ, С‡С‚РѕР±С‹ РЅРµ РїР°РґР°Р»Рѕ
    }
  }

  // --------------------------- Р¤РђР™Р›Р« ---------------------------

  Future<void> setFiles(List<FileItem> files) async {
    await repo.saveFiles(state.team.id, files);
    emit(state.copyWith(files: files));
  }

  @override
  Future<void> close() async {
    try { await _rt?.unsubscribe(); } catch (_) {}
    return super.close();
  }
}
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import '../state/team_cubit.dart';
import '../models/assignment.dart';
import '../models/team.dart';
import '../assignment_details_screen.dart';

// РѕР±С‰РёР№ notifier
import 'assignments/view_mode.dart';

class AssignmentsTab extends StatelessWidget {
  final Team team;
  const AssignmentsTab({super.key, required this.team});

  @override
  Widget build(BuildContext context) {
    return ValueListenableBuilder<bool>(
      valueListenable: AssignmentsViewMode.grid,
      builder: (context, asGrid, _) {
        return BlocBuilder<TeamCubit, TeamState>(
          builder: (context, state) {
            final items = [...state.assignments];

            int rank(Assignment x) {
              if (!x.published) return 0;
              if (!x.completedByMe) return 1;
              return 2;
            }

            items.sort((a, b) {
              final r = rank(a) - rank(b);
              if (r != 0) return r;
              return a.createdAt.compareTo(b.createdAt);
            });

            if (items.isEmpty) {
              return const Center(child: Text('РџРѕРєР° РЅРµС‚ Р·Р°РґР°РЅРёР№'));
            }

            if (asGrid) {
              return GridView.builder(
                padding: const EdgeInsets.fromLTRB(12, 8, 12, 12),
                gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                  crossAxisCount: 2,
                  mainAxisSpacing: 10,
                  crossAxisSpacing: 10,
                  childAspectRatio: 1.05,
                ),
                itemCount: items.length,
                itemBuilder: (context, i) => _AssignmentCardTile(
                  a: items[i],
                  onOpen: () => _openDetails(context, items[i].id),
                  onToggle: () => context.read<TeamCubit>().toggleCompleted(items[i].id),
                ),
              );
            }

            // СЃРїРёСЃРѕРє
            return ListView.separated(
              padding: const EdgeInsets.all(12),
              itemCount: items.length,
              separatorBuilder: (_, __) => const SizedBox(height: 8),
              itemBuilder: (context, i) => _AssignmentRowTile(
                a: items[i],
                onOpen: () => _openDetails(context, items[i].id),
                onToggle: () => context.read<TeamCubit>().toggleCompleted(items[i].id),
              ),
            );
          },
        );
      },
    );
  }

  void _openDetails(BuildContext context, String id) {
    Navigator.of(context).push(
      MaterialPageRoute(
        builder: (_) => BlocProvider.value(
          value: context.read<TeamCubit>(),
          child: AssignmentDetailsScreen(assignmentId: id),
        ),
      ),
    );
  }
}

class _AssignmentRowTile extends StatelessWidget {
  final Assignment a;
  final VoidCallback onOpen;
  final VoidCallback onToggle;

  const _AssignmentRowTile({
    required this.a,
    required this.onOpen,
    required this.onToggle,
  });

  @override
  Widget build(BuildContext context) {
    final isDraft = !a.published;
    final isDone = a.completedByMe;
    final cs = Theme.of(context).colorScheme;

    Color cardColor() {
      if (isDraft) return cs.surfaceContainerHighest.withOpacity(.5);
      if (isDone) return Colors.green.withOpacity(.10);
      return cs.surface;
    }

    return InkWell(
      borderRadius: BorderRadius.circular(14),
      onTap: onOpen,
      child: Container(
        decoration: BoxDecoration(
          color: cardColor(),
          borderRadius: BorderRadius.circular(14),
          border: Border.all(
            color: isDone ? Colors.green : cs.outlineVariant.withOpacity(.6),
            width: 1,
          ),
        ),
        padding: const EdgeInsets.all(12),
        child: Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Icon(
              isDraft ? Icons.pending_outlined : Icons.assignment_outlined,
              color: isDone ? Colors.green : cs.primary,
            ),
            const SizedBox(width: 12),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Expanded(
                        child: Text(
                          a.title,
                          style: const TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.w700,
                            color: Colors.black87,
                          ),
                        ),
                      ),
                      const SizedBox(width: 8),
                      if ((a.due ?? '').isNotEmpty)
                        Text('РґРѕ ${a.due!}',
                            style: const TextStyle(fontSize: 13, color: Colors.black54)),
                    ],
                  ),
                  if (a.description.isNotEmpty) ...[
                    const SizedBox(height: 6),
                    Text(
                      a.description,
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                      style: const TextStyle(fontSize: 14, color: Colors.black87),
                    ),
                  ],
                  const SizedBox(height: 10),
                  Row(
                    children: [
                      _statusChip(context, isDraft, isDone),
                      const Spacer(),
                      if (!isDraft)
                        OutlinedButton.icon(
                          icon: Icon(isDone
                              ? Icons.check_box
                              : Icons.check_box_outline_blank),
                          label: Text(isDone ? 'РќРµ РІС‹РїРѕР»РЅРµРЅРѕ' : 'Р’С‹РїРѕР»РЅРµРЅРѕ'),
                          onPressed: onToggle,
                        ),
                    ],
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _statusChip(BuildContext context, bool isDraft, bool isDone) {
    final cs = Theme.of(context).colorScheme;
    if (isDraft) {
      return Container(
        padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
        decoration: BoxDecoration(
          color: cs.secondaryContainer,
          borderRadius: BorderRadius.circular(8),
        ),
        child: const Text('Р§РµСЂРЅРѕРІРёРє', style: TextStyle(fontSize: 12)),
      );
    }
    if (isDone) {
      return Container(
        padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
        decoration: BoxDecoration(
          color: Colors.green.withOpacity(.15),
          borderRadius: BorderRadius.circular(8),
          border: Border.all(color: Colors.green),
        ),
        child: const Text('Р’С‹РїРѕР»РЅРµРЅРѕ', style: TextStyle(fontSize: 12, color: Colors.green)),
      );
    }
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
      decoration: BoxDecoration(
        color: cs.primaryContainer,
        borderRadius: BorderRadius.circular(8),
      ),
      child: const Text('РћРїСѓР±Р»РёРєРѕРІР°РЅРѕ', style: TextStyle(fontSize: 12)),
    );
  }
}

class _AssignmentCardTile extends StatelessWidget {
  final Assignment a;
  final VoidCallback onOpen;
  final VoidCallback onToggle;

  const _AssignmentCardTile({
    required this.a,
    required this.onOpen,
    required this.onToggle,
  });

  @override
  Widget build(BuildContext context) {
    final isDraft = !a.published;
    final isDone = a.completedByMe;
    final cs = Theme.of(context).colorScheme;

    Color cardColor() {
      if (isDraft) return cs.surfaceContainerHighest.withOpacity(.5);
      if (isDone) return Colors.green.withOpacity(.10);
      return cs.surface;
    }

    return InkWell(
      borderRadius: BorderRadius.circular(14),
      onTap: onOpen,
      child: Container(
        decoration: BoxDecoration(
          color: cardColor(),
          borderRadius: BorderRadius.circular(14),
          border: Border.all(
            color: isDone ? Colors.green : cs.outlineVariant.withOpacity(.6),
            width: 1,
          ),
        ),
        padding: const EdgeInsets.all(12),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(
                  isDraft ? Icons.pending_outlined : Icons.assignment_outlined,
                  color: isDone ? Colors.green : cs.primary,
                ),
                const Spacer(),
                if (!isDraft)
                  IconButton(
                    tooltip: isDone ? 'РћС‚РјРµС‚РёС‚СЊ РєР°Рє РЅРµ РІС‹РїРѕР»РЅРµРЅРѕ' : 'РћС‚РјРµС‚РёС‚СЊ РєР°Рє РІС‹РїРѕР»РЅРµРЅРѕ',
                    icon: Icon(isDone ? Icons.check_box : Icons.check_box_outline_blank, size: 22),
                    onPressed: onToggle,
                  ),
              ],
            ),
            const SizedBox(height: 8),
            Expanded(
              child: Text(
                a.title,
                maxLines: 4,
                overflow: TextOverflow.ellipsis,
                style: const TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.w800,
                  color: Colors.black87,
                  height: 1.2,
                ),
              ),
            ),
            const SizedBox(height: 6),
            Row(
              children: [
                _statusMini(isDraft, isDone, cs),
                const Spacer(),
                if ((a.due ?? '').isNotEmpty)
                  Text('РґРѕ ${a.due!}', style: const TextStyle(fontSize: 12, color: Colors.black54)),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _statusMini(bool isDraft, bool isDone, ColorScheme cs) {
    Color bg;
    String text;
    Color? border;
    if (isDraft) {
      bg = cs.secondaryContainer; text = 'Р§РµСЂРЅРѕРІРёРє';
    } else if (isDone) {
      bg = Colors.green.withOpacity(.12); text = 'Р’С‹РїРѕР»РЅРµРЅРѕ'; border = Colors.green;
    } else {
      bg = cs.primaryContainer; text = 'РћРїСѓР±Р»РёРєРѕРІР°РЅРѕ';
    }
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
      decoration: BoxDecoration(
        color: bg,
        borderRadius: BorderRadius.circular(8),
        border: border != null ? Border.all(color: border) : null,
      ),
      child: Text(text, style: const TextStyle(fontSize: 11)),
    );
  }
}
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import 'state/team_cubit.dart';
import 'models/assignment.dart';

class AssignmentDetailsScreen extends StatelessWidget {
  final String assignmentId;
  const AssignmentDetailsScreen({super.key, required this.assignmentId});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      // СЃРІРµС‚Р»С‹Р№ РєРѕРЅС‚СЂР°СЃС‚РЅС‹Р№ С„РѕРЅ В«РєР°Рє Сѓ KeepВ»
      backgroundColor: const Color(0xFFF6F7FB),
      appBar: AppBar(
        title: const Text('Р—Р°РґР°РЅРёРµ'),
        centerTitle: true,
        actions: [
          IconButton(
            icon: const Icon(Icons.more_vert),
            onPressed: () => _showMore(context),
            tooltip: 'Р•С‰С‘',
          ),
        ],
      ),

      body: BlocBuilder<TeamCubit, TeamState>(
        builder: (context, state) {
          final st = state;
          final a = _pickAssignment(st, assignmentId);

          final isDraft = st.pending?.id == a.id;
          final isDone = context.read<TeamCubit>().isAssignmentDone(a.id);

          return SingleChildScrollView(
            padding: const EdgeInsets.fromLTRB(16, 12, 16, 120),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                _AssignmentHeaderCard(
                  assignment: a,
                  isDraft: isDraft,
                  isDone: isDone,
                ),
                const SizedBox(height: 16),
                _SectionCard(
                  title: 'РћРїРёСЃР°РЅРёРµ',
                  child: Text(
                    (a.description.trim().isEmpty)
                        ? 'РћРїРёСЃР°РЅРёСЏ РЅРµС‚.'
                        : a.description,
                    style: const TextStyle(
                      fontSize: 16,
                      height: 1.42,
                      color: Color(0xFF111827), // РїРѕС‡С‚Рё-С‡С‘СЂРЅС‹Р№
                    ),
                  ),
                ),
                if ((a.attachments).isNotEmpty) ...[
                  const SizedBox(height: 12),
                  _SectionCard(
                    title: 'Р’Р»РѕР¶РµРЅРёСЏ',
                    child: Column(
                      children: a.attachments
                          .map((f) => _AttachmentTile(
                                name: f['name'] ?? '',
                                path: f['path'] ?? '',
                              ))
                          .toList(),
                    ),
                  ),
                ],
              ],
            ),
          );
        },
      ),

      // РћР”РќРђ Р±РѕР»СЊС€Р°СЏ РєРЅРѕРїРєР° СЃРЅРёР·Сѓ
      bottomNavigationBar: BlocBuilder<TeamCubit, TeamState>(
        builder: (context, state) {
          final st = state;
          final a = _pickAssignment(st, assignmentId);

          final isDraft = st.pending?.id == a.id;
          final isDone = context.read<TeamCubit>().isAssignmentDone(a.id);

          return SafeArea(
            top: false,
            child: Padding(
              padding: const EdgeInsets.fromLTRB(16, 10, 16, 16),
              child: Row(
                children: [
                  if (isDraft && st.isStarosta)
                    Expanded(
                      child: _BigButton.icon(
                        icon: Icons.publish_outlined,
                        label: 'РћРїСѓР±Р»РёРєРѕРІР°С‚СЊ',
                        onPressed: () {
                          context.read<TeamCubit>().publishPendingManually();
                          ScaffoldMessenger.of(context).showSnackBar(
                            const SnackBar(content: Text('Р—Р°РґР°РЅРёРµ РѕРїСѓР±Р»РёРєРѕРІР°РЅРѕ')),
                          );
                        },
                      ),
                    ),
                  if (isDraft && !st.isStarosta)
                    Expanded(
                      child: _BigButton.tonalIcon(
                        icon: Icons.how_to_vote_outlined,
                        label: 'Р“РѕР»РѕСЃРѕРІР°С‚СЊ В«Р·Р°В»',
                        onPressed: () => context.read<TeamCubit>().voteForPending(),
                      ),
                    ),
                  if (!isDraft)
                    Expanded(
                      child: _BigButton.icon(
                        icon: isDone ? Icons.check_circle : Icons.task_alt,
                        label: isDone ? 'Р’С‹РїРѕР»РЅРµРЅРѕ' : 'РћС‚РјРµС‚РёС‚СЊ РєР°Рє РІС‹РїРѕР»РЅРµРЅРѕ',
                        bgColor: isDone ? const Color(0xFF16A34A) : null, // Р·РµР»С‘РЅС‹Р№ РµСЃР»Рё СѓР¶Рµ РІС‹РїРѕР»РЅРµРЅРѕ
                        onPressed: () => context
                            .read<TeamCubit>()
                            .markAssignmentDone(assignmentId: a.id, done: !isDone),
                      ),
                    ),
                ],
              ),
            ),
          );
        },
      ),
    );
  }

  TeamAssignment _pickAssignment(TeamState st, String id) {
    return (st.assignments).firstWhere(
      (x) => x.id == id,
      orElse: () => st.published.isNotEmpty ? st.published.last : st.assignments.first,
    );
  }

  void _showMore(BuildContext context) {
    showModalBottomSheet(
      context: context,
      showDragHandle: true,
      builder: (_) => SafeArea(
        child: Wrap(
          children: [
            ListTile(
              leading: const Icon(Icons.share_outlined),
              title: const Text('РџРѕРґРµР»РёС‚СЊСЃСЏ'),
              onTap: () => Navigator.pop(context),
            ),
          ],
        ),
      ),
    );
  }
}

/// вЂ”вЂ”вЂ” РљР°СЂС‚РѕС‡РєР° В«С€Р°РїРєРёВ»: СЃС‚Р°С‚СѓСЃРЅС‹Рµ С‡РёРїС‹, Р·Р°РіРѕР»РѕРІРѕРє, СЃСЂРѕРє
class _AssignmentHeaderCard extends StatelessWidget {
  final TeamAssignment assignment;
  final bool isDraft;
  final bool isDone;

  const _AssignmentHeaderCard({
    required this.assignment,
    required this.isDraft,
    required this.isDone,
  });

  @override
  Widget build(BuildContext context) {
    final stripe = isDraft
        ? const Color(0xFFF59E0B) // amber-500
        : (isDone ? const Color(0xFF16A34A) : Theme.of(context).colorScheme.primary);

    return Container(
      decoration: BoxDecoration(
        color: Colors.white, // РЇРІРЅРѕ Р±РµР»Р°СЏ РєР°СЂС‚РѕС‡РєР°
        borderRadius: BorderRadius.circular(20),
        border: Border.all(color: const Color(0xFFE5E7EB)), // gray-200
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(.06),
            blurRadius: 16,
            offset: const Offset(0, 6),
          ),
        ],
      ),
      clipBehavior: Clip.antiAlias,
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // С†РІРµС‚РЅР°СЏ РїРѕР»РѕСЃРєР° СЃРІРµСЂС…Сѓ
          Container(height: 6, color: stripe),
          Padding(
            padding: const EdgeInsets.fromLTRB(16, 14, 16, 16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Wrap(
                  spacing: 8,
                  runSpacing: 8,
                  children: [
                    if (isDraft)
                      _StatusChip(
                        icon: Icons.edit_note,
                        label: 'Р§РµСЂРЅРѕРІРёРє',
                        bg: const Color(0xFFFFF3CD),
                        border: const Color(0xFFF59E0B),
                        fgIcon: const Color(0xFFB45309),
                      ),
                    if (!isDraft)
                      _StatusChip(
                        icon: Icons.rocket_launch_outlined,
                        label: 'РћРїСѓР±Р»РёРєРѕРІР°РЅРѕ',
                        bg: const Color(0xFFEFFAF1),
                        border: const Color(0xFF16A34A),
                        fgIcon: const Color(0xFF166534),
                      ),
                    if (isDone)
                      _StatusChip(
                        icon: Icons.check_circle,
                        label: 'Р’С‹РїРѕР»РЅРµРЅРѕ',
                        bg: const Color(0xFFEFFAF1),
                        border: const Color(0xFF16A34A),
                        fgIcon: const Color(0xFF166534),
                      ),
                  ],
                ),
                const SizedBox(height: 12),
                Text(
                  assignment.title,
                  style: const TextStyle(
                    fontSize: 22,
                    fontWeight: FontWeight.w800,
                    letterSpacing: -.1,
                    color: Color(0xFF111827), // РїРѕС‡С‚Рё-С‡С‘СЂРЅС‹Р№
                    height: 1.15,
                  ),
                ),
                if (assignment.due != null) ...[
                  const SizedBox(height: 8),
                  Row(
                    children: [
                      const Icon(Icons.event_outlined, size: 18, color: Color(0xFF6B7280)),
                      const SizedBox(width: 6),
                      Text(
                        'РЎСЂРѕРє: ${_formatDue(assignment.due)}',
                        style: const TextStyle(
                          fontSize: 14,
                          color: Color(0xFF374151),
                        ),
                      ),
                    ],
                  ),
                ],
              ],
            ),
          ),
        ],
      ),
    );
  }

  static String _formatDue(dynamic due) {
    if (due is DateTime) {
      String two(int v) => v < 10 ? '0$v' : '$v';
      return '${two(due.day)}.${two(due.month)}.${due.year} ${two(due.hour)}:${two(due.minute)}';
    }
    return '$due';
    // РµСЃР»Рё Сѓ С‚РµР±СЏ СЃС‚СЂРѕРєР° С‚РёРїР° "15.09" вЂ” РѕРЅР° РѕС‚РѕР±СЂР°Р·РёС‚СЃСЏ РєР°Рє РµСЃС‚СЊ
  }
}

class _StatusChip extends StatelessWidget {
  final IconData icon;
  final String label;
  final Color bg;
  final Color border;
  final Color fgIcon;

  const _StatusChip({
    required this.icon,
    required this.label,
    required this.bg,
    required this.border,
    required this.fgIcon,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 6),
      decoration: BoxDecoration(
        color: bg,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: border, width: 1),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(icon, size: 16, color: fgIcon),
          const SizedBox(width: 6),
          const Text(
            // С‚С‘РјРЅС‹Р№ С‚РµРєСЃС‚
            // (Р¶С‘СЃС‚РєРѕ, С‡С‚РѕР±С‹ РЅРµ РїРѕР±РµР»РµР» РІ С‚С‘РјРЅРѕР№ С‚РµРјРµ)
            '',
          ),
          Text(
            label,
            style: const TextStyle(
              fontSize: 12.5,
              fontWeight: FontWeight.w600,
              color: Color(0xFF111827),
            ),
          ),
        ],
      ),
    );
  }
}

class _SectionCard extends StatelessWidget {
  final String title;
  final Widget child;

  const _SectionCard({required this.title, required this.child});

  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white, // Р±РµР»Р°СЏ СЃРµРєС†РёСЏ
        borderRadius: BorderRadius.circular(20),
        border: Border.all(color: const Color(0xFFE5E7EB)),
      ),
      padding: const EdgeInsets.fromLTRB(16, 14, 16, 16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            title,
            style: const TextStyle(
              fontSize: 15,
              fontWeight: FontWeight.w800,
              color: Color(0xFF111827),
            ),
          ),
          const SizedBox(height: 10),
          child,
        ],
      ),
    );
  }
}

class _AttachmentTile extends StatelessWidget {
  final String name;
  final String path;
  const _AttachmentTile({required this.name, required this.path});

  @override
  Widget build(BuildContext context) {
    final ext = name.split('.').last.toLowerCase();
    IconData icon = Icons.insert_drive_file_outlined;
    if (['pdf'].contains(ext)) icon = Icons.picture_as_pdf_outlined;
    if (['png', 'jpg', 'jpeg', 'webp', 'gif'].contains(ext)) icon = Icons.image_outlined;
    if (['xls', 'xlsx', 'csv'].contains(ext)) icon = Icons.table_chart_outlined;
    if (['doc', 'docx'].contains(ext)) icon = Icons.description_outlined;
    if (['zip', 'rar', '7z'].contains(ext)) icon = Icons.archive_outlined;

    return ListTile(
      dense: false,
      contentPadding: EdgeInsets.zero,
      minVerticalPadding: 6,
      leading: Icon(icon, color: const Color(0xFF6B7280)),
      title: Text(
        name,
        style: const TextStyle(
          fontSize: 15,
          fontWeight: FontWeight.w600,
          color: Color(0xFF111827),
        ),
      ),
      subtitle: Text(
        path,
        style: const TextStyle(
          fontSize: 12.5,
          color: Color(0xFF6B7280),
        ),
      ),
      trailing: IconButton(
        icon: const Icon(Icons.more_horiz),
        onPressed: () {},
        tooltip: 'Р”РµР№СЃС‚РІРёСЏ',
      ),
      onTap: () {},
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
    );
  }
}

/// РљСЂР°СЃРёРІР°СЏ В«Р±РѕР»СЊС€Р°СЏ РєРЅРѕРїРєР°В» (Stadium/СЂР°РґРёСѓСЃ 28, РІС‹СЃРѕС‚Р° 52)
class _BigButton extends StatelessWidget {
  final VoidCallback onPressed;
  final String label;
  final IconData? icon;
  final Color? bgColor;
  final bool tonal;

  const _BigButton._({
    required this.onPressed,
    required this.label,
    this.icon,
    this.bgColor,
    this.tonal = false,
  });

  factory _BigButton.icon({
    required IconData icon,
    required String label,
    required VoidCallback onPressed,
    Color? bgColor,
  }) =>
      _BigButton._(icon: icon, label: label, onPressed: onPressed, bgColor: bgColor);

  factory _BigButton.tonalIcon({
    required IconData icon,
    required String label,
    required VoidCallback onPressed,
  }) =>
      _BigButton._(
        icon: icon,
        label: label,
        onPressed: onPressed,
        tonal: true,
      );

  @override
  Widget build(BuildContext context) {
    final scheme = Theme.of(context).colorScheme;
    final bg = tonal ? scheme.secondaryContainer : (bgColor ?? scheme.primary);
    final fg = tonal ? scheme.onSecondaryContainer : Colors.white;

    return SizedBox(
      height: 52,
      child: ElevatedButton.icon(
        onPressed: onPressed,
        icon: Icon(icon),
        label: Text(label),
        style: ButtonStyle(
          backgroundColor: MaterialStatePropertyAll(bg),
          foregroundColor: MaterialStatePropertyAll(fg),
          shape: MaterialStatePropertyAll(
            const StadiumBorder(),
          ),
          textStyle: const MaterialStatePropertyAll(
            TextStyle(fontSize: 16, fontWeight: FontWeight.w700),
          ),
          elevation: const MaterialStatePropertyAll(0),
        ),
      ),
    );
  }
}
import 'dart:async';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart' as services;
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:image_picker/image_picker.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

import '../state/team_cubit.dart';
import '../models/message.dart';
import '../models/assignment.dart';
import '../assignment_details_screen.dart';

// РІРёРґР¶РµС‚С‹
import 'chat/composer.dart';
import 'chat/scroll_to_bottom_button.dart';
import 'chat/swipe_to_reply.dart';
import 'chat/message_bubble.dart';
import 'chat/assignment_bubble.dart';
import 'chat/plus_button.dart';
import 'chat/pinned_strip.dart';
import 'chat/typing_line.dart';

class ChatTab extends StatefulWidget {
  const ChatTab({super.key});
  @override
  State<ChatTab> createState() => _ChatTabState();
}

class _ChatTabState extends State<ChatTab> {
  final _ctrl = TextEditingController();
  final _scroll = ScrollController();
  final Map<String, Map<String, int>> _localReactions = {};
  final Map<String, GlobalKey> _messageKeys = {};

  bool _showJump = false;

  Message? _replyTo;
  String? _pickedImage;

  final List<PinEntry> _pins = [];
  bool _pinsHidden = false;
  bool _autoPinHidden = false;

  final Set<String> _typingUsers = {};
  Timer? _myTypingOff;
  bool get _someoneTyping => _typingUsers.isNotEmpty;

  final FocusNode _composerFocus = FocusNode();

  static const double _assignmentScale = 0.70;      // в€’30%
  static const double _assignmentTextBoost = 1.18;  // +18%

  static const services.MethodChannel _keyboardChannel =
      services.MethodChannel('keyboard_image_channel');

  @override
  void initState() {
    super.initState();
    _scroll.addListener(_onScroll);
    _ctrl.addListener(_onMyTyping);

    _keyboardChannel.setMethodCallHandler((call) async {
      if (call.method == 'onKeyboardImagePicked') {
        final path = (call.arguments ?? '') as String;
        if (path.isNotEmpty && mounted) {
          setState(() => _pickedImage = path);
        }
      }
      return null;
    });
  }

  @override
  void dispose() {
    _scroll.removeListener(_onScroll);
    _ctrl.removeListener(_onMyTyping);
    _scroll.dispose();
    _ctrl.dispose();
    _composerFocus.dispose();
    _myTypingOff?.cancel();
    super.dispose();
  }

  void _onScroll() {
    final show = _scroll.hasClients && _scroll.offset < _scroll.position.maxScrollExtent - 300;
    if (show != _showJump) setState(() => _showJump = show);
  }

  void _onMyTyping() {
    setState(() => _typingUsers.add('Р’С‹'));
    _myTypingOff?.cancel();
    _myTypingOff = Timer(const Duration(seconds: 2), () {
      if (!mounted) return;
      setState(() => _typingUsers.remove('Р’С‹'));
    });
  }

  String _time(DateTime dt) {
    final h = dt.hour.toString().padLeft(2, '0');
    final m = dt.minute.toString().padLeft(2, '0');
    return '$h:$m';
  }

  Future<void> _jumpToBottom() async {
    if (!_scroll.hasClients) return;
    await _scroll.animateTo(
      _scroll.position.maxScrollExtent,
      duration: const Duration(milliseconds: 220),
      curve: Curves.easeOut,
    );
  }

  Future<void> _scrollToMessage(String id) async {
    final ctx = _messageKeys[id]?.currentContext;
    if (ctx != null) {
      await Scrollable.ensureVisible(
        ctx,
        duration: const Duration(milliseconds: 280),
        alignment: .2,
        curve: Curves.easeOut,
      );
    }
  }

  List<PinEntry> _buildPins(TeamState st) {
    final manual = [..._pins];
    if (!_autoPinHidden) {
      final pending = st.pending;
      final published = st.published.isNotEmpty ? st.published.last : null;
      final a = pending ?? published;
      final alreadyHasManual = a != null && manual.any((p) => p.type == PinType.assignment && p.refId == a.id);
      if (a != null && !alreadyHasManual) {
        manual.insert(
          0,
          PinEntry.assignment(
            id: 'auto-${a.id}',
            title: a.title,
            subtitle: a.due != null ? 'РґРѕ ${a.due}' : null,
            assignmentId: a.id,
            isAuto: true,
          ),
        );
      }
    }
    return manual;
  }

  void _pinFromMessage(Message m) {
    if (m.text.trim().isEmpty) return;
    if (_pins.any((p) => p.type == PinType.message && p.refId == m.id)) return;
    setState(() {
      _pins.add(PinEntry.message(
        id: 'msg-${m.id}',
        title: m.text.trim().split('\n').first,
        subtitle: null,
        messageId: m.id,
      ));
      _pinsHidden = false;
    });
  }

  void _pinText(String text) {
    final t = text.trim();
    if (t.isEmpty) return;
    setState(() {
      _pins.add(PinEntry.text(
        id: 'txt-${DateTime.now().microsecondsSinceEpoch}',
        title: t,
      ));
      _pinsHidden = false;
    });
  }

  void _pinAssignment(Assignment a) {
    if (_pins.any((p) => p.type == PinType.assignment && p.refId == a.id && !p.isAuto)) return;
    setState(() {
      _pins.add(PinEntry.assignment(
        id: 'ass-${a.id}',
        title: a.title,
        subtitle: a.due != null ? 'РґРѕ ${a.due}' : null,
        assignmentId: a.id,
      ));
      _pinsHidden = false;
    });
  }

  void _addReaction(String msgId, String emoji) {
    setState(() {
      final map = _localReactions[msgId] ?? <String, int>{};
      map[emoji] = (map[emoji] ?? 0) + 1;
      _localReactions[msgId] = map;
    });
  }

  void _send(BuildContext context) {
    final text = _ctrl.text.trim();
    if (text.isEmpty && _pickedImage == null) return;

    final replyId = _replyTo?.id;
    _ctrl.clear();
    setState(() => _replyTo = null);

    context.read<TeamCubit>().sendMessage(
      'me',
      text,
      imagePath: _pickedImage,
      replyToId: replyId,
    );
    setState(() => _pickedImage = null);

    WidgetsBinding.instance.addPostFrameCallback((_) => _jumpToBottom());
  }

  @override
  Widget build(BuildContext context) {
    final mq = MediaQuery.of(context);
    final scale = mq.textScaleFactor.clamp(1.0, 1.2);
    final themed = Theme.of(context);

    const listBottomPad = 96.0;

    return MediaQuery(
      data: mq.copyWith(textScaleFactor: scale),
      child: BlocBuilder<TeamCubit, TeamState>(
        builder: (context, state) {
          final list = state.chat;
          final pins = _buildPins(state);

          return Column(
            children: [
              if (!_pinsHidden && pins.isNotEmpty)
                PinnedStrip(
                  entries: pins,
                  onOpen: (p) async {
                    switch (p.type) {
                      case PinType.message:
                        await _scrollToMessage(p.refId!);
                        break;
                      case PinType.assignment:
                        Navigator.of(context).push(
                          MaterialPageRoute(
                            builder: (_) => BlocProvider.value(
                              value: context.read<TeamCubit>(),
                              child: AssignmentDetailsScreen(assignmentId: p.refId!),
                            ),
                          ),
                        );
                        break;
                      case PinType.text:
                        ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text(p.title)));
                        break;
                    }
                  },
                  onUnpin: (p) {
                    if (p.isAuto) {
                      setState(() => _autoPinHidden = true);
                    } else {
                      setState(() => _pins.removeWhere((e) => e.id == p.id));
                    }
                  },
                  onMore: () async {
                    await showModalBottomSheet(
                      context: context,
                      showDragHandle: true,
                      builder: (_) => SafeArea(
                        child: ListView(
                          shrinkWrap: true,
                          children: [
                            ListTile(
                              leading: const Icon(Icons.visibility_off_outlined),
                              title: const Text('РЎРєСЂС‹С‚СЊ Р»РµРЅС‚Сѓ'),
                              onTap: () {
                                Navigator.pop(context);
                                setState(() => _pinsHidden = true);
                              },
                            ),
                            if (!_autoPinHidden)
                              ListTile(
                                leading: const Icon(Icons.push_pin_outlined),
                                title: const Text('РЈР±СЂР°С‚СЊ Р°РІС‚Рѕ-Р·Р°РєСЂРµРї Р·Р°РґР°РЅРёСЏ'),
                                onTap: () {
                                  Navigator.pop(context);
                                  setState(() => _autoPinHidden = true);
                                },
                              ),
                            if (_pins.isNotEmpty) const Divider(height: 12),
                            ..._pins.map((p) => ListTile(
                                  leading: Icon(p.icon),
                                  title: Text(p.title, maxLines: 1, overflow: TextOverflow.ellipsis),
                                  subtitle: p.subtitle != null ? Text(p.subtitle!) : null,
                                  trailing: IconButton(
                                    icon: const Icon(Icons.close),
                                    onPressed: () => setState(() => _pins.removeWhere((e) => e.id == p.id)),
                                  ),
                                  onTap: () {
                                    Navigator.pop(context);
                                    if (p.type == PinType.message) _scrollToMessage(p.refId!);
                                    if (p.type == PinType.assignment) {
                                      Navigator.of(context).push(
                                        MaterialPageRoute(
                                          builder: (_) => BlocProvider.value(
                                            value: context.read<TeamCubit>(),
                                            child: AssignmentDetailsScreen(assignmentId: p.refId!),
                                          ),
                                        ),
                                      );
                                    }
                                  },
                                )),
                          ],
                        ),
                      ),
                    );
                  },
                ),

              Expanded(
                child: Stack(
                  children: [
                    ListView.builder(
                      controller: _scroll,
                      padding: const EdgeInsets.fromLTRB(12, 12, 12, listBottomPad),
                      itemCount: list.length,
                      itemBuilder: (context, i) {
                        final m = list[i];
                        final key = _messageKeys[m.id] ??= GlobalKey();

                        if (m.type == MessageType.assignmentDraft || m.type == MessageType.assignmentPublished) {
                          final boostedTs = (mq.textScaleFactor * _assignmentTextBoost).clamp(1.0, 1.6);
                          return KeyedSubtree(
                            key: key,
                            child: Padding(
                              padding: const EdgeInsets.only(bottom: 8),
                              child: Transform.scale(
                                scale: _assignmentScale,
                                alignment: Alignment.centerLeft,
                                child: MediaQuery(
                                  data: mq.copyWith(textScaleFactor: boostedTs),
                                  child: AssignmentBubble(
                                    message: m,
                                    isDraft: m.type == MessageType.assignmentDraft,
                                    time: _time(m.at),
                                    onOpen: () {
                                      final st = context.read<TeamCubit>().state;
                                      Assignment? a;
                                      final byId = st.assignments.where((e) => e.id == m.assignmentId);
                                      if (byId.isNotEmpty) a = byId.first; else if (st.published.isNotEmpty) a = st.published.last;
                                      if (a == null) return;
                                      Navigator.of(context).push(
                                        MaterialPageRoute(
                                          builder: (_) => BlocProvider.value(
                                            value: context.read<TeamCubit>(),
                                            child: AssignmentDetailsScreen(assignmentId: a!.id),
                                          ),
                                        ),
                                      );
                                    },
                                    onPublish: () => context.read<TeamCubit>().publishPendingManually(),
                                    onVote: () => context.read<TeamCubit>().voteForPending(),
                                    onLongPress: () => _showAssignmentActions(context, m),
                                    onPin: () {
                                      final st = context.read<TeamCubit>().state;
                                      final a = st.assignments.firstWhere(
                                        (e) => e.id == m.assignmentId,
                                        orElse: () => st.published.isNotEmpty ? st.published.last : st.assignments.first,
                                      );
                                      _pinAssignment(a);
                                    },
                                  ),
                                ),
                              ),
                            ),
                          );
                        }

                        final reply = m.replyToId != null
                            ? state.chat.firstWhere(
                                (x) => x.id == m.replyToId,
                                orElse: () => Message(
                                  id: '0',
                                  chatId: '',
                                  authorId: '',
                                  authorLogin: '',
                                  authorName: '',
                                  text: '',
                                  at: DateTime.now(),
                                ),
                              )
                            : null;

                        return KeyedSubtree(
                          key: key,
                          child: Padding(
                            padding: const EdgeInsets.only(bottom: 8),
                            child: SwipeToReply(
                              onReply: () => setState(() => _replyTo = m),
                              child: MessageBubble(
                                message: m,
                                time: _time(m.at),
                                replyPreview: reply?.text,
                                imagePath: m.imagePath,
                                reactions: _localReactions[m.id],
                                onReact: (emoji) => _addReaction(m.id, emoji),
                                onLongPress: () => _showMessageActions(context, m),
                              ),
                            ),
                          ),
                        );
                      },
                    ),

                    if (_showJump)
                      Positioned(
                        right: 12,
                        bottom: 82,
                        child: ScrollToBottomButton(onTap: _jumpToBottom),
                      ),
                  ],
                ),
              ),

              if (_replyTo != null)
                Container(
                  margin: const EdgeInsets.fromLTRB(12, 6, 12, 0),
                  padding: const EdgeInsets.all(10),
                  decoration: BoxDecoration(
                    color: themed.colorScheme.surface.withOpacity(.6),
                    borderRadius: BorderRadius.circular(12),
                    border: Border.all(color: themed.colorScheme.outline.withOpacity(.25)),
                  ),
                  child: Row(
                    children: [
                      const Icon(Icons.reply, size: 18),
                      const SizedBox(width: 8),
                      Expanded(child: Text(_replyTo!.text, maxLines: 2, overflow: TextOverflow.ellipsis)),
                      IconButton(icon: const Icon(Icons.close), onPressed: () => setState(() => _replyTo = null)),
                    ],
                  ),
                ),

              if (_someoneTyping) TypingLine(names: _typingUsers.toList()),

              Composer(
                controller: _ctrl,
                focusNode: _composerFocus,
                pickedImagePath: _pickedImage,
                leftButton: PlusButton(
                  onPinText: _pinText,
                  onPropose: (title, description, link, due, attachments) async {
                    await context.read<TeamCubit>().proposeAssignment(
                      title: title, description: description, link: link, due: due, attachments: attachments,
                    );
                  },
                ),
                onPickImage: () async {
                  final res = await ImagePicker().pickImage(source: ImageSource.gallery);
                  if (res != null) setState(() => _pickedImage = res.path);
                },
                onClearPicked: () => setState(() => _pickedImage = null),
                onOpenEmoji: () {
                  _composerFocus.requestFocus();
                  services.SystemChannels.textInput.invokeMethod('TextInput.show');
                },
                onSend: () => _send(context),
              ),
            ],
          );
        },
      ),
    );
  }

  void _showMessageActions(BuildContext context, Message m) {
    final myUid = Supabase.instance.client.auth.currentUser?.id;

    const quick = ['вќ¤пёЏ', 'рџ‚', 'рџ‘Ќ', 'рџ”Ґ', 'рџ‘Џ', 'рџ™Џ'];
    showModalBottomSheet(
      context: context,
      showDragHandle: true,
      builder: (_) => SafeArea(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
              child: Wrap(
                spacing: 10,
                children: quick
                    .map((e) => GestureDetector(
                          onTap: () {
                            Navigator.pop(context);
                            _addReaction(m.id, e);
                          },
                          child: const Text('рџ™‚', style: TextStyle(fontSize: 0)), // spacer to keep height
                        ))
                    .toList(),
              ),
            ),
            const Divider(height: 0),
            ListTile(
              leading: const Icon(Icons.reply),
              title: const Text('РћС‚РІРµС‚РёС‚СЊ'),
              onTap: () {
                Navigator.pop(context);
                setState(() => _replyTo = m);
              },
            ),
            if (m.text.isNotEmpty)
              ListTile(
                leading: const Icon(Icons.copy_all_outlined),
                title: const Text('РљРѕРїРёСЂРѕРІР°С‚СЊ С‚РµРєСЃС‚'),
                onTap: () {
                  Navigator.pop(context);
                  services.Clipboard.setData(services.ClipboardData(text: m.text));
                  ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('РЎРєРѕРїРёСЂРѕРІР°РЅРѕ')));
                },
              ),
            if (m.text.isNotEmpty)
              ListTile(
                leading: const Icon(Icons.push_pin_outlined),
                title: const Text('Р—Р°РєСЂРµРїРёС‚СЊ'),
                onTap: () {
                  Navigator.pop(context);
                  _pinFromMessage(m);
                },
              ),
            if (m.isMine(myUid) && DateTime.now().difference(m.at) <= const Duration(hours: 2))
              ListTile(
                leading: const Icon(Icons.delete_outline),
                title: const Text('РЈРґР°Р»РёС‚СЊ СЃРѕРѕР±С‰РµРЅРёРµ'),
                onTap: () async {
                  Navigator.pop(context);
                  final ok = await showDialog<bool>(
                    context: context,
                    builder: (_) => AlertDialog(
                      title: const Text('РЈРґР°Р»РёС‚СЊ СЃРѕРѕР±С‰РµРЅРёРµ?'),
                      content: const Text('РњРѕР¶РЅРѕ СѓРґР°Р»РёС‚СЊ РІ С‚РµС‡РµРЅРёРµ 2 С‡Р°СЃРѕРІ РїРѕСЃР»Рµ РѕС‚РїСЂР°РІРєРё.'),
                      actions: [
                        TextButton(onPressed: () => Navigator.pop(context, false), child: const Text('РћС‚РјРµРЅР°')),
                        FilledButton(onPressed: () => Navigator.pop(context, true), child: const Text('РЈРґР°Р»РёС‚СЊ')),
                      ],
                    ),
                  );
                  if (ok == true) {
                    context.read<TeamCubit>().removeMessage(m.id);
                  }
                },
              ),
          ],
        ),
      ),
    );
  }

  void _showAssignmentActions(BuildContext context, Message m) async {
    final st = context.read<TeamCubit>().state;
    final a = st.assignments.firstWhere(
      (e) => e.id == m.assignmentId,
      orElse: () => st.published.isNotEmpty ? st.published.last : st.assignments.first,
    );

    final canEdit = st.isStarosta || true; // С‚СѓС‚ РјРѕР¶РЅРѕ РґРѕРїРѕР»РЅРёС‚СЊ СЂРµР°Р»СЊРЅСѓСЋ РїСЂРѕРІРµСЂРєСѓ РїСЂР°РІ

    showModalBottomSheet(
      context: context,
      showDragHandle: true,
      builder: (_) => SafeArea(
        child: Wrap(
          children: [
            ListTile(
              leading: const Icon(Icons.push_pin_outlined),
              title: const Text('Р—Р°РєСЂРµРїРёС‚СЊ'),
              onTap: () {
                Navigator.pop(context);
                _pinAssignment(a);
              },
            ),
            if (canEdit)
              ListTile(
                leading: const Icon(Icons.edit_outlined),
                title: const Text('Р РµРґР°РєС‚РёСЂРѕРІР°С‚СЊ Р·Р°РґР°РЅРёРµ'),
                onTap: () async {
                  Navigator.pop(context);
                  final res = await _editAssignmentDialog(context, a);
                  if (res == null) return;
                  await context.read<TeamCubit>().updateAssignment(
                        a.id,
                        title: res.$1,
                        description: res.$2,
                        link: res.$3,
                        due: res.$4,
                        attachments: res.$5,
                      );
                },
              ),
            if (canEdit)
              ListTile(
                leading: const Icon(Icons.delete_outline),
                title: const Text('РЈРґР°Р»РёС‚СЊ Р·Р°РґР°РЅРёРµ'),
                onTap: () async {
                  Navigator.pop(context);
                  await context.read<TeamCubit>().removeAssignment(a.id);
                },
              ),
          ],
        ),
      ),
    );
  }

  Future<(String, String, String?, String?, List<Map<String, String>>)?> _editAssignmentDialog(
      BuildContext context, Assignment a) async {
    final title = TextEditingController(text: a.title);
    final desc  = TextEditingController(text: a.description);
    final link  = TextEditingController(text: a.link ?? '');
    final due   = TextEditingController(text: a.due ?? '');
    final files = [...a.attachments];

    return showDialog<(String, String, String?, String?, List<Map<String, String>>)>(
      context: context,
      builder: (_) => StatefulBuilder(
        builder: (context, setState) => AlertDialog(
          title: const Center(child: Text('Р РµРґР°РєС‚РёСЂРѕРІР°С‚СЊ Р·Р°РґР°РЅРёРµ', style: TextStyle(fontWeight: FontWeight.w700))),
          content: SingleChildScrollView(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                TextField(controller: title, decoration: const InputDecoration(labelText: 'РќР°Р·РІР°РЅРёРµ')),
                const SizedBox(height: 8),
                TextField(
                  controller: desc, minLines: 3, maxLines: 6,
                  decoration: const InputDecoration(labelText: 'Р§С‚Рѕ СЃРґРµР»Р°С‚СЊ'),
                ),
                const SizedBox(height: 8),
                TextField(controller: link, decoration: const InputDecoration(labelText: 'РЎСЃС‹Р»РєР° (РѕРїС†.)')),
                const SizedBox(height: 8),
                InkWell(
                  borderRadius: BorderRadius.circular(12),
                  onTap: () async {
                    final now = DateTime.now();
                    final picked = await showDatePicker(
                      context: context,
                      firstDate: now,
                      lastDate: now.add(const Duration(days: 365)),
                      initialDate: now,
                    );
                    if (picked != null) {
                      due.text = '${picked.day.toString().padLeft(2, '0')}.${picked.month.toString().padLeft(2, '0')}';
                      setState(() {});
                    }
                  },
                  child: InputDecorator(
                    decoration: const InputDecoration(labelText: 'РЎСЂРѕРє'),
                    child: Align(alignment: Alignment.centerLeft, child: Text(due.text.isEmpty ? 'РќРµ РІС‹Р±СЂР°РЅРѕ' : due.text)),
                  ),
                ),
                const SizedBox(height: 8),
                for (final f in files)
                  ListTile(
                    dense: true,
                    leading: const Icon(Icons.insert_drive_file_outlined),
                    title: Text(f['name'] ?? ''),
                    subtitle: Text(f['path'] ?? ''),
                  ),
              ],
            ),
          ),
          actions: [
            TextButton(onPressed: () => Navigator.pop(context), child: const Text('РћС‚РјРµРЅР°')),
            FilledButton(
              onPressed: () {
                if (title.text.trim().isEmpty || desc.text.trim().isEmpty) return;
                Navigator.pop(context, (
                  title.text.trim(),
                  desc.text.trim(),
                  link.text.trim().isEmpty ? null : link.text.trim(),
                  due.text.trim().isEmpty ? null : due.text.trim(),
                  files
                ));
              },
              child: const Text('РЎРѕС…СЂР°РЅРёС‚СЊ'),
            ),
          ],
        ),
      ),
    );
  }
}
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:file_picker/file_picker.dart';
import 'package:open_filex/open_filex.dart';
import 'package:path_provider/path_provider.dart';
import '../models/file_item.dart';
import '../state/team_cubit.dart';
import 'assignments/assignments_tab.dart';


class FilesTab extends StatelessWidget {
  const FilesTab({super.key});

  Future<void> _pickAndSave(BuildContext context) async {
    final res = await FilePicker.platform.pickFiles(allowMultiple: false);
    if (res == null || res.files.single.path == null) return;
    final source = File(res.files.single.path!);

    final dir = await getApplicationDocumentsDirectory();
    final destPath = '${dir.path}/${res.files.single.name}';
    await source.copy(destPath);

    final state = context.read<TeamCubit>().state;
    final list = [...state.files, FileItem(id: DateTime.now().millisecondsSinceEpoch.toString(), name: res.files.single.name, path: destPath)];
    await context.read<TeamCubit>().setFiles(list);
  }

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<TeamCubit, TeamState>(
      builder: (context, state) {
        return Column(
          children: [
            SafeArea(
              bottom: false,
              child: Padding(
                padding: const EdgeInsets.all(12),
                child: Row(
                  children: [
                    ElevatedButton.icon(
                      onPressed: () => _pickAndSave(context),
                      icon: const Icon(Icons.upload_file),
                      label: const Text('Р—Р°РіСЂСѓР·РёС‚СЊ С„Р°Р№Р»'),
                    ),
                    const SizedBox(width: 12),
                    Text('Р¤Р°Р№Р»С‹ С…СЂР°РЅСЏС‚СЃСЏ Р»РѕРєР°Р»СЊРЅРѕ', style: TextStyle(color: Colors.grey.shade400)),
                  ],
                ),
              ),
            ),
            Expanded(
              child: ListView.separated(
                padding: const EdgeInsets.all(16),
                itemCount: state.files.length,
                separatorBuilder: (_, __) => const SizedBox(height: 8),
                itemBuilder: (_, i) {
                  final f = state.files[i];
                  return ListTile(
                    onTap: () => OpenFilex.open(f.path),
                    leading: const Icon(Icons.insert_drive_file_outlined),
                    title: Text(f.name, maxLines: 1, overflow: TextOverflow.ellipsis),
                    subtitle: Text(f.path, maxLines: 1, overflow: TextOverflow.ellipsis),
                    trailing: IconButton(
                      icon: const Icon(Icons.delete_outline),
                      onPressed: () {
                        final list = [...state.files]..removeAt(i);
                        context.read<TeamCubit>().setFiles(list);
                      },
                    ),
                  );
                },
              ),
            ),
          ],
        );
      },
    );
  }
}
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import '../../state/team_cubit.dart';
import '../../models/assignment.dart';
import '../../assignment_details_screen.dart';
import 'assignment_card.dart';

enum _Filter { all, active, overdue, draft }

class AssignmentsTab extends StatefulWidget {
  final Object? team; // СЃРѕРІРјРµСЃС‚РёРјРѕСЃС‚СЊ СЃ РІС‹Р·РѕРІРѕРј AssignmentsTab(team: state.team)
  const AssignmentsTab({super.key, this.team});

  @override
  State<AssignmentsTab> createState() => _AssignmentsTabState();
}

class _AssignmentsTabState extends State<AssignmentsTab> {
  _Filter _filter = _Filter.all;

  @override
  Widget build(BuildContext context) {
    final st = context.watch<TeamCubit>().state;
    final items = _apply(st);

    return Column(
      children: [
        const SizedBox(height: 8),
        _Filters(
          value: _filter,
          hasDraft: st.hasPending,
          onChanged: (v) => setState(() => _filter = v),
        ),
        Expanded(
          child: ListView.separated(
            padding: const EdgeInsets.fromLTRB(12, 8, 12, 12),
            itemCount: items.length,
            separatorBuilder: (_, __) => const SizedBox(height: 10),
            itemBuilder: (_, i) {
              final a = items[i];
              final isDraft = st.pending?.id == a.id;
              return AssignmentCard(
                assignment: a,
                isDraft: isDraft,
                canPublish: isDraft && st.isStarosta,
                onOpen: () => Navigator.of(context).push(
                  MaterialPageRoute(
                    builder: (_) => BlocProvider.value(
                      value: context.read<TeamCubit>(),
                      child: AssignmentDetailsScreen(assignmentId: a.id),
                    ),
                  ),
                ),
                onPublish: () => context.read<TeamCubit>().publishPendingManually(),
                onVote: () => context.read<TeamCubit>().voteForPending(),
                onEdit: () async {
                  final res = await _editAssignmentDialog(context, a);
                  if (res == null) return;
                  await context.read<TeamCubit>().updateAssignment(
                        a.id,
                        title: res.$1,
                        description: res.$2,
                        link: res.$3,
                        due: res.$4,
                        attachments: res.$5,
                      );
                },
                onDelete: () => context.read<TeamCubit>().removeAssignment(a.id),
              );
            },
          ),
        ),
      ],
    );
  }

  List<Assignment> _apply(TeamState st) {
    final now = DateTime.now();
    bool overdue(Assignment a) {
      if (a.due == null) return false;
      final parts = a.due!.split('.');
      if (parts.length != 2) return false;
      final d = int.tryParse(parts[0]) ?? 1;
      final m = int.tryParse(parts[1]) ?? 1;
      final due = DateTime(now.year, m, d);
      return due.isBefore(DateTime(now.year, now.month, now.day));
    }

    Iterable<Assignment> base = st.assignments;
    switch (_filter) {
      case _Filter.all:
        break;
      case _Filter.active:
        base = base.where((a) => !overdue(a));
        break;
      case _Filter.overdue:
        base = base.where(overdue);
        break;
      case _Filter.draft:
        final p = st.pending;
        base = p == null ? const Iterable.empty() : [p];
        break;
    }
    return base.toList();
  }

  Future<(String, String, String?, String?, List<Map<String, String>>)?> _editAssignmentDialog(
      BuildContext context, Assignment a) async {
    final title = TextEditingController(text: a.title);
    final desc  = TextEditingController(text: a.description);
    final link  = TextEditingController(text: a.link ?? '');
    final due   = TextEditingController(text: a.due ?? '');
    final files = [...a.attachments];

    return showDialog<(String, String, String?, String?, List<Map<String, String>>)>(
      context: context,
      builder: (_) => StatefulBuilder(
        builder: (context, setState) => AlertDialog(
          title: const Center(child: Text('Р РµРґР°РєС‚РёСЂРѕРІР°С‚СЊ Р·Р°РґР°РЅРёРµ', style: TextStyle(fontWeight: FontWeight.w700))),
          content: SingleChildScrollView(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                TextField(controller: title, decoration: const InputDecoration(labelText: 'РќР°Р·РІР°РЅРёРµ')),
                const SizedBox(height: 8),
                TextField(controller: desc, minLines: 3, maxLines: 6, decoration: const InputDecoration(labelText: 'Р§С‚Рѕ СЃРґРµР»Р°С‚СЊ')),
                const SizedBox(height: 8),
                TextField(controller: link, decoration: const InputDecoration(labelText: 'РЎСЃС‹Р»РєР° (РѕРїС†.)')),
                const SizedBox(height: 8),
                TextField(controller: due, decoration: const InputDecoration(labelText: 'РЎСЂРѕРє (РЅР°РїСЂ. 20.09)')),
                const SizedBox(height: 8),
                for (final f in files)
                  ListTile(
                    dense: true,
                    leading: const Icon(Icons.insert_drive_file_outlined),
                    title: Text(f['name'] ?? ''),
                    subtitle: Text(f['path'] ?? ''),
                  ),
              ],
            ),
          ),
          actions: [
            TextButton(onPressed: () => Navigator.pop(context), child: const Text('РћС‚РјРµРЅР°')),
            FilledButton(
              onPressed: () {
                if (title.text.trim().isEmpty || desc.text.trim().isEmpty) return;
                Navigator.pop(context, (
                  title.text.trim(),
                  desc.text.trim(),
                  link.text.trim().isEmpty ? null : link.text.trim(),
                  due.text.trim().isEmpty ? null : due.text.trim(),
                  files
                ));
              },
              child: const Text('РЎРѕС…СЂР°РЅРёС‚СЊ'),
            ),
          ],
        ),
      ),
    );
  }
}

class _Filters extends StatelessWidget {
  final _Filter value;
  final bool hasDraft;
  final ValueChanged<_Filter> onChanged;
  const _Filters({required this.value, required this.hasDraft, required this.onChanged});

  @override
  Widget build(BuildContext context) {
    final cs = Theme.of(context).colorScheme;
    Widget chip(_Filter f, String label) {
      final sel = value == f;
      return ChoiceChip(
        label: Text(label),
        selected: sel,
        onSelected: (_) => onChanged(f),
        selectedColor: cs.primary.withOpacity(.12),
      );
    }

    return SingleChildScrollView(
      scrollDirection: Axis.horizontal,
      padding: const EdgeInsets.symmetric(horizontal: 12),
      child: Row(
        children: [
          chip(_Filter.all, 'Р’СЃРµ'),
          const SizedBox(width: 8),
          chip(_Filter.active, 'РђРєС‚РёРІРЅС‹Рµ'),
          const SizedBox(width: 8),
          chip(_Filter.overdue, 'РџСЂРѕСЃСЂРѕС‡РµРЅРЅС‹Рµ'),
          if (hasDraft) ...[
            const SizedBox(width: 8),
            chip(_Filter.draft, 'Р§РµСЂРЅРѕРІРёРє'),
          ],
        ],
      ),
    );
  }
}
import 'package:flutter/material.dart';
import '../../models/assignment.dart';

class AssignmentCard extends StatelessWidget {
  final Assignment assignment;
  final bool isDraft;
  final bool canPublish;
  final VoidCallback onOpen;
  final VoidCallback? onPublish;
  final VoidCallback? onVote;
  final VoidCallback? onEdit;
  final VoidCallback? onDelete;

  const AssignmentCard({
    super.key,
    required this.assignment,
    required this.onOpen,
    this.onPublish,
    this.onVote,
    this.onEdit,
    this.onDelete,
    this.isDraft = false,
    this.canPublish = false,
  });

  @override
  Widget build(BuildContext context) {
    final cs = Theme.of(context).colorScheme;
    final bg = isDraft ? Colors.amber.withOpacity(.14) : cs.surfaceContainerHigh;
    final border = isDraft ? Colors.orangeAccent : cs.outlineVariant;

    return Container(
      decoration: BoxDecoration(
        color: bg,
        borderRadius: BorderRadius.circular(14),
        border: Border.all(color: border.withOpacity(.6), width: .5),
      ),
      padding: const EdgeInsets.all(12),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(isDraft ? Icons.edit_note_outlined : Icons.assignment_outlined, color: isDraft ? Colors.orangeAccent : cs.primary),
              const SizedBox(width: 8),
              Expanded(
                child: Text(assignment.title, style: const TextStyle(fontWeight: FontWeight.w700)),
              ),
              PopupMenuButton<String>(
                itemBuilder: (_) => const [
                  PopupMenuItem(value: 'open', child: Text('РћС‚РєСЂС‹С‚СЊ')),
                  PopupMenuItem(value: 'edit', child: Text('Р РµРґР°РєС‚РёСЂРѕРІР°С‚СЊ')),
                  PopupMenuItem(value: 'delete', child: Text('РЈРґР°Р»РёС‚СЊ')),
                ],
                onSelected: (v) {
                  if (v == 'open') onOpen();
                  if (v == 'edit') onEdit?.call();
                  if (v == 'delete') onDelete?.call();
                },
              ),
            ],
          ),
          if (assignment.due != null)
            Padding(
              padding: const EdgeInsets.only(top: 4),
              child: Text('РґРѕ ${assignment.due}', style: Theme.of(context).textTheme.bodySmall),
            ),
          if (assignment.description.isNotEmpty)
            Padding(
              padding: const EdgeInsets.only(top: 8),
              child: Text(assignment.description, maxLines: 3, overflow: TextOverflow.ellipsis),
            ),
          const SizedBox(height: 8),
          Row(
            children: [
              TextButton(onPressed: onOpen, child: const Text('РћС‚РєСЂС‹С‚СЊ')),
              const Spacer(),
              if (isDraft && !canPublish)
                OutlinedButton.icon(onPressed: onVote, icon: const Icon(Icons.how_to_vote_outlined, size: 18), label: const Text('Р—Р°')),
              if (canPublish)
                FilledButton.icon(onPressed: onPublish, icon: const Icon(Icons.publish_outlined, size: 18), label: const Text('РћРїСѓР±Р»РёРєРѕРІР°С‚СЊ')),
              if (isDraft) ...[
                const SizedBox(width: 8),
                Chip(label: Text('${assignment.votes}/3'), visualDensity: VisualDensity.compact),
              ],
            ],
          ),
        ],
      ),
    );
  }
}
import 'package:flutter/foundation.dart';

/// Р•РґРёРЅР°СЏ С‚РѕС‡РєР° РїСЂР°РІРґС‹ РґР»СЏ СЂРµР¶РёРјР° РѕС‚РѕР±СЂР°Р¶РµРЅРёСЏ Р·Р°РґР°РЅРёР№.
/// false = СЃРїРёСЃРѕРє, true = СЃРµС‚РєР°
class AssignmentsViewMode {
  static final ValueNotifier<bool> grid = ValueNotifier<bool>(false);
}
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import '../../state/team_cubit.dart';
import '../../models/message.dart';
import '../../models/assignment.dart';

class AssignmentBubble extends StatelessWidget {
  final Message message;
  final bool isDraft; // true -> С‡РµСЂРЅРѕРІРёРє, false -> РѕРїСѓР±Р»РёРєРѕРІР°РЅРѕ
  final String time;
  final VoidCallback? onOpen;
  final VoidCallback? onPublish; // РґР»СЏ СЃС‚Р°СЂРѕСЃС‚С‹
  final VoidCallback? onVote;    // РґР»СЏ РѕР±С‹С‡РЅС‹С…
  final VoidCallback? onLongPress;
  final VoidCallback? onPin;

  const AssignmentBubble({
    super.key,
    required this.message,
    required this.isDraft,
    required this.time,
    this.onOpen,
    this.onPublish,
    this.onVote,
    this.onLongPress,
    this.onPin,
  });

  @override
  Widget build(BuildContext context) {
    final st = context.watch<TeamCubit>().state;

    Assignment? a;
    final byId = st.assignments.where((e) => e.id == message.assignmentId);
    if (byId.isNotEmpty) a = byId.first;
    else if (st.published.isNotEmpty) a = st.published.last;
    if (a == null) return const SizedBox.shrink();

    final cs = Theme.of(context).colorScheme;
    final isMe = false; // СЃРёСЃС‚РµРјРЅРѕРµ СЃРѕРѕР±С‰РµРЅРёРµ
    final bg   = isDraft ? cs.secondaryContainer.withOpacity(.35)
                         : cs.primary.withOpacity(.10);
    final border = isDraft ? Colors.amber : cs.primary;

    final titleColor = Colors.black.withOpacity(.92);
    final dueColor   = Colors.black.withOpacity(.60);

    return GestureDetector(
      onLongPress: onLongPress,
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.end,
        children: [
          _systemAvatar(),
          const SizedBox(width: 8),
          Flexible(
            child: Container(
              padding: const EdgeInsets.fromLTRB(12, 10, 12, 8),
              decoration: BoxDecoration(
                color: bg,
                borderRadius: BorderRadius.circular(16),
                border: Border.all(color: border.withOpacity(.45), width: .7),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      Icon(isDraft ? Icons.edit_note_outlined : Icons.assignment_outlined,
                          size: 18, color: border),
                      const SizedBox(width: 6),
                      Text(
                        isDraft ? 'Р§РµСЂРЅРѕРІРёРє Р·Р°РґР°РЅРёСЏ' : 'Р—Р°РґР°РЅРёРµ',
                        style: const TextStyle(fontWeight: FontWeight.w700),
                      ),
                      const Spacer(),
                      Text(time, style: TextStyle(fontSize: 12, color: Colors.grey.shade700)),
                      const SizedBox(width: 4),
                      _More(onPin: onPin, onLongPress: onLongPress),
                    ],
                  ),
                  const SizedBox(height: 8),

                  Text(a.title,
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                      style: TextStyle(
                        fontWeight: FontWeight.w600,
                        color: titleColor,
                      )),
                  if (a.due != null)
                    Padding(
                      padding: const EdgeInsets.only(top: 2),
                      child: Text('РґРѕ ${a.due}',
                          style: TextStyle(fontSize: 12, color: dueColor)),
                    ),
                  if ((a.description).trim().isNotEmpty) ...[
                    const SizedBox(height: 6),
                    Text(a.description,
                        maxLines: 3,
                        overflow: TextOverflow.ellipsis,
                        style: TextStyle(color: Colors.black.withOpacity(.85))),
                  ],

                  const SizedBox(height: 8),
                  Row(
                    children: [
                      TextButton(onPressed: onOpen, child: const Text('РћС‚РєСЂС‹С‚СЊ')),
                      const Spacer(),
                      if (isDraft && st.isStarosta)
                        FilledButton.icon(
                          onPressed: onPublish,
                          icon: const Icon(Icons.upload_rounded, size: 18),
                          label: const Text('РћРїСѓР±Р»РёРєРѕРІР°С‚СЊ'),
                        ),
                      if (isDraft && !st.isStarosta)
                        OutlinedButton.icon(
                          onPressed: onVote,
                          icon: const Icon(Icons.how_to_vote_outlined, size: 18),
                          label: const Text('Р—Р°'),
                        ),
                      if (!isDraft)
                        Container(
                          padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 6),
                          decoration: BoxDecoration(
                            color: Colors.green.withOpacity(.12),
                            borderRadius: BorderRadius.circular(20),
                            border: Border.all(color: Colors.green.withOpacity(.35)),
                          ),
                          child: Row(
                            children: const [
                              Icon(Icons.check_circle, size: 16, color: Colors.green),
                              SizedBox(width: 6),
                              Text('РћРїСѓР±Р»РёРєРѕРІР°РЅРѕ',
                                  style: TextStyle(fontWeight: FontWeight.w600, color: Colors.green)),
                            ],
                          ),
                        ),
                    ],
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _systemAvatar() {
    return const CircleAvatar(
      radius: 14,
      child: Text('РЎР', style: TextStyle(fontSize: 11)),
    );
  }
}

class _More extends StatelessWidget {
  final VoidCallback? onPin;
  final VoidCallback? onLongPress;
  const _More({this.onPin, this.onLongPress});

  @override
  Widget build(BuildContext context) {
    return PopupMenuButton<String>(
      tooltip: 'Р”РµР№СЃС‚РІРёСЏ',
      onSelected: (v) {
        if (v == 'pin' && onPin != null) onPin!();
        if (v == 'more' && onLongPress != null) onLongPress!();
      },
      itemBuilder: (c) => const [
        PopupMenuItem(value: 'pin', child: Text('Р—Р°РєСЂРµРїРёС‚СЊ')),
        PopupMenuItem(value: 'more', child: Text('Р•С‰С‘вЂ¦')),
      ],
      child: const Padding(
        padding: EdgeInsets.all(4.0),
        child: Icon(Icons.more_vert, size: 18),
      ),
    );
  }
}
import 'dart:io';
import 'package:flutter/material.dart';

class Composer extends StatelessWidget {
  final TextEditingController controller;
  final String? pickedImagePath;
  final Widget? leftButton;
  final VoidCallback onOpenEmoji;     // РѕС‚РєСЂС‹С‚СЊ СЃРёСЃС‚РµРјРЅСѓСЋ РєР»Р°РІРёР°С‚СѓСЂСѓ / С„РѕРєСѓСЃ
  final VoidCallback onSend;
  final VoidCallback onClearPicked;
  final Future<void> Function() onPickImage;
  final FocusNode? focusNode;

  const Composer({
    super.key,
    required this.controller,
    required this.pickedImagePath,
    required this.onOpenEmoji,
    required this.onSend,
    required this.onClearPicked,
    required this.onPickImage,
    this.leftButton,
    this.focusNode,
  });

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);

    return SafeArea(
      top: false,
      child: Padding(
        // Р±РµР· С…РёРЅС‚РѕРІ/РїРѕРґРїРёСЃРµР№ СЃРЅРёР·Сѓ
        padding: const EdgeInsets.fromLTRB(12, 10, 12, 12),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            if (pickedImagePath != null)
              Container(
                margin: const EdgeInsets.only(bottom: 8),
                padding: const EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: theme.colorScheme.surface,
                  borderRadius: BorderRadius.circular(12),
                  border: Border.all(color: theme.colorScheme.outline.withOpacity(.2)),
                ),
                child: Row(
                  children: [
                    ClipRRect(
                      borderRadius: BorderRadius.circular(8),
                      child: Image.file(
                        File(pickedImagePath!),
                        height: 44,
                        width: 44,
                        fit: BoxFit.cover,
                      ),
                    ),
                    const SizedBox(width: 10),
                    const Expanded(child: Text('Р’Р»РѕР¶РµРЅРёРµ РіРѕС‚РѕРІРѕ')),
                    IconButton(icon: const Icon(Icons.close), onPressed: onClearPicked),
                  ],
                ),
              ),

            Row(
              crossAxisAlignment: CrossAxisAlignment.end,
              children: [
                leftButton ?? const SizedBox(width: 0),
                if (leftButton != null) const SizedBox(width: 8),

                Expanded(
                  child: Container(
                    decoration: BoxDecoration(
                      color: theme.colorScheme.surface,
                      borderRadius: BorderRadius.circular(24),
                      border: Border.all(color: theme.colorScheme.outline.withOpacity(.2)),
                    ),
                    padding: const EdgeInsets.symmetric(horizontal: 10),
                    child: Row(
                      crossAxisAlignment: CrossAxisAlignment.end,
                      children: [
                        IconButton(
                          icon: const Icon(Icons.emoji_emotions_outlined),
                          onPressed: onOpenEmoji, // РїСЂРѕСЃС‚Рѕ РѕС‚РєСЂС‹РІР°РµРј РєР»Р°РІРёР°С‚СѓСЂСѓ/РґР°С‘Рј С„РѕРєСѓСЃ
                          tooltip: 'Р­РјРѕРґР·Рё',
                        ),

                        // РѕРґРЅР° СЃС‚СЂРѕРєР° в†’ Р°РІС‚Рѕ-СЂРѕСЃС‚ РґРѕ 6 (Р±РµР· РіРѕСЂРёР·РѕРЅС‚Р°Р»СЊРЅРѕРіРѕ СЃРєСЂРѕР»Р»Р°)
                        Expanded(
                          child: TextField(
                            focusNode: focusNode,
                            controller: controller,
                            keyboardType: TextInputType.multiline,
                            textInputAction: TextInputAction.send, // Enter вЂ” РѕС‚РїСЂР°РІРєР°
                            minLines: 1,
                            maxLines: 6,
                            decoration: const InputDecoration(
                              hintText: 'РЎРѕРѕР±С‰РµРЅРёРµ',
                              border: InputBorder.none,
                              isCollapsed: true,
                              contentPadding: EdgeInsets.symmetric(vertical: 12),
                            ),
                            onSubmitted: (_) => onSend(),
                          ),
                        ),

                        IconButton(
                          icon: const Icon(Icons.camera_alt_outlined),
                          onPressed: () => onPickImage(), // РёР· РіР°Р»РµСЂРµРё (gif РїРѕРґРґРµСЂР¶РёРІР°СЋС‚СЃСЏ РєР°Рє С„Р°Р№Р»)
                          tooltip: 'РР·РѕР±СЂР°Р¶РµРЅРёРµ',
                        ),
                      ],
                    ),
                  ),
                ),

                const SizedBox(width: 8),
                IconButton(
                  icon: const Icon(Icons.send_rounded),
                  onPressed: onSend,
                  tooltip: 'РћС‚РїСЂР°РІРёС‚СЊ',
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:emoji_picker_flutter/emoji_picker_flutter.dart';

/// РњРѕРґР°Р»СЊРЅРѕРµ РѕРєРЅРѕ СЃ СЌРјРѕРґР·Рё (СЃРѕРІСЂРµРјРµРЅРЅС‹Р№ UX):
/// - СЃРІРµСЂС…Сѓ РїР°РЅРµР»СЊ СЃ РєРЅРѕРїРєРѕР№ В«РєР»Р°РІРёР°С‚СѓСЂР°В» вЂ” Р·Р°РєСЂС‹РІР°РµС‚ РјРѕРґР°Р»РєСѓ Рё СЃСЂР°Р·Сѓ С„РѕРєСѓСЃРёС‚ РїРѕР»Рµ РІРІРѕРґР°;
/// - СЌРјРѕРґР·Рё РІСЃС‚Р°РІР»СЏСЋС‚СЃСЏ РёРјРµРЅРЅРѕ РІ РїРѕР·РёС†РёСЋ РєСѓСЂСЃРѕСЂР°.
void showEmojiPickerSheet(
  BuildContext context, {
  required TextEditingController controller,
  FocusNode? textFieldFocus, // С‡С‚РѕР±С‹ РІРµСЂРЅСѓС‚СЊ РєР»Р°РІРёР°С‚СѓСЂСѓ РїРѕ РєРЅРѕРїРєРµ
}) {
  showModalBottomSheet(
    context: context,
    useSafeArea: true,
    isScrollControlled: true,
    showDragHandle: true,
    builder: (sheetCtx) => SizedBox(
      height: 340,
      child: Column(
        children: [
          // Р’РµСЂС…РЅСЏСЏ РїР°РЅРµР»СЊ РґРµР№СЃС‚РІРёР№ (Р»РµРіРєРѕРµ РїРµСЂРµРєР»СЋС‡РµРЅРёРµ РЅР° РєР»Р°РІРёР°С‚СѓСЂСѓ)
          Row(
            children: [
              const SizedBox(width: 12),
              const Padding(
                padding: EdgeInsets.symmetric(vertical: 10),
                child: Text('Р­РјРѕРґР·Рё', style: TextStyle(fontWeight: FontWeight.w600)),
              ),
              const Spacer(),
              IconButton(
                tooltip: 'РљР»Р°РІРёР°С‚СѓСЂР°',
                onPressed: () {
                  Navigator.pop(sheetCtx);
                  // РІРµСЂРЅСѓС‚СЊ С„РѕРєСѓСЃ РІ РїРѕР»Рµ; РєР»Р°РІРёР°С‚СѓСЂР° РїРѕРґРЅРёРјРµС‚СЃСЏ СЃР°РјР°
                  if (textFieldFocus != null) {
                    // С‡СѓС‚РєР° РѕС‚Р»РѕР¶РёРј, С‡С‚РѕР±С‹ РјРѕРґР°Р»РєР° СѓСЃРїРµР»Р° Р·Р°РєСЂС‹С‚СЊСЃСЏ
                    Future.microtask(() => textFieldFocus.requestFocus());
                  }
                },
                icon: const Icon(Icons.keyboard_alt_outlined),
              ),
            ],
          ),
          const Divider(height: 0),

          // РЎР°Рј РїРёРєРµСЂ
          Expanded(
            child: EmojiPicker(
              onEmojiSelected: (_, emoji) {
                final sel = controller.selection;
                final text = controller.text;
                final start = sel.start >= 0 ? sel.start : text.length;
                final end   = sel.end   >= 0 ? sel.end   : text.length;
                controller.value = TextEditingValue(
                  text: text.replaceRange(start, end, emoji.emoji),
                  selection: TextSelection.collapsed(offset: start + emoji.emoji.length),
                );
              },
              config: const Config(
                bottomActionBarConfig: BottomActionBarConfig(enabled: true),
                emojiViewConfig: EmojiViewConfig(emojiSizeMax: 32),
                categoryViewConfig: CategoryViewConfig(
                  indicatorColor: Colors.grey,
                  iconColorSelected: Colors.white,
                ),
              ),
            ),
          ),
        ],
      ),
    ),
  );
}
import 'dart:io';
import 'package:flutter/services.dart' as services;
import 'package:flutter/widgets.dart';

const _channel = services.MethodChannel('keyboard_image_channel');

class KeyboardCaptureController {
  Future<void> focus() async {
    if (Platform.isAndroid) {
      await _channel.invokeMethod('focus');
    }
  }

  Future<void> dispose() async {
    if (Platform.isAndroid) {
      await _channel.invokeMethod('dispose');
    }
  }
}

typedef KeyboardPicked = void Function(String path);

class KeyboardCapture extends StatefulWidget {
  final KeyboardCaptureController controller;
  final KeyboardPicked onPicked;

  const KeyboardCapture({
    super.key,
    required this.controller,
    required this.onPicked,
  });

  @override
  State<KeyboardCapture> createState() => _KeyboardCaptureState();
}

class _KeyboardCaptureState extends State<KeyboardCapture> {
  @override
  void initState() {
    super.initState();
    _channel.setMethodCallHandler((call) async {
      if (call.method == 'onPicked') {
        final path = call.arguments as String;
        widget.onPicked(path);
      }
    });
  }

  @override
  Widget build(BuildContext context) => const SizedBox.shrink();

  @override
  void dispose() {
    _channel.setMethodCallHandler(null);
    super.dispose();
  }
}
// =============================
// FILE: lib/src/ui/learning/tabs/chat/message_bubble.dart
// =============================

import 'dart:io';
import 'dart:math' as math;
import 'package:flutter/material.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

import '../../models/message.dart';
import 'profile_avatar.dart';

class MessageBubble extends StatelessWidget {
  final Message message;
  final String time;
  final String? replyPreview;
  final String? imagePath;
  final Map<String, int>? reactions;
  final VoidCallback? onLongPress;
  final void Function(String emoji)? onReact;

  const MessageBubble({
    super.key,
    required this.message,
    required this.time,
    this.replyPreview,
    this.imagePath,
    this.reactions,
    this.onLongPress,
    this.onReact,
  });

  @override
  Widget build(BuildContext context) {
    final currentUid = Supabase.instance.client.auth.currentUser?.id;

    final isMe = message.isMine(currentUid);
    final isSystem = message.isSystem;

    final theme = Theme.of(context);
    final maxW = math.min(MediaQuery.of(context).size.width * 0.78, 420.0);

    final bg = isSystem
        ? theme.colorScheme.tertiaryContainer.withOpacity(.6)
        : (isMe
            ? theme.colorScheme.primary
            : theme.colorScheme.surfaceContainerHighest);

    final textColor = isSystem
        ? theme.colorScheme.onTertiaryContainer
        : (isMe ? Colors.white : theme.colorScheme.onSurface);

    final bubble = ConstrainedBox(
      constraints: BoxConstraints(maxWidth: maxW),
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 14, vertical: 10),
        decoration: BoxDecoration(
          color: bg,
          borderRadius: BorderRadius.circular(18),
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            if (!isMe && !isSystem)
              Padding(
                padding: const EdgeInsets.only(bottom: 2),
                child: Text(
                  message.authorName,
                  style: TextStyle(
                    fontWeight: FontWeight.w700,
                    color: theme.colorScheme.primary,
                    fontSize: 12,
                  ),
                ),
              ),
            if (replyPreview != null && replyPreview!.isNotEmpty)
              Container(
                margin: const EdgeInsets.only(bottom: 6),
                padding: const EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: isMe ? Colors.black.withOpacity(.12) : Colors.black12,
                  borderRadius: BorderRadius.circular(12),
                  border: Border(
                      left: BorderSide(
                          color: textColor.withOpacity(.4), width: 3)),
                ),
                child: Text(
                  replyPreview!,
                  maxLines: 2,
                  overflow: TextOverflow.ellipsis,
                  style: TextStyle(
                      color: textColor.withOpacity(.85),
                      fontStyle: FontStyle.italic),
                ),
              ),
            if (imagePath != null) ...[
              ClipRRect(
                borderRadius: BorderRadius.circular(12),
                child: ConstrainedBox(
                  constraints: BoxConstraints(maxWidth: maxW),
                  child: Image.file(File(imagePath!), fit: BoxFit.cover),
                ),
              ),
              if (message.text.isNotEmpty) const SizedBox(height: 6),
            ],
            Row(
              crossAxisAlignment: CrossAxisAlignment.end,
              mainAxisSize: MainAxisSize.min,
              children: [
                Flexible(
                  child: Text(message.text,
                      style: TextStyle(color: textColor, height: 1.24)),
                ),
                const SizedBox(width: 8),
                Text(time,
                    style: TextStyle(
                        color: textColor.withOpacity(.75), fontSize: 11)),
              ],
            ),
            if (reactions != null && reactions!.isNotEmpty) ...[
              const SizedBox(height: 6),
              Wrap(
                spacing: 6,
                runSpacing: 4,
                children: reactions!.entries
                    .map((e) => Container(
                          padding: const EdgeInsets.symmetric(
                              horizontal: 8, vertical: 4),
                          decoration: BoxDecoration(
                            color: Colors.black.withOpacity(isMe ? .15 : .08),
                            borderRadius: BorderRadius.circular(12),
                          ),
                          child: Text('${e.key} ${e.value}',
                              style:
                                  TextStyle(color: textColor, fontSize: 12)),
                        ))
                    .toList(),
              ),
            ],
          ],
        ),
      ),
    );

    return GestureDetector(
      onLongPress: onLongPress,
      child: Row(
        mainAxisAlignment:
            isMe ? MainAxisAlignment.end : MainAxisAlignment.start,
        crossAxisAlignment: CrossAxisAlignment.end,
        children: [
          if (!isMe)
            ProfileAvatar(
              name: message.authorName,
              imageUrl: message.authorAvatarUrl,
            ),
          if (!isMe) const SizedBox(width: 8),
          Flexible(child: bubble),
          if (isMe) const SizedBox(width: 8),
          if (isMe)
            ProfileAvatar(
              name: (message.authorName.isNotEmpty
                  ? message.authorName
                  : 'Р’С‹'),
              imageUrl: message.authorAvatarUrl,
            ),
        ],
      ),
    );
  }
}
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import '../../state/team_cubit.dart';
import '../../models/assignment.dart';
import '../../assignment_details_screen.dart';

class PinnedAssignmentBar extends StatelessWidget {
  const PinnedAssignmentBar({super.key});

  @override
  Widget build(BuildContext context) {
    final st = context.watch<TeamCubit>().state;
    final pending = st.pending;
    final lastPublished = st.published.isNotEmpty ? st.published.last : null;
    final isDraft = pending != null;

    final title = isDraft ? pending!.title : (lastPublished?.title ?? '');
    final due = isDraft ? pending!.due : lastPublished?.due;

    final theme = Theme.of(context);
    final bg = isDraft ? Colors.amber.withOpacity(.15) : theme.colorScheme.primary.withOpacity(.12);
    final border = isDraft ? Colors.orangeAccent : theme.colorScheme.primary;

    return Container(
      margin: const EdgeInsets.fromLTRB(12, 12, 12, 6),
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: bg,
        borderRadius: BorderRadius.circular(14),
        border: Border.all(color: border.withOpacity(.6), width: .6),
      ),
      child: Row(
        children: [
          Icon(isDraft ? Icons.edit_note_outlined : Icons.push_pin_outlined, color: border),
          const SizedBox(width: 10),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(isDraft ? 'Р§РµСЂРЅРѕРІРёРє Р·Р°РґР°РЅРёСЏ' : 'Р—Р°РєСЂРµРїР»РµРЅРѕ: Р·Р°РґР°РЅРёРµ',
                    style: const TextStyle(fontWeight: FontWeight.w700)),
                const SizedBox(height: 4),
                Text(
                  title + (due != null ? ' (РґРѕ $due)' : ''),
                  maxLines: 2,
                  overflow: TextOverflow.ellipsis,
                ),
              ],
            ),
          ),
          TextButton(
            onPressed: () {
              final id = isDraft ? pending!.id : (lastPublished?.id ?? '');
              if (id.isEmpty) return;
              Navigator.of(context).push(
                MaterialPageRoute(
                  builder: (_) => BlocProvider.value(
                    value: context.read<TeamCubit>(),
                    child: AssignmentDetailsScreen(assignmentId: id),
                  ),
                ),
              );
            },
            child: const Text('РћС‚РєСЂС‹С‚СЊ'),
          ),
        ],
      ),
    );
  }
}
import 'package:flutter/material.dart';

enum PinType { text, message, assignment }

class PinEntry {
  final String id;
  final PinType type;
  final String title;
  final String? subtitle;
  final String? refId;
  final bool isAuto;

  const PinEntry._({
    required this.id,
    required this.type,
    required this.title,
    this.subtitle,
    this.refId,
    this.isAuto = false,
  });

  factory PinEntry.text({required String id, required String title}) =>
      PinEntry._(id: id, type: PinType.text, title: title);

  factory PinEntry.message({required String id, required String title, String? subtitle, required String messageId}) =>
      PinEntry._(id: id, type: PinType.message, title: title, subtitle: subtitle, refId: messageId);

  factory PinEntry.assignment({required String id, required String title, String? subtitle, required String assignmentId, bool isAuto = false}) =>
      PinEntry._(id: id, type: PinType.assignment, title: title, subtitle: subtitle, refId: assignmentId, isAuto: isAuto);

  IconData get icon => switch (type) {
        PinType.text => Icons.push_pin_outlined,
        PinType.message => Icons.chat_bubble_outline,
        PinType.assignment => Icons.assignment_outlined,
      };
}

class PinnedStrip extends StatelessWidget {
  final List<PinEntry> entries;
  final ValueChanged<PinEntry> onOpen;
  final ValueChanged<PinEntry> onUnpin;
  final VoidCallback onMore;

  const PinnedStrip({
    super.key,
    required this.entries,
    required this.onOpen,
    required this.onUnpin,
    required this.onMore,
  });

  @override
  Widget build(BuildContext context) {
    final cs = Theme.of(context).colorScheme;
    return Container(
      margin: const EdgeInsets.fromLTRB(12, 10, 12, 4),
      padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 8),
      decoration: BoxDecoration(
        color: cs.surfaceContainerHigh,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: cs.outlineVariant.withOpacity(.6), width: .5),
      ),
      child: Row(
        children: [
          Icon(Icons.push_pin, size: 18, color: cs.primary),
          const SizedBox(width: 8),
          Expanded(
            child: SizedBox(
              height: 36,
              child: ListView.separated(
                scrollDirection: Axis.horizontal,
                itemCount: entries.length,
                separatorBuilder: (_, __) => const SizedBox(width: 8),
                itemBuilder: (_, i) => _ChipItem(
                  entry: entries[i],
                  onTap: () => onOpen(entries[i]),
                  onClose: () => onUnpin(entries[i]),
                ),
              ),
            ),
          ),
          const SizedBox(width: 4),
          InkWell(
            onTap: onMore,
            borderRadius: BorderRadius.circular(20),
            child: const Padding(
              padding: EdgeInsets.all(6),
              child: Icon(Icons.more_vert, size: 20),
            ),
          ),
        ],
      ),
    );
  }
}

class _ChipItem extends StatelessWidget {
  final PinEntry entry;
  final VoidCallback onTap;
  final VoidCallback onClose;
  const _ChipItem({required this.entry, required this.onTap, required this.onClose});

  @override
  Widget build(BuildContext context) {
    final cs = Theme.of(context).colorScheme;
    return Material(
      color: cs.primary.withOpacity(.10),
      shape: const StadiumBorder(),
      child: InkWell(
        onTap: onTap,
        customBorder: const StadiumBorder(),
        child: Padding(
          padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 8),
          child: Row(
            children: [
              Icon(entry.icon, size: 16, color: cs.primary),
              const SizedBox(width: 6),
              ConstrainedBox(
                constraints: const BoxConstraints(maxWidth: 220),
                child: Text(
                  entry.subtitle != null ? '${entry.title}  вЂў  ${entry.subtitle}' : entry.title,
                  overflow: TextOverflow.ellipsis,
                ),
              ),
              if (!entry.isAuto) ...[
                const SizedBox(width: 6),
                GestureDetector(
                  onTap: onClose,
                  child: const Icon(Icons.close, size: 16),
                ),
              ],
            ],
          ),
        ),
      ),
    );
  }
}
import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';

class PlusButton extends StatelessWidget {
  final void Function(String text)? onPinText;
  final Future<void> Function(
    String title,
    String description,
    String? link,
    String? due,
    List<Map<String, String>> attachments,
  )? onPropose;

  const PlusButton({super.key, this.onPinText, this.onPropose});

  @override
  Widget build(BuildContext context) {
    return IconButton(
      icon: const Icon(Icons.add_circle_outline),
      onPressed: () async {
        showModalBottomSheet(
          context: context,
          showDragHandle: true,
          builder: (_) => SafeArea(
            child: Wrap(
              children: [
                ListTile(
                  leading: const Icon(Icons.post_add_outlined),
                  title: const Text('РџСЂРµРґР»РѕР¶РёС‚СЊ Р·Р°РґР°РЅРёРµ'),
                  onTap: () async {
                    Navigator.pop(context);
                    final res = await _askAssignment(context);
                    if (res == null) return;
                    await onPropose?.call(res.$1, res.$2, res.$3, res.$4, res.$5);
                  },
                ),
                if (onPinText != null)
                  ListTile(
                    leading: const Icon(Icons.push_pin_outlined),
                    title: const Text('Р—Р°РєСЂРµРїРёС‚СЊ Р·Р°РјРµС‚РєСѓ'),
                    onTap: () async {
                      Navigator.pop(context);
                      final txt = await _askText(context);
                      if (txt != null && txt.trim().isNotEmpty) onPinText!(txt.trim());
                    },
                  ),
              ],
            ),
          ),
        );
      },
    );
  }

  Future<String?> _askText(BuildContext context) async {
    final c = TextEditingController();
    return showDialog<String>(
      context: context,
      builder: (_) => AlertDialog(
        title: const Center(child: Text('Р—Р°РєСЂРµРїРёС‚СЊ Р·Р°РјРµС‚РєСѓ', style: TextStyle(fontWeight: FontWeight.w700))),
        content: TextField(controller: c, maxLines: 3, decoration: const InputDecoration(hintText: 'РўРµРєСЃС‚ Р·Р°РјРµС‚РєРё')),
        actions: [
          TextButton(onPressed: () => Navigator.pop(context), child: const Text('РћС‚РјРµРЅР°')),
          FilledButton(onPressed: () => Navigator.pop(context, c.text), child: const Text('Р—Р°РєСЂРµРїРёС‚СЊ')),
        ],
      ),
    );
  }

  Future<(String, String, String?, String?, List<Map<String, String>>)?> _askAssignment(
      BuildContext context) async {
    final title = TextEditingController();
    final desc = TextEditingController();
    final link = TextEditingController();
    final due = TextEditingController();
    final List<Map<String, String>> files = [];

    return showDialog<(String, String, String?, String?, List<Map<String, String>>)>(
      context: context,
      builder: (_) => StatefulBuilder(
        builder: (context, setState) => AlertDialog(
          title: const Center(
            child: Text('РќРѕРІРѕРµ Р·Р°РґР°РЅРёРµ', style: TextStyle(color: Colors.black, fontWeight: FontWeight.w700)),
          ),
          content: SingleChildScrollView(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                TextField(controller: title, decoration: const InputDecoration(labelText: 'РќР°Р·РІР°РЅРёРµ')),
                const SizedBox(height: 8),
                TextField(
                  controller: desc, minLines: 3, maxLines: 6,
                  decoration: const InputDecoration(labelText: 'Р§С‚Рѕ СЃРґРµР»Р°С‚СЊ'),
                ),
                const SizedBox(height: 8),
                TextField(controller: link, decoration: const InputDecoration(labelText: 'РЎСЃС‹Р»РєР° (РѕРїС†.)')),
                const SizedBox(height: 8),
                TextField(
                  controller: due,
                  readOnly: true,
                  decoration: InputDecoration(
                    labelText: 'РЎСЂРѕРє',
                    hintText: 'Р’С‹Р±РµСЂРёС‚Рµ РґР°С‚Сѓ',
                    suffixIcon: IconButton(
                      icon: const Icon(Icons.calendar_today_outlined),
                      onPressed: () async {
                        final now = DateTime.now();
                        final picked = await showDatePicker(
                          context: context,
                          firstDate: now,
                          lastDate: DateTime(now.year + 2),
                          initialDate: now,
                        );
                        if (picked != null) {
                          due.text =
                              '${picked.day.toString().padLeft(2, '0')}.${picked.month.toString().padLeft(2, '0')}';
                        }
                      },
                    ),
                  ),
                ),
                const SizedBox(height: 8),
                Align(
                  alignment: Alignment.centerLeft,
                  child: TextButton.icon(
                    onPressed: () async {
                      final res = await ImagePicker().pickImage(source: ImageSource.gallery);
                      if (res != null) {
                        setState(() => files.add({'name': res.name, 'path': res.path}));
                      }
                    },
                    icon: const Icon(Icons.attach_file),
                    label: const Text('Р’Р»РѕР¶РёС‚СЊ С„Р°Р№Р»/РёР·РѕР±СЂР°Р¶РµРЅРёРµ'),
                  ),
                ),
                for (final f in files)
                  ListTile(
                    dense: true,
                    leading: const Icon(Icons.insert_drive_file_outlined),
                    title: Text(f['name'] ?? ''),
                    subtitle: Text(f['path'] ?? ''),
                  ),
              ],
            ),
          ),
          actions: [
            TextButton(onPressed: () => Navigator.pop(context), child: const Text('РћС‚РјРµРЅР°')),
            FilledButton(
              onPressed: () {
                if (title.text.trim().isEmpty || desc.text.trim().isEmpty) return;
                Navigator.pop(
                  context,
                  (
                    title.text.trim(),
                    desc.text.trim(),
                    link.text.trim().isEmpty ? null : link.text.trim(),
                    due.text.trim().isEmpty ? null : due.text.trim(),
                    files,
                  ),
                );
              },
              child: const Text('Р”РѕР±Р°РІРёС‚СЊ'),
            ),
          ],
        ),
      ),
    );
  }
}
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

// РќРёС‡РµРіРѕ РЅРµ Р·РЅР°РµРј РїСЂРѕ С‚РІРѕСЋ РјРѕРґРµР»СЊ РїСЂРѕС„РёР»СЏ вЂ” С‡РёС‚Р°РµРј state РґРёРЅР°РјРёС‡РµСЃРєРё.
// Р•СЃР»Рё РЅРёС‡РµРіРѕ РЅРµС‚ вЂ” Р±СѓРґСѓС‚ РёРЅРёС†РёР°Р»С‹.
class ProfileAvatar extends StatelessWidget {
  final String name;       // РґР»СЏ РёРЅРёС†РёР°Р»РѕРІ
  final String? imageUrl;  // РµСЃР»Рё СѓР¶Рµ РµСЃС‚СЊ РіРѕС‚РѕРІС‹Р№ url вЂ” РёСЃРїРѕР»СЊР·СѓРµРј
  final double radius;

  const ProfileAvatar({
    super.key,
    required this.name,
    this.imageUrl,
    this.radius = 14,
  });

  @override
  Widget build(BuildContext context) {
    String? url = imageUrl;

    // РћСЃС‚РѕСЂРѕР¶РЅР°СЏ РїРѕРїС‹С‚РєР° РґРѕСЃС‚Р°С‚СЊ РјРѕСЋ Р°РІР°С‚Р°СЂРєСѓ РёР· Cubit.state (РґРёРЅР°РјРёС‡РµСЃРєРё).
    // Р Р°Р±РѕС‚Р°РµС‚, РґР°Р¶Рµ РµСЃР»Рё РїРѕР»РµР№ РЅРµС‚ вЂ” РїСЂРѕСЃС‚Рѕ РѕСЃС‚Р°РЅСѓС‚СЃСЏ РёРЅРёС†РёР°Р»С‹.
    if (url == null) {
      try {
        final cubit = context.read<dynamic>(); // РЅРµ СѓРєР°Р·С‹РІР°РµРј С‚РёРї
        final st = cubit.state;                // dynamic
        // РџСЂРѕР±СѓРµРј СЃР°РјС‹Рµ РѕС‡РµРІРёРґРЅС‹Рµ РјРµСЃС‚Р°:
        url = st?.profile?.avatarUrl ??
              st?.me?.avatarUrl ??
              st?.user?.avatarUrl;
      } catch (_) {}
    }

    Widget child;
    if (url is String && url.trim().isNotEmpty) {
      child = ClipOval(
        child: Image.network(url, width: radius * 2, height: radius * 2, fit: BoxFit.cover),
      );
    } else {
      final initials = _initials(name);
      child = CircleAvatar(
        radius: radius,
        child: Text(initials, style: const TextStyle(fontSize: 11)),
      );
    }
    return SizedBox(width: radius * 2, height: radius * 2, child: child);
  }

  String _initials(String name) {
    final parts = name.trim().split(RegExp(r'\s+'));
    if (parts.isEmpty) return 'U';
    final a = parts[0].isNotEmpty ? parts[0][0] : '';
    final b = parts.length > 1 && parts[1].isNotEmpty ? parts[1][0] : '';
    return (a + b).toUpperCase();
  }
}
import 'package:flutter/material.dart';

class ScrollToBottomButton extends StatelessWidget {
  final VoidCallback onTap;
  const ScrollToBottomButton({super.key, required this.onTap});

  @override
  Widget build(BuildContext context) {
    final bg = Theme.of(context).colorScheme.primary;
    return Material(
      color: bg,
      elevation: 2,
      shape: const CircleBorder(),
      child: InkWell(
        customBorder: const CircleBorder(),
        onTap: onTap,
        child: const Padding(
          padding: EdgeInsets.all(10),
          child: Icon(Icons.keyboard_arrow_down_rounded, color: Colors.white, size: 22),
        ),
      ),
    );
  }
}
import 'package:flutter/material.dart';

class SwipeToReply extends StatefulWidget {
  final Widget child;
  final VoidCallback onReply;
  const SwipeToReply({super.key, required this.child, required this.onReply});

  @override
  State<SwipeToReply> createState() => _SwipeToReplyState();
}

class _SwipeToReplyState extends State<SwipeToReply> {
  double _dx = 0;
  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onHorizontalDragUpdate: (d) {
        setState(() => _dx = (_dx + d.primaryDelta!).clamp(0, 80));
      },
      onHorizontalDragEnd: (_) {
        if (_dx > 48) widget.onReply();
        setState(() => _dx = 0);
      },
      child: Transform.translate(
        offset: Offset(_dx, 0),
        child: widget.child,
      ),
    );
  }
}
import 'package:flutter/material.dart';

class TypingLine extends StatelessWidget {
  final List<String> names;
  const TypingLine({super.key, required this.names});

  @override
  Widget build(BuildContext context) {
    final cs = Theme.of(context).colorScheme;
    final who = names.join(', ');
    return Padding(
      padding: const EdgeInsets.fromLTRB(12, 4, 12, 4),
      child: Row(
        children: [
          Icon(Icons.more_horiz, size: 16, color: cs.primary),
          const SizedBox(width: 6),
          Expanded(
            child: Text(
              '$who РїРµС‡Р°С‚Р°РµС‚вЂ¦',
              maxLines: 1,
              overflow: TextOverflow.ellipsis,
              style: TextStyle(
                fontSize: 12,
                color: Theme.of(context).colorScheme.onSurface.withOpacity(.7),
              ),
            ),
          ),
        ],
      ),
    );
  }
}
import 'package:flutter/material.dart';

// РРјРїРѕСЂС‚С‹ РїРѕ С‚РµРєСѓС‰РµР№ СЃС‚СЂСѓРєС‚СѓСЂРµ
import '../home/home_screen.dart';
import '../info/info_screen.dart';
import '../learning/learning_screen.dart';
import '../schedule/schedule_screen.dart';
import '../profile/profile_screen.dart';

class NavigationScreen extends StatefulWidget {
  const NavigationScreen({super.key});

  @override
  State<NavigationScreen> createState() => _NavigationScreenState();
}

class _NavigationScreenState extends State<NavigationScreen> {
  int _currentIndex = 0;
  final PageStorageBucket _bucket = PageStorageBucket();

  late final List<Widget> _tabs = <Widget>[
    const _KeepAlive(storageKey: 'tab_home', child: HomeScreen()),
    const _KeepAlive(storageKey: 'tab_info', child: InfoScreen()),
    const _KeepAlive(storageKey: 'tab_learning', child: LearningScreen()),
    const _KeepAlive(storageKey: 'tab_schedule', child: ScheduleScreen()),
    const _KeepAlive(storageKey: 'tab_profile', child: ProfileScreen()),
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: PageStorage(
        bucket: _bucket,
        child: IndexedStack(
          index: _currentIndex,
          children: _tabs,
        ),
      ),
      bottomNavigationBar: BottomNavigationBar(
        type: BottomNavigationBarType.fixed,
        currentIndex: _currentIndex,
        onTap: (index) => setState(() => _currentIndex = index),
        selectedItemColor: Colors.blue,
        unselectedItemColor: Colors.grey,
        items: const [
          BottomNavigationBarItem(icon: Icon(Icons.home), label: 'Р“Р»Р°РІРЅР°СЏ'),
          BottomNavigationBarItem(icon: Icon(Icons.info_outline), label: 'РџРѕР»РµР·РЅР°СЏ'),
          BottomNavigationBarItem(icon: Icon(Icons.menu_book), label: 'РћР±СѓС‡РµРЅРёРµ'),
          BottomNavigationBarItem(icon: Icon(Icons.calendar_today), label: 'Р Р°СЃРїРёСЃР°РЅРёРµ'),
          BottomNavigationBarItem(icon: Icon(Icons.person), label: 'РџСЂРѕС„РёР»СЊ'),
        ],
      ),
    );
  }
}

/// РћР±С‘СЂС‚РєР°, РєРѕС‚РѕСЂР°СЏ:
/// 1) РІРєР»СЋС‡Р°РµС‚ keep-alive (РЅРµ dispose'РёС‚ РІРёРґР¶РµС‚ РїСЂРё СЃРјРµРЅРµ РІРєР»Р°РґРєРё),
/// 2) РґР°С‘С‚ СЃС‚Р°Р±РёР»СЊРЅС‹Р№ PageStorageKey РґР»СЏ СЃРѕС…СЂР°РЅРµРЅРёСЏ СЃРєСЂРѕР»Р»РѕРІ Рё С‚.Рї.
class _KeepAlive extends StatefulWidget {
  final Widget child;
  final String storageKey;
  const _KeepAlive({super.key, required this.child, required this.storageKey});

  @override
  State<_KeepAlive> createState() => _KeepAliveState();
}

class _KeepAliveState extends State<_KeepAlive>
    with AutomaticKeepAliveClientMixin<_KeepAlive> {
  @override
  bool get wantKeepAlive => true;

  @override
  Widget build(BuildContext context) {
    super.build(context);
    return KeyedSubtree(
      key: PageStorageKey(widget.storageKey),
      child: widget.child,
    );
  }
}
import 'dart:convert';
import 'dart:io';

import 'package:cached_network_image/cached_network_image.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:image_picker/image_picker.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

class EditProfileScreen extends StatefulWidget {
  const EditProfileScreen({super.key});

  @override
  State<EditProfileScreen> createState() => _EditProfileScreenState();
}

class _EditProfileScreenState extends State<EditProfileScreen> {
  final _formKey = GlobalKey<FormState>();

  final _firstName = TextEditingController();
  final _lastName = TextEditingController();
  final _university = TextEditingController();
  final _group = TextEditingController();

  final List<String> _statuses = const [
    'РћРЅР»Р°Р№РЅ',
    'Р—Р°РЅСЏС‚ рџљ«',
    'РќР° РїР°СЂРµ',
    'Р’ Р±РёР±Р»РёРѕС‚РµРєРµ',
    'Р“РѕС‚РѕРІР»СЋСЃСЊ Рє СЃРµСЃСЃРёРё рџ’Є',
    'РћС‚РѕС€С‘Р»',
  ];
  String _status = 'РћРЅР»Р°Р№РЅ';

  String? _avatarPath; // Р»РѕРєР°Р»СЊРЅС‹Р№ РїСЂРµРІСЊСЋ
  String? _avatarUrl;  // url РёР· Р‘Р”

  bool _saving = false;
  Map<String, dynamic>? _user;

  final _sb = Supabase.instance.client;

  @override
  void initState() {
    super.initState();
    _bootstrap();
  }

  Future<void> _bootstrap() async {
    final prefs = await SharedPreferences.getInstance();
    final userJson = prefs.getString('user');
    if (userJson != null) {
      _user = jsonDecode(userJson) as Map<String, dynamic>;
      _firstName.text  = (_user?['name'] ?? '') as String;
      _lastName.text   = (_user?['surname'] ?? '') as String;
      _university.text = (_user?['university'] ?? '') as String;
      _group.text      = (_user?['group_name'] ?? '') as String;
      final st = (_user?['status'] ?? '') as String;
      if (st.isNotEmpty) _status = st;
      _avatarUrl = (_user?['avatar_url'] as String?)?.trim();
      setState(() {});
    }
  }

  @override
  void dispose() {
    _firstName.dispose();
    _lastName.dispose();
    _university.dispose();
    _group.dispose();
    super.dispose();
  }

  /// Р—Р°РіСЂСѓР·РєР° РІ `<uid>/<fileName>.jpg`. Р­С‚Рѕ РєСЂРёС‚РёС‡РЅРѕ РґР»СЏ RLS.
  Future<void> _pickAvatar() async {
    final picker = ImagePicker();
    final picked = await picker.pickImage(source: ImageSource.gallery, imageQuality: 85);
    if (picked == null || _user == null) return;

    setState(() => _avatarPath = picked.path);

    try {
      final id = _user!['id'] as String; // auth.uid()
      final bytes = await File(picked.path).readAsBytes();
      final fileName = 'avatar_${DateTime.now().millisecondsSinceEpoch}.jpg';
      final path = '$id/$fileName'; // <вЂ” Р’РђР–РќРћ: РїР°РїРєР° РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ

      await _sb.storage.from('avatars').uploadBinary(
        path,
        bytes,
        fileOptions: const FileOptions(
          upsert: true,
          contentType: 'image/jpeg',
        ),
      );

      final publicUrl = _sb.storage.from('avatars').getPublicUrl(path);

      await _sb.from('users').update({'avatar_url': publicUrl}).eq('id', id);

      final prefs = await SharedPreferences.getInstance();
      final u = Map<String, dynamic>.from(_user!);
      u['avatar_url'] = publicUrl;
      _user = u;
      _avatarUrl = publicUrl;
      await prefs.setString('user', jsonEncode(u));

      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('РђРІР°С‚Р°СЂ РѕР±РЅРѕРІР»С‘РЅ')),
      );
    } catch (e) {
      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('РћС€РёР±РєР° Р·Р°РіСЂСѓР·РєРё Р°РІР°С‚Р°СЂР°: $e')),
      );
    }
  }

  Future<void> _save() async {
    // СЃРµР№С‡Р°СЃ РїРѕР»СЏ С‚РѕР»СЊРєРѕ РґР»СЏ С‡С‚РµРЅРёСЏ вЂ” РїРѕ РєРЅРѕРїРєРµ РїСЂРѕСЃС‚Рѕ РІС‹С…РѕРґРёРј
    if (!mounted) return;
    context.pop();
  }

  Future<void> _setStatus(String newStatus) async {
    if (_user == null) return;
    setState(() => _status = newStatus);
    try {
      final id = _user!['id'] as String;
      await _sb.from('users').update({'status': newStatus}).eq('id', id);

      final prefs = await SharedPreferences.getInstance();
      final u = Map<String, dynamic>.from(_user!);
      u['status'] = newStatus;
      _user = u;
      await prefs.setString('user', jsonEncode(u));
    } catch (_) {}
  }

  /// РљСЂР°СЃРёРІР°СЏ СЃРјРµРЅР° РїР°СЂРѕР»СЏ: РґРІР° РїРѕР»СЏ, Р±РµР· BCrypt.
  Future<void> _changePasswordDialog() async {
    final newCtrl = TextEditingController();
    final confirmCtrl = TextEditingController();

    await showDialog(
      context: context,
      builder: (ctx) => AlertDialog(
        title: const Text('РЎРјРµРЅР° РїР°СЂРѕР»СЏ'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextField(
              controller: newCtrl,
              obscureText: true,
              decoration: const InputDecoration(labelText: 'РќРѕРІС‹Р№ РїР°СЂРѕР»СЊ'),
            ),
            TextField(
              controller: confirmCtrl,
              obscureText: true,
              decoration: const InputDecoration(labelText: 'РџРѕРІС‚РѕСЂРёС‚Рµ РїР°СЂРѕР»СЊ'),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(ctx).pop(),
            child: const Text('РћС‚РјРµРЅР°'),
          ),
          FilledButton(
            onPressed: () async {
              final a = newCtrl.text.trim();
              final b = confirmCtrl.text.trim();

              if (a.length < 6) {
                if (mounted) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(content: Text('РњРёРЅРёРјСѓРј 6 СЃРёРјРІРѕР»РѕРІ')),
                  );
                }
                return;
              }
              if (a != b) {
                if (mounted) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(content: Text('РџР°СЂРѕР»Рё РЅРµ СЃРѕРІРїР°РґР°СЋС‚')),
                  );
                }
                return;
              }

              try {
                await _sb.auth.updateUser(UserAttributes(password: a));
                if (mounted) {
                  Navigator.of(ctx).pop();
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(content: Text('РџР°СЂРѕР»СЊ РёР·РјРµРЅС‘РЅ')),
                  );
                }
              } on AuthException catch (e) {
                if (mounted) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text(e.message)),
                  );
                }
              } catch (e) {
                if (mounted) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text('РћС€РёР±РєР°: $e')),
                  );
                }
              }
            },
            child: const Text('РЎРѕС…СЂР°РЅРёС‚СЊ'),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final text = Theme.of(context).textTheme;

    ImageProvider? avatarProvider;
    if (_avatarPath != null) {
      avatarProvider = FileImage(File(_avatarPath!));
    } else if (_avatarUrl != null && _avatarUrl!.isNotEmpty) {
      avatarProvider = CachedNetworkImageProvider(_avatarUrl!);
    }

    return Scaffold(
      appBar: AppBar(
        leading: IconButton(
          icon: const Icon(Icons.arrow_back_ios_new_rounded),
          onPressed: () => context.pop(),
        ),
        title: const Text('Р РµРґР°РєС‚РёСЂРѕРІР°С‚СЊ РїСЂРѕС„РёР»СЊ'),
        centerTitle: true,
        actions: [
          TextButton(
            onPressed: _saving ? null : _save,
            child: _saving
                ? const SizedBox(
                    width: 16, height: 16, child: CircularProgressIndicator(strokeWidth: 2))
                : const Text('Р“РѕС‚РѕРІРѕ'),
          ),
        ],
      ),
      body: Form(
        key: _formKey,
        child: ListView(
          padding: const EdgeInsets.fromLTRB(16, 12, 16, 24),
          children: [
            // ==== AVATAR ====
            Center(
              child: Stack(
                children: [
                  Container(
                    width: 120,
                    height: 120,
                    decoration: const BoxDecoration(
                      shape: BoxShape.circle,
                      gradient: LinearGradient(
                        colors: [Color(0xFF8EC5FC), Color(0xFFE0C3FC)],
                        begin: Alignment.topLeft,
                        end: Alignment.bottomRight,
                      ),
                    ),
                    child: Center(
                      child: CircleAvatar(
                        radius: 54,
                        backgroundColor: Colors.white,
                        backgroundImage: avatarProvider,
                        child: avatarProvider == null
                            ? const Icon(Icons.person, size: 44, color: Colors.black54)
                            : null,
                      ),
                    ),
                  ),
                  Positioned(
                    right: 0,
                    bottom: 0,
                    child: GestureDetector(
                      onTap: _pickAvatar,
                      child: Container(
                        width: 40,
                        height: 40,
                        decoration: BoxDecoration(
                          color: Theme.of(context).colorScheme.primary,
                          shape: BoxShape.circle,
                          boxShadow: [
                            BoxShadow(
                              color: Theme.of(context).colorScheme.primary.withOpacity(.35),
                              blurRadius: 10,
                              offset: const Offset(0, 6),
                            ),
                          ],
                        ),
                        child: const Icon(Icons.edit, color: Colors.white, size: 20),
                      ),
                    ),
                  ),
                ],
              ),
            ),

            const SizedBox(height: 20),

            // ==== READ-ONLY FIELDS ====
            _LabeledField(label: 'РРјСЏ',         hint: 'Р’РІРµРґРёС‚Рµ РёРјСЏ',         controller: _firstName,   readOnly: true),
            _Divider(),
            _LabeledField(label: 'Р¤Р°РјРёР»РёСЏ',     hint: 'Р’РІРµРґРёС‚Рµ С„Р°РјРёР»РёСЋ',     controller: _lastName,    readOnly: true),
            _Divider(),
            _LabeledField(label: 'РЈРЅРёРІРµСЂСЃРёС‚РµС‚', hint: 'РќР°РїСЂРёРјРµСЂ: РЎРџР±Р“РђРЎРЈ',   controller: _university,  readOnly: true),
            _Divider(),
            _LabeledField(label: 'Р“СЂСѓРїРїР°/РєСѓСЂСЃ', hint: 'РќР°РїСЂРёРјРµСЂ: 1-РЎРј(Р’Р’)-2',controller: _group,       readOnly: true),

            const SizedBox(height: 12),

            // ==== STATUS CHIPS ====
            Text('РЎС‚Р°С‚СѓСЃ',
                style: text.labelMedium?.copyWith(color: Colors.black54, fontWeight: FontWeight.w600)),
            const SizedBox(height: 8),
            Wrap(
              spacing: 8,
              runSpacing: -4,
              children: _statuses.map((s) {
                final selected = _status == s;
                return ChoiceChip(
                  label: Text(s),
                  selected: selected,
                  onSelected: (_) => _setStatus(s),
                  labelStyle: TextStyle(
                    color: selected ? Colors.white : Colors.black87,
                    fontWeight: FontWeight.w600,
                  ),
                  selectedColor: Theme.of(context).colorScheme.primary,
                  backgroundColor: Colors.grey.shade200,
                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
                );
              }).toList(),
            ),

            const SizedBox(height: 28),

            // ==== PASSWORD ====
            ListTile(
              contentPadding: EdgeInsets.zero,
              leading: const Icon(Icons.lock_outline),
              title: const Text('РЎРјРµРЅРёС‚СЊ РїР°СЂРѕР»СЊ'),
              subtitle: const Text('Р”РІР° РїРѕР»СЏ: РЅРѕРІС‹Р№ Рё РїРѕРІС‚РѕСЂ'),
              trailing: const Icon(Icons.chevron_right),
              onTap: _changePasswordDialog,
            ),
          ],
        ),
      ),
    );
  }
}

class _LabeledField extends StatelessWidget {
  final String label;
  final String hint;
  final TextEditingController controller;
  final bool readOnly;
  final int maxLines;
  final TextInputType? keyboardType;

  const _LabeledField({
    required this.label,
    required this.hint,
    required this.controller,
    this.readOnly = false,
    this.maxLines = 1,
    this.keyboardType,
  });

  @override
  Widget build(BuildContext context) {
    final labelStyle = Theme.of(context)
        .textTheme
        .labelMedium
        ?.copyWith(color: Colors.black54, fontWeight: FontWeight.w600);

    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8),
      child: TextFormField(
        controller: controller,
        readOnly: readOnly,
        enableInteractiveSelection: true,
        keyboardType: keyboardType,
        maxLines: maxLines,
        decoration: InputDecoration(
          labelText: label,
          labelStyle: labelStyle,
          hintText: hint,
          border: InputBorder.none,
          contentPadding: const EdgeInsets.symmetric(horizontal: 4, vertical: 8),
        ),
      ),
    );
  }
}

class _Divider extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return const Divider(height: 1, thickness: 1, color: Colors.black12);
  }
}
import 'dart:io';
import 'package:supabase_flutter/supabase_flutter.dart';

class ProfileRepository {
  final _sb = Supabase.instance.client;

  Future<Map<String, dynamic>?> fetchMyProfile() async {
    final uid = _sb.auth.currentUser?.id;
    if (uid == null) return null;
    return await _sb
        .from('users')
        .select<Map<String, dynamic>>()
        .eq('id', uid)
        .maybeSingle();
  }

  Future<void> updateProfile({
    required String name,
    required String surname,
    required String university,
    required String groupName,
    String? status,
  }) async {
    final uid = _sb.auth.currentUser!.id;
    await _sb.from('users').update({
      'name': name,
      'surname': surname,
      'university': university,
      'group_name': groupName,
      if (status != null) 'status': status,
    }).eq('id', uid);
  }

  /// РљР»Р°РґС‘Рј РІ `<uid>/<filename>.jpg`
  Future<String?> uploadAvatar(File file) async {
    final uid = _sb.auth.currentUser!.id;
    final fileName = 'avatar_${DateTime.now().millisecondsSinceEpoch}.jpg';
    final path = '$uid/$fileName';

    await _sb.storage.from('avatars').upload(
      path,
      file,
      fileOptions: const FileOptions(upsert: true, contentType: 'image/jpeg'),
    );

    final publicUrl = _sb.storage.from('avatars').getPublicUrl(path);
    await _sb.from('users').update({'avatar_url': publicUrl}).eq('id', uid);
    return publicUrl;
  }
}
import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:url_launcher/url_launcher.dart';

class ProfileScreen extends StatefulWidget {
  const ProfileScreen({super.key});

  @override
  State<ProfileScreen> createState() => _ProfileScreenState();
}

class _ProfileScreenState extends State<ProfileScreen> {
  Map<String, dynamic>? _user;
  bool _loading = true;

  final _sb = Supabase.instance.client;
  RealtimeChannel? _channel; // РґР»СЏ live-РѕР±РЅРѕРІР»РµРЅРёР№

  @override
  void initState() {
    super.initState();
    _loadLocal();
  }

  @override
  void dispose() {
    _channel?.unsubscribe();
    super.dispose();
  }

  Future<void> _loadLocal() async {
    final prefs = await SharedPreferences.getInstance();
    final userJson = prefs.getString('user');
    if (userJson != null) {
      _user = jsonDecode(userJson) as Map<String, dynamic>;
      _subscribeStatus(); // СЃР»СѓС€Р°РµРј РёР·РјРµРЅРµРЅРёСЏ РІ Р‘Р”
    }
    setState(() => _loading = false);
  }

  void _subscribeStatus() {
    if (_user == null) return;
    final id = _user!['id'] as String?;
    if (id == null) return;

    // РќР° РІСЃСЏРєРёР№ СЃР»СѓС‡Р°Р№ РѕС‚РїРёСЃРєР°, РµСЃР»Рё СѓР¶Рµ РїРѕРґРїРёСЃР°РЅС‹
    _channel?.unsubscribe();

    _channel = _sb
        .channel('public:users')
        .onPostgresChanges(
          event: PostgresChangeEvent.update,
          schema: 'public',
          table: 'users',
          filter: PostgresChangeFilter(
            type: PostgresChangeFilterType.eq,
            column: 'id',
            value: id,
          ),
          callback: (payload) async {
            final newRec = payload.newRecord;
            if (newRec == null) return;

            final newStatus = (newRec['status'] ?? '') as String;
            final newAvatar = (newRec['avatar_url'] ?? '') as String;

            setState(() {
              if (_user != null) {
                _user!['status'] = newStatus;
                _user!['avatar_url'] = newAvatar;
              }
            });

            final prefs = await SharedPreferences.getInstance();
            final u = Map<String, dynamic>.from(_user!);
            u['status'] = newStatus;
            u['avatar_url'] = newAvatar;
            _user = u;
            await prefs.setString('user', jsonEncode(u));
          },
        )
        .subscribe();
  }

  Future<void> _refreshFromServer() async {
    if (_user == null) return;
    final id = _user!['id'] as String?;
    if (id == null) return;

    final fresh = await _sb
        .from('users')
        .select(
          'id, login, name, surname, university, group_name, avatar_url, status',
        )
        .eq('id', id)
        .maybeSingle();

    if (fresh != null) {
      final mapFresh = Map<String, dynamic>.from(fresh as Map);
      _user = mapFresh;
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString('user', jsonEncode(mapFresh));
      setState(() {});
    }
  }

  Future<void> _logout() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove('loggedIn');
    await prefs.remove('user');
    if (!mounted) return;
    context.go('/login');
  }

  @override
  Widget build(BuildContext context) {
    if (_loading) {
      return Scaffold(
        appBar: AppBar(title: const Text('РџСЂРѕС„РёР»СЊ'), centerTitle: true),
        body: const Center(child: CircularProgressIndicator()),
      );
    }

    final u = _user;
    final first = (u?['name'] ?? '') as String;
    final last = (u?['surname'] ?? '') as String;
    final uni = (u?['university'] ?? '') as String;
    final group = (u?['group_name'] ?? '') as String;
    final status = (u?['status'] ?? '') as String;
    final avatar = (u?['avatar_url'] as String?)?.trim();

    final fullName = [first, last].where((s) => s.isNotEmpty).join(' ').trim();

    return Scaffold(
      appBar: AppBar(
        title: const Text('РџСЂРѕС„РёР»СЊ'),
        centerTitle: true,
        leading: IconButton(
          tooltip: 'Р РµРґР°РєС‚РёСЂРѕРІР°С‚СЊ',
          icon: const Icon(Icons.tune),
          onPressed: () async {
            await context.push('/edit-profile');
            // РїРѕСЃР»Рµ РІРѕР·РІСЂР°С‚Р°: РїРѕРґС‚СЏРЅРµРј Р»РѕРєР°Р»СЊРЅС‹Р№ РєСЌС€ (РѕРЅ СѓР¶Рµ РѕР±РЅРѕРІР»С‘РЅ РІ Edit)
            await _loadLocal();
          },
        ),
        actions: [
          IconButton(
            tooltip: 'РћР±РЅРѕРІРёС‚СЊ',
            icon: const Icon(Icons.refresh),
            onPressed: _refreshFromServer,
          ),
          IconButton(
            tooltip: 'Р’С‹Р№С‚Рё',
            icon: const Icon(Icons.logout),
            onPressed: _logout,
          ),
        ],
      ),
      body: RefreshIndicator(
        onRefresh: _refreshFromServer,
        child: ListView(
          padding: const EdgeInsets.fromLTRB(16, 12, 16, 24),
          children: [
            _Header(
              fullName: fullName.isEmpty ? 'Р‘РµР· РёРјРµРЅРё' : fullName,
              university: uni,
              groupName: group,
              status: status,
              avatarUrl: avatar,
            ),
            const SizedBox(height: 16),
            _MetricsRow(messages: '0', rating: '957', friends: '0'),
            const SizedBox(height: 20),

            const _SectionTitle('Р›РµРЅС‚Р°'),
            const SizedBox(height: 10),
            _FeedCarousel(
              items: _demoFeed,
              onTapItem: (item) => _openFeedItem(context, item),
            ),

            const SizedBox(height: 20),
            const _SectionTitle('РЈС‡С‘Р±Р°'),
            const SizedBox(height: 10),
            _ExamsBanner(onTap: () => context.push('/exams')),
          ],
        ),
      ),
    );
  }

  Future<void> _openFeedItem(BuildContext context, FeedItem item) async {
    if (item.url != null) {
      final uri = Uri.parse(item.url!);
      final ok = await launchUrl(uri, mode: LaunchMode.externalApplication);
      if (!ok && context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('РќРµ СѓРґР°Р»РѕСЃСЊ РѕС‚РєСЂС‹С‚СЊ: ${item.url}')),
        );
      }
      return;
    }
    if (item.route != null) {
      if (context.mounted) context.push(item.route!);
      return;
    }
    if (context.mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Р­Р»РµРјРµРЅС‚: ${item.title}')),
      );
    }
  }
}

// =================== HEADER ===================

class _Header extends StatelessWidget {
  final String fullName;
  final String university;
  final String groupName;
  final String status;
  final String? avatarUrl;

  const _Header({
    required this.fullName,
    required this.university,
    required this.groupName,
    required this.status,
    required this.avatarUrl,
  });

  @override
  Widget build(BuildContext context) {
    final text = Theme.of(context).textTheme;

    ImageProvider? avatarProvider;
    if (avatarUrl != null && avatarUrl!.isNotEmpty) {
      avatarProvider = NetworkImage(avatarUrl!);
    }

    return Column(
      children: [
        CircleAvatar(
          radius: 44,
          backgroundColor: Colors.deepPurple.shade100,
          backgroundImage: avatarProvider,
          child: avatarProvider == null
              ? const Icon(Icons.person, size: 44)
              : null,
        ),
        const SizedBox(height: 12),
        Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(
              fullName,
              style: text.titleLarge?.copyWith(
                fontWeight: FontWeight.w800,
                color: Colors.black,
              ),
            ),
            const SizedBox(width: 6),
            const Icon(Icons.verified, size: 18, color: Colors.deepPurple),
          ],
        ),
        const SizedBox(height: 4),
        Text(
          university.isEmpty && groupName.isEmpty
              ? 'Р”Р°РЅРЅС‹Рµ РїСЂРѕС„РёР»СЏ РЅРµ Р·Р°РїРѕР»РЅРµРЅС‹'
              : [
                  if (university.isNotEmpty) university,
                  if (groupName.isNotEmpty) 'РіСЂСѓРїРїР° $groupName',
                ].join(', '),
          style: text.bodyMedium?.copyWith(color: Colors.black54),
          textAlign: TextAlign.center,
        ),
        const SizedBox(height: 6),
        Text(
          status.isEmpty ? 'РЎС‚Р°С‚СѓСЃ РЅРµ СѓРєР°Р·Р°РЅ' : status,
          style: text.bodyLarge,
          textAlign: TextAlign.center,
        ),
      ],
    );
  }
}

// =================== METRICS ===================

class _MetricsRow extends StatelessWidget {
  final String messages;
  final String rating;
  final String friends;

  const _MetricsRow({
    required this.messages,
    required this.rating,
    required this.friends,
  });

  @override
  Widget build(BuildContext context) {
    final bg = Theme.of(context).colorScheme.primary.withOpacity(.08);

    Widget cell(IconData icon, String label, String value) {
      return Expanded(
        child: Column(
          children: [
            Icon(icon, size: 22),
            const SizedBox(height: 8),
            Text(
              value,
              style: Theme.of(context)
                  .textTheme
                  .titleMedium
                  ?.copyWith(fontWeight: FontWeight.w700),
            ),
            const SizedBox(height: 2),
            Text(label, style: const TextStyle(color: Colors.black54)),
          ],
        ),
      );
    }

    return Container(
      padding: const EdgeInsets.symmetric(vertical: 16),
      decoration: BoxDecoration(
        color: bg,
        borderRadius: BorderRadius.circular(16),
      ),
      child: Row(
        children: [
          cell(Icons.chat_bubble_outline, 'РЎРѕРѕР±С‰РµРЅРёСЏ', messages),
          const SizedBox(width: 12),
          cell(Icons.grade_outlined, 'Р РµР№С‚РёРЅРі', rating),
          const SizedBox(width: 12),
          cell(Icons.group_outlined, 'Р”СЂСѓР·СЊСЏ', friends),
        ],
      ),
    );
  }
}

// =================== FEED / CAROUSEL ===================

class FeedItem {
  final String title;
  final String subtitle;
  final List<Color> gradient;
  final String? route;
  final String? url;

  FeedItem({
    required this.title,
    required this.subtitle,
    required this.gradient,
    this.route,
    this.url,
  });
}

final List<FeedItem> _demoFeed = [
  FeedItem(
    title: 'Рћ РЅР°СЃ',
    subtitle: 'РљРѕРјР°РЅРґР° РЎС‚СѓРґРµРЅС‚ РџР»Р°С‚С„РѕСЂРј',
    gradient: [const Color(0xFF6D5DF6), const Color(0xFF9A7BFF)],
    url: 'https://example.com/about',
  ),
  FeedItem(
    title: 'Р Р°СЃРїРёСЃР°РЅРёРµ Р·Р°РЅСЏС‚РёР№',
    subtitle: 'РўРІРѕРµ СЂР°СЃРїРёСЃР°РЅРёРµ РІСЃРµРіРґР° РїРѕРґ СЂСѓРєРѕР№',
    gradient: [const Color(0xFF5DB2F6), const Color(0xFF7BD2FF)],
    route: '/schedule',
  ),
  FeedItem(
    title: 'РЎРєРёРґРєРё РґР»СЏ СЃС‚СѓРґРµРЅС‚РѕРІ',
    subtitle: 'РћР±РЅРѕРІР»СЏРµРј Р»СѓС‡С€РёРµ РїСЂРµРґР»РѕР¶РµРЅРёСЏ',
    gradient: [const Color(0xFF6AC38F), const Color(0xFF8DE4B0)],
    url: 'https://example.com/discounts',
  ),
];

class _FeedCarousel extends StatefulWidget {
  final List<FeedItem> items;
  final void Function(FeedItem) onTapItem;
  const _FeedCarousel({required this.items, required this.onTapItem});

  @override
  State<_FeedCarousel> createState() => _FeedCarouselState();
}

class _FeedCarouselState extends State<_FeedCarousel> {
  final PageController _controller = PageController(viewportFraction: .92);
  int _index = 0;

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final items = widget.items;

    return Column(
      children: [
        SizedBox(
          height: 160,
          child: PageView.builder(
            controller: _controller,
            onPageChanged: (i) => setState(() => _index = i),
            itemCount: items.length,
            itemBuilder: (_, i) {
              final it = items[i];
              return GestureDetector(
                onTap: () => widget.onTapItem(it),
                child: Container(
                  margin: const EdgeInsets.symmetric(horizontal: 6),
                  decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(20),
                    gradient: LinearGradient(
                      colors: it.gradient,
                      begin: Alignment.topLeft,
                      end: Alignment.bottomRight,
                    ),
                    boxShadow: [
                      BoxShadow(
                        color: it.gradient.last.withOpacity(.35),
                        blurRadius: 18,
                        offset: const Offset(0, 8),
                      ),
                    ],
                  ),
                  child: Stack(
                    children: [
                      Positioned(
                        left: 16,
                        right: 16,
                        bottom: 16,
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              it.title,
                              style: const TextStyle(
                                color: Colors.white,
                                fontSize: 18,
                                fontWeight: FontWeight.w800,
                              ),
                            ),
                            const SizedBox(height: 6),
                            Text(
                              it.subtitle,
                              style: const TextStyle(
                                color: Colors.white70,
                                fontSize: 13.5,
                                height: 1.2,
                              ),
                            ),
                          ],
                        ),
                      ),
                    ],
                  ),
                ),
              );
            },
          ),
        ),
        const SizedBox(height: 10),
        _DotsIndicator(length: items.length, index: _index),
      ],
    );
  }
}

class _DotsIndicator extends StatelessWidget {
  final int length;
  final int index;
  const _DotsIndicator({required this.length, required this.index});

  @override
  Widget build(BuildContext context) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.center,
      children: List.generate(length, (i) {
        final active = i == index;
        return AnimatedContainer(
          duration: const Duration(milliseconds: 250),
          margin: const EdgeInsets.symmetric(horizontal: 4),
          height: 6,
          width: active ? 18 : 6,
          decoration: BoxDecoration(
            color: active
                ? Theme.of(context).colorScheme.primary
                : Colors.grey.shade400,
            borderRadius: BorderRadius.circular(12),
          ),
        );
      }),
    );
  }
}

// =================== EXAMS BANNER ===================

class _ExamsBanner extends StatelessWidget {
  final VoidCallback onTap;
  const _ExamsBanner({required this.onTap});

  @override
  Widget build(BuildContext context) {
    final colors = [
      Theme.of(context).colorScheme.primary.withOpacity(.12),
      Theme.of(context).colorScheme.primary.withOpacity(.2),
    ];
    return GestureDetector(
      onTap: onTap,
      child: Container(
        height: 64,
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(16),
          gradient: LinearGradient(
            colors: colors,
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
          boxShadow: [
            BoxShadow(
              color: colors.last.withOpacity(.25),
              blurRadius: 16,
              offset: const Offset(0, 10),
            ),
          ],
        ),
        padding: const EdgeInsets.symmetric(horizontal: 16),
        child: Row(
          children: [
            const Icon(Icons.school_outlined, size: 24),
            const SizedBox(width: 12),
            Expanded(
              child: Text(
                'Р—Р°С‡С‘С‚С‹ Рё СЌРєР·Р°РјРµРЅС‹',
                style: Theme.of(context)
                    .textTheme
                    .titleMedium
                    ?.copyWith(fontWeight: FontWeight.w700),
              ),
            ),
            const Icon(Icons.chevron_right),
          ],
        ),
      ),
    );
  }
}

// =================== UTILS ===================

class _SectionTitle extends StatelessWidget {
  final String title;
  const _SectionTitle(this.title);

  @override
  Widget build(BuildContext context) {
    return Text(
      title,
      style: Theme.of(context)
          .textTheme
          .titleMedium
          ?.copyWith(fontWeight: FontWeight.w700),
    );
  }
}
import 'package:flutter/material.dart';
import 'package:lottie/lottie.dart';

class ScheduleScreen extends StatelessWidget {
  const ScheduleScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Р Р°СЃРїРёСЃР°РЅРёРµ Р·Р°РЅСЏС‚РёР№')),
      body: Center(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Lottie.asset(
              'assets/lottie/cat_sleeping.json',
              width: 180,
              height: 180,
              repeat: true,
            ),
            const SizedBox(height: 12),
            const Text(
              'Р—РґРµСЃСЊ РїРѕРєР° РїСѓСЃС‚Рѕ',
              style: TextStyle(fontSize: 14, color: Colors.grey),
              textAlign: TextAlign.center,
            ),
          ],
        ),
      ),
    );
  }
}
import 'package:flutter/material.dart';

class ChatScreen extends StatelessWidget {
  const ChatScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Р§Р°С‚ РїРѕ РїСЂРµРґРјРµС‚Сѓ')),
      body: const Center(
        child: Text(
          'Р§Р°С‚С‹ РїРѕРєР° РІ РґРµРјРѕ-СЂРµР¶РёРјРµ',
          style: TextStyle(fontSize: 18),
        ),
      ),
    );
  }
}
import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:lottie/lottie.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:go_router/go_router.dart';
import 'package:student_platform/src/core/session.dart';


class SplashScreen extends StatefulWidget {
  const SplashScreen({super.key});

  @override
  State<SplashScreen> createState() => _SplashScreenState();
}

class _SplashScreenState extends State<SplashScreen> {
  @override
  void initState() {
    super.initState();
    _bootstrap();
  }

  Future<void> _bootstrap() async {
    // РќРµР±РѕР»СЊС€Р°СЏ РїР°СѓР·Р° РґР»СЏ Р°РЅРёРјР°С†РёРё
    await Future.delayed(const Duration(milliseconds: 600));
    await AppSession.loadFromServer();

    final prefs = await SharedPreferences.getInstance();

    final loggedIn = prefs.getBool('loggedIn') ?? false;
    final userJson = prefs.getString('user');
    final hasUser = userJson != null && jsonDecode(userJson) is Map;

    if (!mounted) return;
    if (loggedIn && hasUser) {
      context.go('/home');
    } else {
      context.go('/login');
    }
  }

  @override
  Widget build(BuildContext context) {
    final t = Theme.of(context);
    return Scaffold(
      backgroundColor: t.colorScheme.surface,
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Lottie.asset('assets/lottie/cat_sleeping.json', height: 200),
            const SizedBox(height: 16),
            Text('Р—Р°РіСЂСѓР¶Р°РµРјвЂ¦', style: t.textTheme.titleMedium),
            const SizedBox(height: 8),
            const SizedBox(
              width: 28,
              height: 28,
              child: CircularProgressIndicator(strokeWidth: 3),
            ),
          ],
        ),
      ),
    );
  }
}
import 'package:flutter/material.dart';
import 'package:lottie/lottie.dart';

class LoadingWidget extends StatelessWidget {
  final String? message;
  const LoadingWidget({super.key, this.message});

  @override
  Widget build(BuildContext context) {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          // РђРЅРёРјР°С†РёСЏ РєРѕС€РєРё
          SizedBox(
            height: 150,
            child: Lottie.asset(
              'assets/lottie/cat_loading.json',
              fit: BoxFit.contain,
            ),
          ),
          const SizedBox(height: 16),
          // РЎРѕРѕР±С‰РµРЅРёРµ
          Text(
            message ?? 'Р—Р°РіСЂСѓР·РєР°...',
            style: Theme.of(context).textTheme.bodyMedium?.copyWith(
              fontSize: 16,
              fontWeight: FontWeight.w500,
            ),
          ),
        ],
      ),
    );
  }
}
import 'package:flutter/material.dart';
import 'package:lottie/lottie.dart';

class EmptyStateWidget extends StatelessWidget {
  final String title;
  final String subtitle;

  const EmptyStateWidget({
    super.key,
    required this.title,
    required this.subtitle,
  });

  @override
  Widget build(BuildContext context) {
    return Center(
      child: Padding(
        padding: const EdgeInsets.all(32),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Lottie.asset(
              'assets/lottie/cat_sleeping.json',
              width: 200,
              height: 200,
              repeat: true,
            ),
            const SizedBox(height: 16),
            Text(
              title,
              style: const TextStyle(fontSize: 18, fontWeight: FontWeight.w500),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 8),
            Text(
              subtitle,
              style: const TextStyle(fontSize: 14, color: Colors.grey),
              textAlign: TextAlign.center,
            ),
          ],
        ),
      ),
    );
  }
}
